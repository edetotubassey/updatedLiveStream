#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
#ifndef MEDIAFLOW_SWIFT_H
#define MEDIAFLOW_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreVideo;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MediaFlow",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)



typedef SWIFT_ENUM(int32_t, TMABRStartModes, open) {
  TMABRStartModesDefault = 0,
  TMABRStartModesLowest = 1,
  TMABRStartModesMiddle = 2,
  TMABRStartModesHighest = 3,
};

typedef SWIFT_ENUM(int32_t, TMApplicationFocusAndPauseHandlingTypes, open) {
  TMApplicationFocusAndPauseHandlingTypesLegacy = 0,
  TMApplicationFocusAndPauseHandlingTypesRecommended = 1,
  TMApplicationFocusAndPauseHandlingTypesDisabled = 2,
};

@class NSString;

SWIFT_CLASS("_TtC9MediaFlow13TMAsyncAction")
@interface TMAsyncAction : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int32_t, TMAudioCodecTypes, open) {
  TMAudioCodecTypesUnspecified = 0,
  TMAudioCodecTypesAacLc = 1,
};

/// Audio decoder engine types
typedef SWIFT_ENUM(int32_t, TMAudioDecoderTypes, open) {
  TMAudioDecoderTypesUnknown = 0,
  TMAudioDecoderTypesInternal = 1,
};


SWIFT_CLASS("_TtC9MediaFlow26TMAudioDecoderTypesCBridge")
@interface TMAudioDecoderTypesCBridge : NSObject
+ (enum TMAudioDecoderTypes)getAudioDecoderTypeWithArgValue:(int32_t)argValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// How the loss and gain of audio focus is being handled by the player.
typedef SWIFT_ENUM(int32_t, TMAudioFocusChangedHandlingTypes, open) {
/// The video playback will pause on loss of audio focus (ex: receiving a call) and will resume on gaining audio focus again.
  TMAudioFocusChangedHandlingTypesRecommended = 0,
};

/// Playback engine types
typedef SWIFT_ENUM(int32_t, TMAudioPlaybackEngineTypes, open) {
  TMAudioPlaybackEngineTypesUnknown = 0,
  TMAudioPlaybackEngineTypesInternal = 1,
};


SWIFT_CLASS("_TtC9MediaFlow33TMAudioPlaybackEngineTypesCBridge")
@interface TMAudioPlaybackEngineTypesCBridge : NSObject
/// These static helper functions help out to bridge Swift enums to objective C
/// \param argValue argValue description
///
///
/// returns:
/// return value description
+ (enum TMAudioPlaybackEngineTypes)getAudioPlaybackEngineTypeWithArgValue:(int32_t)argValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// SetAudioTrackParameters parameters, default values could be used
/// <ul>
///   <li>
///     @objc public var audioTrackIndex:Int32 = 0
///   </li>
///   <li>
///     if audioTrackIndex = 0 it searches for the “most” suitable audio track.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC9MediaFlow33TMAudioTrackAndPlaybackParameters")
@interface TMAudioTrackAndPlaybackParameters : NSObject
/// The index of the audio track.
@property (nonatomic, readonly) int32_t audioTrackIndex;
/// The type of audio decoder that is being used.
@property (nonatomic, readonly) enum TMAudioDecoderTypes audioDecoderType;
/// The type of audio playback engine that is being used.
@property (nonatomic, readonly) enum TMAudioPlaybackEngineTypes audioPlaybackEngineType;
/// the ID belonging to the content item.
@property (nonatomic, readonly) int32_t contentID;
/// the estimated playback latency in nano seconds.
@property (nonatomic, readonly) int64_t estimatedPlaybackLatency;
/// the decibel input of the audio as a float.
@property (nonatomic, readonly) float audioGain;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithArgAudioTrackIndex:(int32_t)argAudioTrackIndex argAudioDecoderType:(enum TMAudioDecoderTypes)argAudioDecoderType argAudioPlaybackEngineType:(enum TMAudioPlaybackEngineTypes)argAudioPlaybackEngineType argAudioGain:(float)argAudioGain;
- (nonnull instancetype)initWithArgAudioTrackIndex:(int32_t)argAudioTrackIndex;
+ (TMAudioTrackAndPlaybackParameters * _Nonnull)getDefault SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)toCoreProtobufWithArgAudioGain:(float)argAudioGain argEstimatedPlaybackLatencyInNanoseconds:(int64_t)argEstimatedPlaybackLatencyInNanoseconds SWIFT_WARN_UNUSED_RESULT;
- (int32_t)getAudioTrackIndex SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use audioTrackIndex instead.");
- (enum TMAudioDecoderTypes)getAudioDecoderType SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use audioDecoderType instead.");
- (enum TMAudioPlaybackEngineTypes)getAudioPlaybackEngineType SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use audioPlaybackEngineType instead.");
- (int32_t)getContentID SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use contentID instead.");
- (int64_t)getEstimatedPlaybackLatencyInNanoseconds SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use estimatedPlaybackLatency instead.");
- (float)getAudioGain SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use audioGain instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Helper class that holds the info of one audio track.
SWIFT_CLASS("_TtC9MediaFlow16TMAudioTrackInfo")
@interface TMAudioTrackInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9MediaFlow22TMAudioTrackProperties")
@interface TMAudioTrackProperties : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TMClearVRAsyncRequestTypes : int32_t;

/// The response of a request
SWIFT_CLASS("_TtC9MediaFlow21TMClearVRAsyncRequest")
@interface TMClearVRAsyncRequest : NSObject
@property (nonatomic) enum TMClearVRAsyncRequestTypes requestType;
@property (nonatomic) uint32_t requestId;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMClearVRMessage;

/// The response of a request after a request has been finished
SWIFT_CLASS("_TtC9MediaFlow29TMClearVRAsyncRequestResponse")
@interface TMClearVRAsyncRequestResponse : NSObject
@property (nonatomic, strong) TMClearVRAsyncRequest * _Nonnull tmClearVRAsyncRequest;
@property (nonatomic, strong) TMClearVRMessage * _Nonnull clearVRMessage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// A enum holding all the ClearVRRequest types.
typedef SWIFT_ENUM(int32_t, TMClearVRAsyncRequestTypes, open) {
  TMClearVRAsyncRequestTypesUnknown = 0,
  TMClearVRAsyncRequestTypesInitialize = 1,
  TMClearVRAsyncRequestTypesParseMediaInfo = 2,
  TMClearVRAsyncRequestTypesPrepareContentForPlayout = 3,
  TMClearVRAsyncRequestTypesStart = 4,
  TMClearVRAsyncRequestTypesPause = 5,
  TMClearVRAsyncRequestTypesUnpause = 6,
  TMClearVRAsyncRequestTypesSeek = 7,
  TMClearVRAsyncRequestTypesStop = 8,
  TMClearVRAsyncRequestTypesSwitchAudioTrack = 9,
  TMClearVRAsyncRequestTypesSwitchContent = 10,
  TMClearVRAsyncRequestTypesChangeStereoMode = 11,
  TMClearVRAsyncRequestTypesCallCore = 13,
  TMClearVRAsyncRequestTypesContentSupportedTest = 14,
  TMClearVRAsyncRequestTypesCallCoreStatic = 15,
  TMClearVRAsyncRequestTypesClearVRPlayerInitialize = 999,
};

typedef SWIFT_ENUM(int32_t, TMClearVRCoreErrorCodes, open) {
  TMClearVRCoreErrorCodesUnknownError = 0,
  TMClearVRCoreErrorCodesGenericError = -1,
  TMClearVRCoreErrorCodesInvalidProtoPayload = -2,
  TMClearVRCoreErrorCodesGenericFatalError = -3,
  TMClearVRCoreErrorCodesNoClearVRCoreActiveError = -5,
  TMClearVRCoreErrorCodesClearVRCoreConfigurationError = -6,
  TMClearVRCoreErrorCodesClearVRCoreInstanceAlreadyExistsError = -7,
  TMClearVRCoreErrorCodesClearVRCoreInstanceAlreadyInitializedError = -8,
  TMClearVRCoreErrorCodesClearVRCoreStateChangeNotAllowed = -10,
  TMClearVRCoreErrorCodesInterruptedCommand = -13,
  TMClearVRCoreErrorCodesNoOpCommand = -14,
  TMClearVRCoreErrorCodesLicenseGenericError = -20,
  TMClearVRCoreErrorCodesLicenseFileSignatureInvalidError = -21,
  TMClearVRCoreErrorCodesLicenseSignatureValidationFailedError = -22,
  TMClearVRCoreErrorCodesLicenseFormatVersionUnsupportedError = -23,
  TMClearVRCoreErrorCodesLicenseNoneProvided = -24,
  TMClearVRCoreErrorCodesUnableToObtainSessionLicense = -25,
  TMClearVRCoreErrorCodesOfflineLicenseInvalid = -26,
  TMClearVRCoreErrorCodesOfflineLicenseExpired = -27,
  TMClearVRCoreErrorCodesLicenseQueueOverFlow = -28,
  TMClearVRCoreErrorCodesInternalIOError = -30,
  TMClearVRCoreErrorCodesIdentityDetectionError = -31,
  TMClearVRCoreErrorCodesNetworkError = -40,
  TMClearVRCoreErrorCodesNetworkTCPConnectionError = -42,
  TMClearVRCoreErrorCodesNetworkDisconnectError = -43,
  TMClearVRCoreErrorCodesNetworkContextCancelled = -44,
  TMClearVRCoreErrorCodesNetworkCorruptData = -45,
  TMClearVRCoreErrorCodesNetworkHTTPUnknownError = -46,
  TMClearVRCoreErrorCodesContentSettingsError = -50,
  TMClearVRCoreErrorCodesInvalidProjectionOverrideSettings = -51,
  TMClearVRCoreErrorCodesHardwareDecoderLimitationError = -60,
  TMClearVRCoreErrorCodesMeasurementOutputError = -70,
  TMClearVRCoreErrorCodesTileCalculationGenericError = -80,
  TMClearVRCoreErrorCodesTileAssignmentGenericError = -90,
  TMClearVRCoreErrorCodesTileAssignmentNoFreeSlotAvailableError = -91,
  TMClearVRCoreErrorCodesProtobufOutputError = -100,
  TMClearVRCoreErrorCodesBinaryOutputError = -101,
  TMClearVRCoreErrorCodesGoHEVCGenericError = -110,
  TMClearVRCoreErrorCodesUnknownDecoderLevelError = -111,
  TMClearVRCoreErrorCodesManifestGenericError = -120,
  TMClearVRCoreErrorCodesManifestInvalidError = -121,
  TMClearVRCoreErrorCodesInvalidManifestURLError = -122,
  TMClearVRCoreErrorCodesInvalidURLSchemeError = -123,
  TMClearVRCoreErrorCodesManifestNotSupportedError = -124,
  TMClearVRCoreErrorCodesContentFormatGenericError = -130,
  TMClearVRCoreErrorCodesContentFormatUnsupportedVersionError = -131,
  TMClearVRCoreErrorCodesContentFormatUnsupportedProjectionError = -132,
  TMClearVRCoreErrorCodesContentFormatInvalid = -133,
  TMClearVRCoreErrorCodesContentFormatUnsupportedType = -134,
  TMClearVRCoreErrorCodesNoSupportedBundlesFound = -135,
  TMClearVRCoreErrorCodesIndexFormatGenericError = -140,
  TMClearVRCoreErrorCodesIndexFormatUnsupportedVersionError = -141,
  TMClearVRCoreErrorCodesInfoStoreGenericError = -142,
  TMClearVRCoreErrorCodesDataFormatGenericError = -150,
  TMClearVRCoreErrorCodesDataFormatUnsupportedVersionError = -151,
  TMClearVRCoreErrorCodesAudioFormatGenericError = -160,
  TMClearVRCoreErrorCodesAudioFormatUnsupportedAudioFormatError = -161,
  TMClearVRCoreErrorCodesParameterGenericError = -170,
  TMClearVRCoreErrorCodesParameterKeyDoesntExistError = -171,
  TMClearVRCoreErrorCodesParameterSetContainsInvalidValue = -172,
  TMClearVRCoreErrorCodesParameterNotInitializedError = -173,
  TMClearVRCoreErrorCodesParameterAlreadyInitializedError = -175,
  TMClearVRCoreErrorCodesParameterAlreadyRunningError = -176,
  TMClearVRCoreErrorCodesParameterIsReadOnlyError = -177,
  TMClearVRCoreErrorCodesParameterNoAudioSelectedError = -178,
  TMClearVRCoreErrorCodesParameterDoesntSupportIndexingError = -180,
  TMClearVRCoreErrorCodesParameterRequiresIndexingError = -181,
  TMClearVRCoreErrorCodesParameterInvalidIndexError = -182,
  TMClearVRCoreErrorCodesParameterDoesntSupportContentIDError = -183,
  TMClearVRCoreErrorCodesParameterInvalidContentIDError = -184,
  TMClearVRCoreErrorCodesSeekNotAvailable = -190,
  TMClearVRCoreErrorCodesAudioTrackDoesntExist = -191,
  TMClearVRCoreErrorCodesABRLevelDoesntExist = -192,
  TMClearVRCoreErrorCodesContentSwitchNotPossible = -193,
  TMClearVRCoreErrorCodesCannotSwitchToStereoContentRepresentationIsMono = -194,
  TMClearVRCoreErrorCodesCannotPerformABRSwitchDuringNonRunningState = -195,
  TMClearVRCoreErrorCodesCannotSwitchToStereoForceMonoEnabled = -196,
  TMClearVRCoreErrorCodesSubtitleTrackDoesntExist = -197,
  TMClearVRCoreErrorCodesIllegalFlags = -199,
  TMClearVRCoreErrorCodesCannotSwitchToStereoInsufficientDecoder = -200,
  TMClearVRCoreErrorCodesInvalidStatsReport = -210,
  TMClearVRCoreErrorCodesInteractionNotAvailableDuringLiveEvent = -230,
  TMClearVRCoreErrorCodesNoDRMStructProvided = -300,
  TMClearVRCoreErrorCodesInvalidLicenseServerType = -301,
  TMClearVRCoreErrorCodesUnableToRetrieveLicense = -303,
  TMClearVRCoreErrorCodesContentNotProtected = -304,
  TMClearVRCoreErrorCodesInvalidPEM = -305,
  TMClearVRCoreErrorCodesDRMSchemesNotSupportedOnDevice = -307,
  TMClearVRCoreErrorCodesDecryptionError = -308,
  TMClearVRCoreErrorCodesTestFrameGenericError = -310,
  TMClearVRCoreErrorCodesUnsupportedTestFrameCodec = -311,
  TMClearVRCoreErrorCodesUnsupportedTestFrameCodecProfile = -312,
  TMClearVRCoreErrorCodesUnsupportedTestFrameEncrypted = -313,
  TMClearVRCoreErrorCodesUnsupportedTestFrameDimensions = -314,
  TMClearVRCoreErrorCodesSavingPersistence = -320,
  TMClearVRCoreErrorCodesInvalidPersistencePath = -321,
  TMClearVRCoreErrorCodesSavingCoreState = -322,
  TMClearVRCoreErrorCodesLoadingCoreState = -323,
  TMClearVRCoreErrorCodesTimingUnsupportedValue = -330,
  TMClearVRCoreErrorCodesTimingWallclockNotSupportedForNonLive = -331,
  TMClearVRCoreErrorCodesTimingNotAvailableInCurrentState = -332,
  TMClearVRCoreErrorCodesInvalidSyncSettings = -340,
  TMClearVRCoreErrorCodesEnableSyncNotAllowed = -341,
  TMClearVRCoreErrorCodesInvalidPlaybackRate = -342,
  TMClearVRCoreErrorCodesDecoderCapabilitiesNetworkRetrievalError = -360,
  TMClearVRCoreErrorCodesDecoderCapabilitiesNotFound = -361,
  TMClearVRCoreErrorCodesEventManifestGenericError = -370,
  TMClearVRCoreErrorCodesEventManifestParsingError = -371,
  TMClearVRCoreErrorCodesEventManifestUnsupportedVersion = -372,
  TMClearVRCoreErrorCodesNonHomogenousTileSize = -380,
  TMClearVRCoreErrorCodesInvalidLogicalFeedIdx = -381,
  TMClearVRCoreErrorCodesUnableToFitRequestedFeedLayoutInDecoder = -382,
  TMClearVRCoreErrorCodesNetworkHTTP400 = -400,
  TMClearVRCoreErrorCodesNetworkHTTP401 = -401,
  TMClearVRCoreErrorCodesNetworkHTTP402 = -402,
  TMClearVRCoreErrorCodesNetworkHTTP403 = -403,
  TMClearVRCoreErrorCodesNetworkHTTP404 = -404,
  TMClearVRCoreErrorCodesNetworkHTTP405 = -405,
  TMClearVRCoreErrorCodesNetworkHTTP406 = -406,
  TMClearVRCoreErrorCodesNetworkHTTP407 = -407,
  TMClearVRCoreErrorCodesNetworkHTTP408 = -408,
  TMClearVRCoreErrorCodesNetworkHTTP409 = -409,
  TMClearVRCoreErrorCodesNetworkHTTP410 = -410,
  TMClearVRCoreErrorCodesNetworkHTTP411 = -411,
  TMClearVRCoreErrorCodesNetworkHTTP412 = -412,
  TMClearVRCoreErrorCodesNetworkHTTP4xx = -499,
  TMClearVRCoreErrorCodesNetworkHTTP500 = -500,
  TMClearVRCoreErrorCodesNetworkHTTP501 = -501,
  TMClearVRCoreErrorCodesNetworkHTTP502 = -502,
  TMClearVRCoreErrorCodesNetworkHTTP503 = -503,
  TMClearVRCoreErrorCodesNetworkHTTP504 = -504,
  TMClearVRCoreErrorCodesNetworkHTTP505 = -505,
  TMClearVRCoreErrorCodesNetworkHTTP506 = -506,
  TMClearVRCoreErrorCodesNetworkHTTP507 = -507,
  TMClearVRCoreErrorCodesNetworkHTTP508 = -508,
  TMClearVRCoreErrorCodesNetworkHTTP509 = -509,
  TMClearVRCoreErrorCodesNetworkHTTP510 = -510,
  TMClearVRCoreErrorCodesNetworkHTTP511 = -511,
  TMClearVRCoreErrorCodesNetworkHTTP5xx = -599,
  TMClearVRCoreErrorCodesCMSGenericError = -600,
  TMClearVRCoreErrorCodesCMSBackendUnknown = -601,
  TMClearVRCoreErrorCodesCMSErrorReadingLocalFile = -602,
  TMClearVRCoreErrorCodesCMSErrorParsingLocalFile = -603,
  TMClearVRCoreErrorCodesCMSErrorParsingRawJSON = -604,
  TMClearVRCoreErrorCodesCMSRequestError = -605,
  TMClearVRCoreErrorCodesCMSErrorParsingLegacyContentList = -606,
  TMClearVRCoreErrorCodesCMSErrorParsingContentList = -607,
  TMClearVRCoreErrorCodesHLSBlockingManifestReloadSegmentTimeout = -710,
  TMClearVRCoreErrorCodesHLSBlockingManifestReloadUnexpectedMSN = -711,
  TMClearVRCoreErrorCodesDecoderOverflowModeActivated = -740,
};

@protocol TMClearVRCoreWrapperDelegate;
@protocol TMRendererFrameDelegate;
@class NSData;
@class TMContentSupportedTesterParameters;
@class TMInitializeParameters;
@class TMPopulateMediaInfoParameters;
@class TMPrepareContentParameters;
@class TMStartPlayoutParameters;
@class TMTimingParameters;
@class TMSeekParameters;
@class TMSwitchContentParameters;
enum TMTimingTypes : int32_t;
@class TMReleasedTextureInfo;
@class TMStopParameters;
@class TMViewportAndDisplayObjectPose;

/// Wrapper around ClearVRCore
SWIFT_CLASS("_TtC9MediaFlow20TMClearVRCoreWrapper")
@interface TMClearVRCoreWrapper : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) float TM_DEFAULT_CORE_FRAMERATE;)
+ (float)TM_DEFAULT_CORE_FRAMERATE SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithArgClearVRCoreWrapperDelegate:(id <TMClearVRCoreWrapperDelegate> _Nonnull)argClearVRCoreWrapperDelegate argRendererFrameDelegate:(id <TMRendererFrameDelegate> _Nonnull)argRendererFrameDelegate OBJC_DESIGNATED_INITIALIZER;
/// App can always call version(). No ClearVRCore context required. This is the only static method.
///
/// returns:
/// the version string of ClearVRCore.
+ (NSString * _Nonnull)getClearVRCoreVersion SWIFT_WARN_UNUSED_RESULT;
/// (UnitySDK)
/// retrieve the proxy parameters, use default values for port and host to automatically retrieve them.
/// \param base64Message the current proxy parameters specified as base64Message
///
///
/// returns:
/// updated proxy parameters
+ (NSString * _Nullable)getProxyParametersWithBase64Message:(NSString * _Nonnull)base64Message SWIFT_WARN_UNUSED_RESULT;
+ (TMClearVRAsyncRequest * _Nonnull)testIsContentSupportedWithArgData:(NSData * _Nonnull)argData argCompletion:(void (^ _Nonnull)(TMClearVRAsyncRequestResponse * _Nonnull))argCompletion SWIFT_WARN_UNUSED_RESULT;
/// Allows you to test whether a (or multiple) TMContentItem are supported on the current device or not.
/// Be aware that the test requires view dimensions and device type to get an accurate estimation on whether a clip can be played or not.
/// Note that the return value of this method must be ignored. It does not contain any valueable information.
/// \param argContentSupportedTesterParameters the parameters describing your test
///
/// \param argCompletion The completion to handle upon success/failure.
///
///
/// returns:
/// The return value of this method must be ignored.
+ (TMClearVRAsyncRequest * _Nonnull)testIsContentSupportedWithArgContentSupportedTesterParameters:(TMContentSupportedTesterParameters * _Nonnull)argContentSupportedTesterParameters argCompletion:(void (^ _Nonnull)(TMClearVRAsyncRequestResponse * _Nonnull))argCompletion SWIFT_WARN_UNUSED_RESULT;
/// Description
/// \param argInitializeParameters argInitializeParameters description
///
/// \param argOptionalCallbackArguments argOptionalCallbackArguments description
///
/// \param argCompletion argCompletion description
///
- (void)initializeWithArgInitializeParameters:(TMInitializeParameters * _Nonnull)argInitializeParameters argOptionalCallbackArguments:(NSArray * _Nullable)argOptionalCallbackArguments argCompletion:(void (^ _Nullable)(TMClearVRAsyncRequestResponse * _Nonnull, NSArray * _Nullable))argCompletion;
/// Initialize with protobuf data
/// \param argData the proto data used to initialize
///
///
/// returns:
/// Async request to initialize
- (TMClearVRAsyncRequest * _Nonnull)initializeWithArgData:(NSData * _Nonnull)argData SWIFT_WARN_UNUSED_RESULT;
/// ParseMediaInfo
/// \param argPopulateMediaInfoParameters the parameters required for the populate media info action.
///
///
/// returns:
/// return value description
- (TMClearVRAsyncRequest * _Nonnull)populateMediaInfoWithArgPopulateMediaInfoParameters:(TMPopulateMediaInfoParameters * _Nonnull)argPopulateMediaInfoParameters SWIFT_WARN_UNUSED_RESULT;
/// ParseMediaInfo
/// \param argPopulateMediaInfoParameters argPopulateMediaInfoParameters description
///
/// \param argOptionalCallbackArguments argOptionalCallbackArguments description
///
/// \param argCompletion argCompletion description
///
- (void)populateMediaInfoWithArgPopulateMediaInfoParameters:(TMPopulateMediaInfoParameters * _Nonnull)argPopulateMediaInfoParameters argOptionalCallbackArguments:(NSArray * _Nullable)argOptionalCallbackArguments argCompletion:(void (^ _Nullable)(TMClearVRAsyncRequestResponse * _Nonnull, NSArray * _Nullable))argCompletion;
/// Populate media info using protobuf data
/// \param argData the proto data used to populate media info
///
///
/// returns:
/// Async request to populate media info
- (TMClearVRAsyncRequest * _Nonnull)populateMediaInfoWithArgData:(NSData * _Nonnull)argData SWIFT_WARN_UNUSED_RESULT;
/// prepare Content for playout using protobuf data
/// \param argData the data used to create the prepareContentForPlayoutParameters
///
///
/// returns:
/// call to prepare content for playout
- (TMClearVRAsyncRequest * _Nonnull)prepareContentForPlayoutWithArgData:(NSData * _Nonnull)argData SWIFT_WARN_UNUSED_RESULT;
/// Description
/// \param argPrepareContentParameters argPrepareContentParameters description
///
/// \param argOptionalCallbackArguments argOptionalCallbackArguments description
///
/// \param argCompletion argCompletion description
///
- (void)prepareContentForPlayoutWithArgPrepareContentParameters:(TMPrepareContentParameters * _Nonnull)argPrepareContentParameters argOptionalCallbackArguments:(NSArray * _Nullable)argOptionalCallbackArguments argCompletion:(void (^ _Nullable)(TMClearVRAsyncRequestResponse * _Nonnull, NSArray * _Nullable))argCompletion;
/// Description
/// \param argStartPlayoutParameters argStartPlayoutParameters description
///
///
/// returns:
/// return value description
- (TMClearVRAsyncRequest * _Nonnull)startPlayoutWithArgStartPlayoutParameters:(TMStartPlayoutParameters * _Nonnull)argStartPlayoutParameters SWIFT_WARN_UNUSED_RESULT;
/// Description
/// \param argStartPlayoutParameters argStartPlayoutParameters description
///
/// \param argOptionalCallbackArguments argOptionalCallbackArguments description
///
/// \param argCompletion argCompletion description
///
- (void)startPlayoutWithArgStartPlayoutParameters:(TMStartPlayoutParameters * _Nonnull)argStartPlayoutParameters argOptionalCallbackArguments:(NSArray * _Nullable)argOptionalCallbackArguments argCompletion:(void (^ _Nullable)(TMClearVRAsyncRequestResponse * _Nonnull, NSArray * _Nullable))argCompletion;
/// Description
/// \param argOptionalCallbackArguments argOptionalCallbackArguments description
///
/// \param argCompletion argCompletion description
///
///
/// returns:
/// return value description
- (void)pauseWithArgOptionalCallbackArguments:(NSArray * _Nullable)argOptionalCallbackArguments argCompletion:(void (^ _Nullable)(TMClearVRAsyncRequestResponse * _Nonnull, NSArray * _Nullable))argCompletion;
/// Description
///
/// returns:
/// return value description
- (TMClearVRAsyncRequest * _Nonnull)pause SWIFT_WARN_UNUSED_RESULT;
/// Description
/// \param argOptionalCallbackArguments argOptionalCallbackArguments description
///
/// \param argCompletion argCompletion description
///
///
/// returns:
/// return value description
- (void)unpauseWithArgTimingParameters:(TMTimingParameters * _Nullable)argTimingParameters argOptionalCallbackArguments:(NSArray * _Nullable)argOptionalCallbackArguments argCompletion:(void (^ _Nullable)(TMClearVRAsyncRequestResponse * _Nonnull, NSArray * _Nullable))argCompletion;
/// Description
///
/// returns:
/// return value description
- (TMClearVRAsyncRequest * _Nonnull)unpauseWithArgData:(NSData * _Nullable)argData SWIFT_WARN_UNUSED_RESULT;
/// Seek
/// \param argSeekParameters argSeekParameters description
///
/// \param argOptionalCallbackArguments argOptionalCallbackArguments description
///
/// \param argCompletion argCompletion description
///
- (void)seekWithArgSeekParameters:(TMSeekParameters * _Nonnull)argSeekParameters argOptionalCallbackArguments:(NSArray * _Nullable)argOptionalCallbackArguments argCompletion:(void (^ _Nullable)(TMClearVRAsyncRequestResponse * _Nonnull, NSArray * _Nullable))argCompletion;
/// Seek
/// \param argData the Data containing the seek request information.
///
///
/// returns:
/// seek request
- (TMClearVRAsyncRequest * _Nonnull)seekWithArgData:(NSData * _Nonnull)argData SWIFT_WARN_UNUSED_RESULT;
/// switch content using protobuf data
/// \param argData protobuf data containing the switch content parameters
///
///
/// returns:
/// async switch content call
- (TMClearVRAsyncRequest * _Nonnull)switchContentWithArgData:(NSData * _Nonnull)argData SWIFT_WARN_UNUSED_RESULT;
/// Description
/// \param argSwitchContentParameters argSwitchContentParameters description
///
/// \param argOptionalCallbackArguments argOptionalCallbackArguments description
///
/// \param argCompletion argCompletion description
///
///
/// returns:
/// return value description
- (void)switchContentWithArgSwitchContentParameters:(TMSwitchContentParameters * _Nonnull)argSwitchContentParameters argOptionalCallbackArguments:(NSArray * _Nullable)argOptionalCallbackArguments argCompletion:(void (^ _Nullable)(TMClearVRAsyncRequestResponse * _Nonnull, NSArray * _Nullable))argCompletion;
/// callCore
/// \param argBase64Message the message to send, Base64 encoded
///
/// \param argOptionalCallbackArguments argOptionalCallbackArguments the optional callback arguments you’d like to use
///
/// \param argCompletion completion
///
- (TMClearVRAsyncRequest * _Nonnull)callCoreWithArgBase64Message:(NSString * _Nonnull)argBase64Message argOptionalCallbackArguments:(NSArray * _Nullable)argOptionalCallbackArguments argCompletion:(void (^ _Nullable)(TMClearVRAsyncRequestResponse * _Nonnull, NSArray * _Nullable))argCompletion SWIFT_WARN_UNUSED_RESULT;
/// call the core
/// \param argBase64Message the message you’d like to send
///
///
/// returns:
/// an asynchronous request
- (TMClearVRAsyncRequest * _Nonnull)callCoreWithArgBase64Message:(NSString * _Nonnull)argBase64Message SWIFT_WARN_UNUSED_RESULT;
+ (TMClearVRAsyncRequest * _Nonnull)callCoreWithBase64Message:(NSString * _Nonnull)base64Message completion:(void (^ _Nonnull)(TMClearVRAsyncRequestResponse * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// callCore synchronously
/// \param base64Message the message to send, Base64 encoded
///
- (NSString * _Nonnull)callCoreSyncWithBase64Message:(NSString * _Nonnull)base64Message SWIFT_WARN_UNUSED_RESULT;
/// Parse the callCoreRequest and inspect in case any logic needs to be executed
/// \param base64Message the request to be sent to the core
///
///
/// returns:
/// a (possibly modified) version of the input message, even in case of failure
+ (NSString * _Nonnull)handleCallCoreStaticRequestInspectionWithArgBase64Message:(NSString * _Nonnull)argBase64Message SWIFT_WARN_UNUSED_RESULT;
/// Send a request to the core (static & sync version)
/// \param base64Message the request to be sent to the core
///
///
/// returns:
/// the result that comes after your request as base64 string
+ (NSString * _Nonnull)callCoreStaticSyncWithBase64Message:(NSString * _Nonnull)base64Message SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)getTimingReportWithArgTimingType:(enum TMTimingTypes)argTimingType SWIFT_WARN_UNUSED_RESULT;
/// Mute audio if possible (not implemented yet)
///
/// returns:
/// true if muted, false otherwise
- (BOOL)muteAudio SWIFT_WARN_UNUSED_RESULT;
/// Unmute audio if possible Mute audio if possible (not implemented yet)
///
/// returns:
/// true if muted, false otherwise
- (BOOL)unmuteAudio SWIFT_WARN_UNUSED_RESULT;
/// Get whether audio is muted or not.
///
/// returns:
/// true if muted, false otherwise
- (BOOL)getIsAudioMuted SWIFT_WARN_UNUSED_RESULT;
/// Set audio gain on a scale from 0…1
- (void)setAudioGainWithArgGain:(float)argGain;
/// Get audio gain on a scale from 0…1 return -1 if unknown
- (float)getAudioGain SWIFT_WARN_UNUSED_RESULT;
- (float)getMuteState SWIFT_WARN_UNUSED_RESULT;
/// Description
/// \param argMonoscopicOrStereoscopicMode argMonoscopicOrStereoscopicMode description
///
/// \param argOptionalCallbackArguments argOptionalCallbackArguments description
///
/// \param argCompletion argCompletion description
///
- (void)setStereoscopicModeWithArgMonoscopicOrStereoscopicMode:(BOOL)argMonoscopicOrStereoscopicMode argOptionalCallbackArguments:(NSArray * _Nullable)argOptionalCallbackArguments argCompletion:(void (^ _Nullable)(TMClearVRAsyncRequestResponse * _Nonnull, NSArray * _Nullable))argCompletion;
/// setStereoscopicMode
/// \param argMonoscopicOrStereoscopicMode argMonoscopicOrStereoscopicMode description
///
///
/// returns:
/// return value description
- (TMClearVRAsyncRequest * _Nonnull)setStereoscopicModeWithArgMonoscopicOrStereoscopicMode:(BOOL)argMonoscopicOrStereoscopicMode SWIFT_WARN_UNUSED_RESULT;
/// Signals an event to the core. This is called from the NRP only.
/// \param argSeverity the severity (0 = Fatal, 1 = Error, 2 = Warning, 3 = Info, 4 = Debug)
///
/// \param argIdentifier the event identifier
///
/// \param argMessage the event message
///
/// \param argComponentType the component type (Unknown = 0, TmCore = 1, Nrp = 2, MediaFlow = 3, Sdk= 4, SigmaAudio = 5)
///
+ (void)signalSDKEventStaticWithArgSeverity:(NSInteger)argSeverity argIdentifier:(NSString * _Nonnull)argIdentifier argMessage:(NSString * _Nonnull)argMessage argComponent:(NSInteger)argComponent;
+ (void)clearVRCoreLogWithArgMsg:(NSString * _Nonnull)argMsg argLogComponent:(int32_t)argLogComponent argLogLevel:(int32_t)argLogLevel;
/// Set a specific parameter on ClearVRCore. Check ClearVRCore documentation for valid keys and values.
/// Note that not all keys can be set at any time.
/// This method will throw an error if an illegal query is performed.
/// \param argKey The key to set
///
/// \param argValue The value to set the key to
///
- (BOOL)setParameterWithArgKey:(NSString * _Nonnull)argKey argValue:(NSString * _Nonnull)argValue error:(NSError * _Nullable * _Nullable)error;
/// Set a specific parameter on ClearVRCore. Check ClearVRCore documentation for valid keys and values.
/// Note that not all keys can be set at any time.
/// This method will throw an error if an illegal query is performed.
/// \param argKey The key to set
///
/// \param argValue The value to set the key to
///
+ (BOOL)setParameterStaticWithArgKey:(NSString * _Nonnull)argKey argValue:(NSString * _Nonnull)argValue error:(NSError * _Nullable * _Nullable)error;
- (BOOL)setParameterSafelyWithArgKey:(NSString * _Nonnull)argKey argValue:(NSString * _Nonnull)argValue SWIFT_WARN_UNUSED_RESULT;
/// Query ClearVRCore for a specific parameter. Check ClearVRCore documentation for valid keys
/// and how to interpret (cast) the resulting value. Note that not all keys can be queries at any time.
/// This method will throw an error if an illegal query is performed.
/// \param argKey argKey description
///
- (NSString * _Nullable)getParameterWithArgKey:(NSString * _Nonnull)argKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getParameterSafelyWithArgKey:(NSString * _Nonnull)argKey SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getContentParameterWithArgContentID:(int32_t)argContentID argKey:(NSString * _Nonnull)argKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getContentParameterStaticWithArgContentID:(int32_t)argContentID argKey:(NSString * _Nonnull)argKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getContentParameterSafelyWithArgContentID:(int32_t)argContentID argKey:(NSString * _Nonnull)argKey SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getArrayParameterWithArgKey:(NSString * _Nonnull)argKey argIndex:(NSInteger)argIndex error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getArrayParameterSafelyWithArgKey:(NSString * _Nonnull)argKey argIndex:(NSInteger)argIndex SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getContentArrayParameterWithArgContentID:(int32_t)argContentID argKey:(NSString * _Nonnull)argKey argIndex:(NSInteger)argIndex error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getContentArrayParameterSafelyWithArgContentID:(int32_t)argContentID argKey:(NSString * _Nonnull)argKey argIndex:(NSInteger)argIndex SWIFT_WARN_UNUSED_RESULT;
- (int32_t)getAverageBitrateInKbps SWIFT_WARN_UNUSED_RESULT;
/// Callback fires as soon as ClearVRCore changes state. ClearVRCore state dictates the state of clearvrcorewrapper class.
/// \param argNewState argNewState the new state as a string.
///
- (void)stateChanged:(NSString * _Nullable)argNewState;
/// returns the next available texture
///
/// returns:
/// ReleasedTextureInfo
- (TMReleasedTextureInfo * _Nullable)updateTextureWithArgIndex:(NSInteger)argIndex SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isDecoderAvailableWithArgIndex:(NSInteger)argIndex SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDeviceAppId SWIFT_WARN_UNUSED_RESULT;
/// Handles ClearVRCore event
/// \param argEventType describes the event types
///
/// \param argEventPayload currently not used
///
- (void)event:(NSString * _Nullable)argEventType argEventPayload:(NSString * _Nullable)argEventPayload;
/// fatalError
/// \param p0 the fatal error from the core as a string 
///
- (void)fatalErrorCore:(NSString * _Nullable)p0;
+ (int16_t)registerNRPCallbacksWithVoidHandle:(int64_t)voidHandle SWIFT_WARN_UNUSED_RESULT;
/// Stops clearVRCore. With return and no completionhandler.
/// Please refer to the ClearVRCore documentation for a detailed description.
- (TMClearVRAsyncRequest * _Nonnull)stopClearVRCore SWIFT_WARN_UNUSED_RESULT;
/// Stops clearVRCore with completionhandler
- (void)stopClearVRCoreWithArgOptionalCallbackArguments:(NSArray * _Nullable)argOptionalCallbackArguments argCompletion:(void (^ _Nullable)(TMClearVRAsyncRequestResponse * _Nonnull, NSArray * _Nullable))argCompletion;
/// Stops clearVRCore. With return and no completionhandler.
- (TMClearVRAsyncRequest * _Nonnull)stopClearVRCoreWithArgStopParameters:(TMStopParameters * _Nonnull)argStopParameters SWIFT_WARN_UNUSED_RESULT;
/// Stops clearVRCore.  With completionhandler.
/// \param argStopParameters argStopParameters description
///
///
/// returns:
/// return value description
- (void)stopClearVRCoreWithArgStopParameters:(TMStopParameters * _Nonnull)argStopParameters argOptionalCallbackArguments:(NSArray * _Nullable)argOptionalCallbackArguments argCompletion:(void (^ _Nullable)(TMClearVRAsyncRequestResponse * _Nonnull, NSArray * _Nullable))argCompletion;
- (void)sendSensorDataWithArgViewportAndDisplayObjectPose:(TMViewportAndDisplayObjectPose * _Nonnull)argViewportAndDisplayObjectPose;
- (void)sendSensorDataWithArgViewportPosePositionX:(double)argViewportPosePositionX argViewportPosePositionY:(double)argViewportPosePositionY argViewportPosePositionZ:(double)argViewportPosePositionZ argViewportPoseW:(double)argViewportPoseW argViewportPoseX:(double)argViewportPoseX argViewportPoseY:(double)argViewportPoseY argViewportPoseZ:(double)argViewportPoseZ argDisplayObjectPosePositionX:(double)argDisplayObjectPosePositionX argDisplayObjectPosePositionY:(double)argDisplayObjectPosePositionY argDisplayObjectPosePositionZ:(double)argDisplayObjectPosePositionZ argDisplayObjectPoseW:(double)argDisplayObjectPoseW argDisplayObjectPoseX:(double)argDisplayObjectPoseX argDisplayObjectPoseY:(double)argDisplayObjectPoseY argDisplayObjectPoseZ:(double)argDisplayObjectPoseZ argDisplayObjectPoseScaleX:(double)argDisplayObjectPoseScaleX argDisplayObjectPoseScaleY:(double)argDisplayObjectPoseScaleY argDisplayObjectPoseScaleZ:(double)argDisplayObjectPoseScaleZ;
/// One can use this method to force an internal crash. The crash triggered in ClearVRCore should be caught by the crash handler which in turn should take appropriate actions (clean up the mess) and notify the application layer.
- (void)forceClearVRCoreCrash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





/// This delegates sends important information from the Wrapper to the subscribed class.
SWIFT_PROTOCOL("_TtP9MediaFlow28TMClearVRCoreWrapperDelegate_")
@protocol TMClearVRCoreWrapperDelegate
- (void)cbAsyncRequestResponseWithArgClearVRAsyncRequestResponse:(TMClearVRAsyncRequestResponse * _Nonnull)argClearVRAsyncRequestResponse;
- (void)cbClearVRMessageWithArgClearVRMessage:(TMClearVRMessage * _Nonnull)argClearVRMessage;
@end

typedef SWIFT_ENUM(int32_t, TMClearVRDRMLicenseServerTypes, open) {
  TMClearVRDRMLicenseServerTypesUnspecified = 0,
  TMClearVRDRMLicenseServerTypesDRMLicenseServerViaccessOrcaTokenbased = 1,
  TMClearVRDRMLicenseServerTypesDRMLicenseServerWidevineGeneric = 2,
};


SWIFT_CLASS("_TtC9MediaFlow27TMClearVRDisplayObjectEvent")
@interface TMClearVRDisplayObjectEvent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9MediaFlow14TMClearVREvent")
@interface TMClearVREvent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int32_t, TMClearVREventTypes, open) {
  TMClearVREventTypesNone = 0,
  TMClearVREventTypesStateChangedUninitialized = 1,
  TMClearVREventTypesStateChangedInitializing = 2,
  TMClearVREventTypesStateChangedInitialized = 3,
  TMClearVREventTypesStateChangedPreparingCore = 4,
  TMClearVREventTypesStateChangedCorePrepared = 5,
  TMClearVREventTypesStateChangedPreparingContentForPlayout = 6,
  TMClearVREventTypesStateChangedContentPreparedForPlayout = 7,
  TMClearVREventTypesStateChangedBuffering = 8,
  TMClearVREventTypesStateChangedPlaying = 9,
  TMClearVREventTypesStateChangedPausing = 10,
  TMClearVREventTypesStateChangedPaused = 11,
  TMClearVREventTypesStateChangedSeeking = 12,
  TMClearVREventTypesStateChangedSwitchingContent = 13,
  TMClearVREventTypesStateChangedFinished = 14,
  TMClearVREventTypesStateChangedStopping = 15,
  TMClearVREventTypesStateChangedStopped = 16,
  TMClearVREventTypesParsingMediaInfo = 17,
  TMClearVREventTypesMediaInfoParsed = 18,
  TMClearVREventTypesRenderModeChanged = 19,
  TMClearVREventTypesFirstFrameRendered = 20,
  TMClearVREventTypesAudioTrackSwitched = 21,
  TMClearVREventTypesContentSwitched = 22,
  TMClearVREventTypesUnableToInitializePlayer = 23,
  TMClearVREventTypesSuspendingPlaybackBeforeApplicationPaused = 24,
  TMClearVREventTypesSuspendingPlaybackAfterApplicationLostFocus = 25,
  TMClearVREventTypesResumingPlaybackAfterApplicationPaused = 26,
  TMClearVREventTypesResumingPlaybackAfterApplicationRegainedFocus = 27,
  TMClearVREventTypesStereoModeSwitched = 28,
  TMClearVREventTypesContentFormatChanged = 29,
  TMClearVREventTypesABRSwitch = 30,
  TMClearVREventTypesABRLevelActivated = 31,
  TMClearVREventTypesActiveTracksChanged = 32,
  TMClearVREventTypesAudioFocusChanged = 33,
  TMClearVREventTypesPrewarmCacheCompleted = 34,
  TMClearVREventTypesCallCoreCompleted = 35,
  TMClearVREventTypesGenericMessage = 36,
};

enum TMClearVRMessageTypes : int32_t;
enum TMClearVRMessageCodes : int32_t;
@class TMVideoDecoderCapabilities;

/// <ul>
///   <li>
///     The clearVRMessage object is used to pass information from the core->wrapper->MediaFlow to the App layer.
///   </li>
///   <li>
///     It contains an isSucces boolean (false if it has failed).
///   </li>
///   <li>
///     It contains a message string, which can contain some information.
///   </li>
///   <li>
///     An error/or succes Code.
///   </li>
///   <li>
///     And a ClearVRMessageType.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC9MediaFlow16TMClearVRMessage")
@interface TMClearVRMessage : NSObject
/// a ClearVRMessageType
@property (nonatomic) enum TMClearVRMessageTypes clearVRMessageType;
/// An error/or success Code.
@property (nonatomic) int32_t code;
/// A message string, which can contain some information.
@property (nonatomic, copy) NSString * _Nonnull message;
/// It contains an isSucces boolean (false if it has failed).
@property (nonatomic) BOOL isSuccess;
- (nonnull instancetype)initWithArgClearVRMessageType:(enum TMClearVRMessageTypes)argClearVRMessageType argClearVRMessageCode:(enum TMClearVRMessageCodes)argClearVRMessageCode argMessage:(NSString * _Nonnull)argMessage argIsSuccess:(BOOL)argIsSuccess OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMClearVRMessage * _Nonnull genericOKMessage;)
+ (TMClearVRMessage * _Nonnull)genericOKMessage SWIFT_WARN_UNUSED_RESULT;
+ (TMClearVRMessage * _Nonnull)genericOKMessageWithOverrideMessage:(NSString * _Nonnull)overrideMessage SWIFT_WARN_UNUSED_RESULT;
+ (TMClearVRMessage * _Nonnull)genericWarningMessage:(NSString * _Nonnull)overrideMessage SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMClearVRMessage * _Nonnull requestCanceledWarning;)
+ (TMClearVRMessage * _Nonnull)requestCanceledWarning SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TMClearVRMessage * _Nonnull genericFatalErrorMessage;)
+ (TMClearVRMessage * _Nonnull)genericFatalErrorMessage SWIFT_WARN_UNUSED_RESULT;
+ (TMClearVRMessage * _Nonnull)genericFatalErrorMessageWithMessage:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) enum TMClearVRMessageCodes clearVRMessageCode;
@property (nonatomic, readonly) enum TMClearVRCoreErrorCodes clearVRCoreErrorCode;
@property (nonatomic, readonly) BOOL hasKnownClearVRMessageCode;
@property (nonatomic, readonly) BOOL hasKnownClearVRCoreErrorCode;
- (TMAudioTrackAndPlaybackParameters * _Nullable)parseAudioTrackChanged SWIFT_WARN_UNUSED_RESULT;
- (TMVideoDecoderCapabilities * _Nullable)parseVideoDecoderCapabilities SWIFT_WARN_UNUSED_RESULT;
- (void)updateWithArgClearVRMessageType:(enum TMClearVRMessageTypes)argClearVRMessageType argClearVRMessageCode:(enum TMClearVRMessageCodes)argClearVRMessageCode argMessage:(NSString * _Nonnull)argMessage argIsSuccess:(BOOL)argIsSuccess;
- (void)updateWithArgClearVRMessageType:(enum TMClearVRMessageTypes)argClearVRMessageType argClearVRCoreErrorCode:(enum TMClearVRCoreErrorCodes)argClearVRCoreErrorCode argMessage:(NSString * _Nonnull)argMessage argIsSuccess:(BOOL)argIsSuccess;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// represents a list of clearVRMessageCodes
typedef SWIFT_ENUM(int32_t, TMClearVRMessageCodes, open) {
  TMClearVRMessageCodesUnknown = 0,
  TMClearVRMessageCodesGenericWarning = -2001,
  TMClearVRMessageCodesGenericFatalError = -2002,
  TMClearVRMessageCodesSetRenderModeFailed = -2003,
  TMClearVRMessageCodesAPINotSupportedOnThisPlatform = -2004,
  TMClearVRMessageCodesUnspecifiedFailure = -1000,
  TMClearVRMessageCodesAlreadyInitialized = -1001,
  TMClearVRMessageCodesExceptionFromClearVRCore = -1002,
  TMClearVRMessageCodesClearVRCoreNotProperlyInitialized = -1003,
  TMClearVRMessageCodesClearVRCoreUnableToParseMediaInfo = -1004,
  TMClearVRMessageCodesCannotGenerateDeviceAppId = -1005,
  TMClearVRMessageCodesContentLoadingTimeout = -1006,
  TMClearVRMessageCodesClearVRCoreInitializationTimeout = -1007,
  TMClearVRMessageCodesInvalidOrUnsupportedProxySettings = -1008,
  TMClearVRMessageCodesDeviceNotSUpported = -1009,
/// -1010 - -1019 reserved for video decoder related errors
  TMClearVRMessageCodesVideoDecoderNotInitialized = -1010,
/// Message type to signal the application level that a critical error occurred in the video decoder.
/// This error is unrecoverable.
  TMClearVRMessageCodesVideoDecoderDecodingFailure = -1011,
  TMClearVRMessageCodesNoHardwareVideoDecoderAvailable = -1012,
  TMClearVRMessageCodesVideoDecoderCannotDecodeFrame = -1013,
  TMClearVRMessageCodesVideoDecoderDoesNotSupportProfileOrLevel = -1014,
  TMClearVRMessageCodesVideoMimeTypeNotSupportedBySDK = 1015,
  TMClearVRMessageCodesVideoDecoderCannotConfigureDecoder = -1016,
/// -1020 - -1029 reserved for audio decoder related errors
  TMClearVRMessageCodesAudioDecoderNotInitialized = -1020,
  TMClearVRMessageCodesAudioDecoderDecodingFailure = -1021,
  TMClearVRMessageCodesAudioDecoderCannotDecodeSample = -1022,
  TMClearVRMessageCodesAudioDecoderFormatNotSupported = -1023,
/// -1030 - -1049 reserved for audio playback engine related errors
  TMClearVRMessageCodesAudioPlaybackEngineNotInitialized = -1030,
  TMClearVRMessageCodesAudioPlaybackEngineFailure = -1031,
/// -1050 .. -1059 DRM related messages
  TMClearVRMessageCodesVideoDRMGenericError = -1050,
  TMClearVRMessageCodesVideoDRMSchemeUnsupported = -1051,
  TMClearVRMessageCodesVideoDRMSessionDeniedByServer = -1052,
  TMClearVRMessageCodesVideoDRMUnableToProvision = -1053,
  TMClearVRMessageCodesUnspecifiedWarning = -1100,
  TMClearVRMessageCodesNonFatalExceptionFromClearVRCore = -1101,
  TMClearVRMessageCodesSpatialAudioNotSupported = -1102,
  TMClearVRMessageCodesVideoDecoderInputOverflow = -1103,
  TMClearVRMessageCodesVideoDecoderOutputOverflow = -1104,
  TMClearVRMessageCodesInvalidState = -1105,
  TMClearVRMessageCodesContentDoesNotSupportSeek = -1106,
  TMClearVRMessageCodesCannotSwitchAudioTrack = -1107,
  TMClearVRMessageCodesCannotSwitchContent = -1108,
  TMClearVRMessageCodesVideoDecoderFrameDropped = -1109,
  TMClearVRMessageCodesRequestCancelled = -1110,
  TMClearVRMessageCodesVideoDecoderTooSlow = -1111,
  TMClearVRMessageCodesVideoDecoderConfigureDecoderThrewWarning = -1112,
  TMClearVRMessageCodesVideoDecoderFrameWithoutMetadataDropped = -1113,
  TMClearVRMessageCodesVideoDecoderSlowPriming = -1114,
  TMClearVRMessageCodesPrepareContentForPlayoutCancelled = -1115,
  TMClearVRMessageCodesGenericOK = -1200,
  TMClearVRMessageCodesGenericInfo = -1201,
  TMClearVRMessageCodesGraphicsBackendVersion = -1202,
  TMClearVRMessageCodesVideoDecoderCapabilities = -1203,
  TMClearVRMessageCodesAudioTrackChanged = -1204,
  TMClearVRMessageCodesStereoscopicModeChanged = -1205,
  TMClearVRMessageCodesVideoDRMSessionEstablished = -1206,
  TMClearVRMessageCodesABRLevelActivated = -1207,
  TMClearVRMessageCodesSyncStateChanged = -1208,
  TMClearVRMessageCodesActiveTracksChanged = -1209,
  TMClearVRMessageCodesAudioFocusGained = -1210,
  TMClearVRMessageCodesAudioFocusLost = -1211,
  TMClearVRMessageCodesSubtitle = -1212,
  TMClearVRMessageCodesCallApp = -1299,
  TMClearVRMessageCodesClearVRCoreStateUninitialized = -1300,
  TMClearVRMessageCodesClearVRCoreStateInitializing = -1301,
  TMClearVRMessageCodesClearVRCoreStateInitialized = -1302,
  TMClearVRMessageCodesClearVRCoreStateRunning = -1303,
  TMClearVRMessageCodesClearVRCoreStatePausing = -1304,
  TMClearVRMessageCodesClearVRCoreStatePaused = -1305,
  TMClearVRMessageCodesClearVRCoreStateBuffering = -1306,
  TMClearVRMessageCodesClearVRCoreStateSeeking = -1307,
  TMClearVRMessageCodesClearVRCoreStateSwitchingContent = -1308,
  TMClearVRMessageCodesClearVRCoreStateFinished = -1309,
  TMClearVRMessageCodesClearVRCoreStateStopped = -1310,
  TMClearVRMessageCodesTestContentSupportedInternalReport = -1400,
};

/// This enum reporesents the type of ClearVRMessages. Errors are important to take a not of
typedef SWIFT_ENUM(int32_t, TMClearVRMessageTypes, open) {
  TMClearVRMessageTypesNotSpecified = -1,
  TMClearVRMessageTypesFatalError = 0,
  TMClearVRMessageTypesWarning = 1,
  TMClearVRMessageTypesInfo = 2,
};

enum TMClearVRProxyTypes : int32_t;

SWIFT_CLASS("_TtC9MediaFlow24TMClearVRProxyParameters")
@interface TMClearVRProxyParameters : NSObject
/// The type of proxy that is used.
@property (nonatomic) enum TMClearVRProxyTypes proxyType;
/// <auto> means: auto-detect, set to an empty string to forcefully disable the host
@property (nonatomic, copy) NSString * _Nonnull host;
/// -1 means: auto-detect, set to 0 to forcefully disable the port
@property (nonatomic) NSInteger port;
/// Set to an empty string to forcefully disable username, set to <auto> for auto-detection (which is not officially supported as it is not a cross-platform feature)
@property (nonatomic, copy) NSString * _Nonnull username;
/// We cannot auto-detect username/password, set to an empty string to forcefully disable password
@property (nonatomic, copy) NSString * _Nonnull password;
- (nonnull instancetype)initWithArgProxyType:(enum TMClearVRProxyTypes)argProxyType OBJC_DESIGNATED_INITIALIZER;
- (void)updateParametersWithArgHost:(NSString * _Nonnull)argHost argPort:(NSInteger)argPort argUsername:(NSString * _Nonnull)argUsername argPassword:(NSString * _Nonnull)argPassword;
- (BOOL)validateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (NSString * _Nonnull)getAddress SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int32_t, TMClearVRProxyTypes, open) {
  TMClearVRProxyTypesUnknown = 0,
  TMClearVRProxyTypesHttp = 1,
  TMClearVRProxyTypesHttps = 2,
};


SWIFT_CLASS("_TtC9MediaFlow26TMClearVRProxyTypesCBridge")
@interface TMClearVRProxyTypesCBridge : NSObject
+ (enum TMClearVRProxyTypes)getClearVRProxyTypeByValueWithArgValue:(int32_t)argValue SWIFT_WARN_UNUSED_RESULT;
+ (enum TMClearVRProxyTypes)getClearVRProxyTypeByNameWithArgValue:(NSString * _Nonnull)argValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9MediaFlow19TMCodecCapabilities")
@interface TMCodecCapabilities : NSObject
/// Use this API to check if any hardware HEVC vidfeo decoder is present.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isHardwareHEVCDecoderAvailable;)
+ (BOOL)isHardwareHEVCDecoderAvailable SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(int32_t, TMColorSpaceStandards, open) {
/// Unspecified will likely default to BT709
  TMColorSpaceStandardsUnspecified = 0,
  TMColorSpaceStandardsBT709 = 1,
  TMColorSpaceStandardsBT601 = 2,
  TMColorSpaceStandardsBT2020_NCL = 3,
  TMColorSpaceStandardsBT2020_CL = 4,
};

typedef SWIFT_ENUM(int32_t, TMContentFormat, open) {
  TMContentFormatUnknown = 0,
  TMContentFormatMonoscopicERP180 = 2,
  TMContentFormatMonoscopicERP360 = 8,
  TMContentFormatStereoscopicERP180SBS = 10,
  TMContentFormatStereoscopicERP360TB = 12,
  TMContentFormatPlanar = 13,
  TMContentFormatMonoscopicRectilinear = 14,
  TMContentFormatStereoscopicRectilinearTB = 15,
  TMContentFormatMonoscopicFishEye = 16,
  TMContentFormatStereoscopicFishEyeSBS = 17,
  TMContentFormatStereoscopicRectilinearSBS = 18,
  TMContentFormatMonoscopicOmnidirectional = 19,
  TMContentFormatStereoscopicOmnidirectional = 20,
};

enum TMContentSupportedStatus : int32_t;
@class TMDRMInfo;
@class TMFishEyeSettings;

SWIFT_CLASS("_TtC9MediaFlow13TMContentItem")
@interface TMContentItem : NSObject
/// Describes if the content item can be played. Only useful to use if you called TMClearVRPlayer.testIsContentSupported() before.
@property (nonatomic) enum TMContentSupportedStatus contentSupportedStatus;
/// The URL of the content item represented as a String
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
@property (nonatomic, strong) TMDRMInfo * _Nullable drmInfo;
@property (nonatomic) enum TMContentFormat overrideContentFormat;
@property (nonatomic, strong) TMFishEyeSettings * _Nullable fishEyeSettings;
/// The ContentItem constructor. Additional properties (like DRMInfo or FishEye Settings, can be set by their respective fields.
/// \param argUrl The URL to the content item.
///
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithArgUrl:(NSString * _Nonnull)argUrl argDRMInfo:(TMDRMInfo * _Nonnull)argDRMInfo;
- (nonnull instancetype)initWithArgUrl:(NSString * _Nonnull)argUrl argViewportAndDisplayObjectPose:(TMViewportAndDisplayObjectPose * _Nonnull)argViewportAndDisplayObjectPose argStartPositionInMilliseconds:(int64_t)argStartPositionInMilliseconds;
- (nonnull instancetype)initWithArgUrl:(NSString * _Nonnull)argUrl argViewportAndDisplayObjectPose:(TMViewportAndDisplayObjectPose * _Nonnull)argViewportAndDisplayObjectPose argStartPositionInMilliseconds:(int64_t)argStartPositionInMilliseconds argDRMInfo:(TMDRMInfo * _Nullable)argDRMInfo;
- (nonnull instancetype)initWithArgUrl:(NSString * _Nonnull)argUrl argViewportAndDisplayObjectPose:(TMViewportAndDisplayObjectPose * _Nonnull)argViewportAndDisplayObjectPose argStartPositionInMilliseconds:(int64_t)argStartPositionInMilliseconds argDRMInfo:(TMDRMInfo * _Nullable)argDRMInfo argOverrideContentFormat:(enum TMContentFormat)argOverrideContentFormat argFishEyeSettings:(TMFishEyeSettings * _Nullable)argFishEyeSettings argApproximateDistanceFromLiveEdgeInMilliseconds:(int64_t)argApproximateDistanceFromLiveEdgeInMilliseconds;
/// Default constructor of the TMContentItem object
/// \param argUrl The manifest url pointing to the clip that needs to be loaded.
///
/// \param argViewportAndDisplayObjectPose Start pose of the viewport and start pose and scale of the display object. One can use the ClearVRViewportAndObjectPose(double) constructor to set the default object. If set to null, the default will be used, which is position (0, 0, 0), orientation (w=1, x=0, y=0, z=0). If you set this to non-null AND if you change more than just the scale, automatic mesh placement will be disabled.
///
/// \param argDRMInfo Specify DRM info, required to decrypt this content item.
///
/// \param argOverrideContentFormat Override content format. Keep at its default value ContentFormat.Unknown unless needed otherwise.
///
/// \param argFishEyeSettings Configure camera and lens specific fish eye settings for ContentFormat.MonoscopicFishEye or ContentFormat.StereoscopicFishEyeSBS, ignored otherwise. Default value: null
///
- (nonnull instancetype)initWithArgUrl:(NSString * _Nonnull)argUrl argViewportAndDisplayObjectPose:(TMViewportAndDisplayObjectPose * _Nullable)argViewportAndDisplayObjectPose argDRMInfo:(TMDRMInfo * _Nullable)argDRMInfo argOverrideContentFormat:(enum TMContentFormat)argOverrideContentFormat argFishEyeSettings:(TMFishEyeSettings * _Nullable)argFishEyeSettings;
- (NSString * _Nonnull)getUrl SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use url instead.");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (int64_t)getStartPositionInMilliseconds SWIFT_WARN_UNUSED_RESULT;
- (enum TMContentSupportedStatus)getContentSupportedStatus SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use contentSupportedStatus instead.");
- (TMContentItem * _Nonnull)cloneWithArgStartPositionInMilliseconds:(int64_t)argStartPositionInMilliseconds SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int32_t, TMContentSupportedStatus, open) {
  TMContentSupportedStatusUnknown = 0,
  TMContentSupportedStatusSupported = 1,
  TMContentSupportedStatusSupportedAsMonoscopicOnly = 2,
  TMContentSupportedStatusNotSupported = 3,
};

enum TMDeviceTypes : int32_t;
@class TMDeviceParameters;

SWIFT_CLASS("_TtC9MediaFlow34TMContentSupportedTesterParameters")
@interface TMContentSupportedTesterParameters : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Used through Unity, do not
/// \param argDeviceType The device type to test for
///
/// \param argWidth the screen width in pixels
///
/// \param argHeight the screen height in pixels
///
- (nonnull instancetype)initWithArgContentItems:(NSArray<TMContentItem *> * _Nonnull)argContentItems argDeviceType:(enum TMDeviceTypes)argDeviceType argWidth:(int16_t)argWidth argHeight:(int16_t)argHeight argOverrideUserAgent:(NSString * _Nonnull)argOverrideUserAgent;
/// <ul>
///   <li>
///     Deprecated
///   </li>
/// </ul>
/// \param argContentItems the content items, can be an empty list but can never be null.
///
/// \param argDeviceType the device type to test for.
///
/// \param argDisplayDimensions the screen dimensions
///
- (nonnull instancetype)initWithArgContentItems:(NSArray<TMContentItem *> * _Nonnull)argContentItems argDeviceType:(enum TMDeviceTypes)argDeviceType argDisplayDimensions:(CGRect)argDisplayDimensions SWIFT_DEPRECATED_MSG("Please use init([TMContentItem], TMDeviceParameters) instead.");
/// \param argContentItems the content items, can be an empty list but can never be null.
///
/// \param argDeviceType the device type to test for.
///
- (nonnull instancetype)initWithArgContentItems:(NSArray<TMContentItem *> * _Nonnull)argContentItems argDeviceType:(enum TMDeviceTypes)argDeviceType;
/// \param argContentItems the content items, can be an empty list but can never be null.
///
/// \param argDeviceParameters the device parameters
///
- (nonnull instancetype)initWithArgContentItems:(NSArray<TMContentItem *> * _Nonnull)argContentItems argDeviceParameters:(TMDeviceParameters * _Nonnull)argDeviceParameters;
/// \param argContentItems the content items, can be an empty list but can never be null.
///
/// \param argDeviceParameters the device parameters
///
/// \param argOverrideUserAgent the user agent that should be injected in each HTTP request. Keep at the default value (empty string: “”) unless you know what you’re doing!
///
/// \param argAllowDecoderContraintsInducedStereoToMono whether to allow graceful degradation from stereoscopic to monoscopic playback if the decoder does not support decoding the full stereoscopic equivalent. Note that this SDK always plays back monoscopic content, as it does not support any headset.
///
- (nonnull instancetype)initWithArgContentItems:(NSArray<TMContentItem *> * _Nonnull)argContentItems argDeviceParameters:(TMDeviceParameters * _Nonnull)argDeviceParameters argOverrideUserAgent:(NSString * _Nonnull)argOverrideUserAgent argAllowDecoderContraintsInducedStereoToMono:(BOOL)argAllowDecoderContraintsInducedStereoToMono OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9MediaFlow9TMDRMInfo")
@interface TMDRMInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int32_t, TMDRMTypes, open) {
  TMDRMTypesUnspecified = 0,
  TMDRMTypesTbd = 1,
  TMDRMTypesNone = 2,
  TMDRMTypesHlsAes128 = 3,
  TMDRMTypesHlsSampleAes = 4,
  TMDRMTypesPlayready = 5,
  TMDRMTypesWidevine = 6,
  TMDRMTypesFairplay = 7,
};


SWIFT_CLASS("_TtC9MediaFlow18TMDeviceParameters")
@interface TMDeviceParameters : NSObject
/// The type of device that is running this.
@property (nonatomic, readonly) enum TMDeviceTypes deviceType;
/// The width of the screen in points.
@property (nonatomic, readonly) int16_t screenWidth;
/// The height of the screen in points
@property (nonatomic, readonly) int16_t screenHeight;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (enum TMDeviceTypes)getDeviceType SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use deviceType instead.");
- (int16_t)getScreenWidth SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use screenWidth instead.");
- (int16_t)getScreenHeight SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use screenHeight instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int32_t, TMDeviceTypes, open) {
  TMDeviceTypesAndroidFlat = 0,
  TMDeviceTypesIOSFlat = 1,
  TMDeviceTypesAppleTV = 2,
  TMDeviceTypesPCFlat = 3,
  TMDeviceTypesAndroidGenericHMD = 4,
  TMDeviceTypesAndroidGenericCardboard = 5,
  TMDeviceTypesAndroidGenericDaydream = 6,
  TMDeviceTypesAndroidMobfishCardboard = 7,
  TMDeviceTypesAndroidOculusGeneric = 8,
  TMDeviceTypesAndroidOculusGo = 9,
  TMDeviceTypesAndroidOculusGearVR = 10,
  TMDeviceTypesAndroidOculusQuest = 11,
  TMDeviceTypesAndroidOculusQuest2 = 12,
  TMDeviceTypesAndroidWaveVRGeneric = 13,
  TMDeviceTypesAndroidPicoVRGeneric = 14,
  TMDeviceTypesAndroidSkyworthVRGeneric = 15,
  TMDeviceTypesAndroidGSXRGeneric = 16,
  TMDeviceTypesIOSGenericHMD = 17,
  TMDeviceTypesIOSGenericCardboard = 18,
  TMDeviceTypesIOSMobfishCardboard = 19,
  TMDeviceTypesPCGenericHMD = 20,
  TMDeviceTypesPCOculusGeneric = 21,
  TMDeviceTypesPCOculusRiftDK1 = 22,
  TMDeviceTypesPCOculusRiftDK2 = 23,
  TMDeviceTypesPCOculusRiftCV1 = 24,
  TMDeviceTypesPCOculusRiftS = 25,
  TMDeviceTypesPCOculusLinkQuest = 26,
  TMDeviceTypesPCHTCGeneric = 27,
  TMDeviceTypesPCHTCVive = 28,
  TMDeviceTypesPCHTCVivePro = 29,
  TMDeviceTypesPCHTCViveCosmos = 30,
  TMDeviceTypesPCValveGeneric = 31,
  TMDeviceTypesPCValveIndex = 32,
  TMDeviceTypesTester = 33,
};


SWIFT_CLASS("_TtC9MediaFlow20TMDeviceTypesCBridge")
@interface TMDeviceTypesCBridge : NSObject
+ (enum TMDeviceTypes)getDeviceTypeByClearVRCoreValueWithArgValue:(int32_t)argValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TMPose;
@class TMScale;
@class TMDisplayObject;

SWIFT_CLASS("_TtC9MediaFlow22TMDisplayObjectCBridge")
@interface TMDisplayObjectCBridge : NSObject
+ (TMDisplayObject * _Nonnull)getAsDisplayObjectWithArgPose:(TMPose * _Nonnull)argPose argScale:(TMScale * _Nonnull)argScale SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(int32_t, TMDisplayObjectClassTypes, open) {
  TMDisplayObjectClassTypesUnknown = 0,
  TMDisplayObjectClassTypesFullScreen = 1,
  TMDisplayObjectClassTypesLargePanel = 2,
  TMDisplayObjectClassTypesSmallPanel = 3,
  TMDisplayObjectClassTypesThumbnail = 4,
};


SWIFT_CLASS("_TtC9MediaFlow22TMDisplayObjectMapping")
@interface TMDisplayObjectMapping : NSObject <NSCopying>
@property (nonatomic) enum TMDisplayObjectClassTypes displayObjectClassType;
@property (nonatomic) int32_t displayObjectID;
@property (nonatomic) int32_t feedIndex;
- (nonnull instancetype)initWithArgDisplayObjectID:(int32_t)argDisplayObjectID argFeedIndex:(int32_t)argFeedIndex argDisplayObjectClassType:(enum TMDisplayObjectClassTypes)argDisplayObjectClassType OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int32_t, TMEventTypes, open) {
  TMEventTypesVod = 0,
  TMEventTypesLive = 1,
  TMEventTypesFinishedLive = 2,
  TMEventTypesUnknown = 3,
};


/// Helper class that holds the info of one feed.
SWIFT_CLASS("_TtC9MediaFlow10TMFeedInfo")
@interface TMFeedInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int32_t, TMFishEyeCameraAndLensTypes, open) {
/// No preset used for the fish eye camera. Can be used if a custom camera and lens type combination is used not covered by any of the provided presets.
  TMFishEyeCameraAndLensTypesCustomCameraAndLens = 0,
/// use the preset for the blackmagic URSA Mini Canon 815
  TMFishEyeCameraAndLensTypesBlackmagicURSAMiniCanon815 = 1,
/// Use the preset for the Z cam K1 pro with Pro Izugar Mkx 22mft sensor
  TMFishEyeCameraAndLensTypesZCamK1ProIzugarMkx22mft = 2,
/// Use the preset for the Z cam K2 pro with Pro Izugar Mkx 200 sensor
  TMFishEyeCameraAndLensTypesZCamK2ProIzugarMkx200 = 3,
/// Use the preset for the Red Komodo 6K Camera with Canon 8-15 lens
  TMFishEyeCameraAndLensTypesRedKomodo6KCanon812 = 4,
/// Use the preset for the Blackmagic Ursa 12K Camera with Canon 8-15 lens at 8 mm, focal length 4 8K sensor in 16:9.
  TMFishEyeCameraAndLensTypesBlackmagicURSA12KCanon8158k169 = 5,
/// Use the preset for the Red V-Raptor 8K Camera with Canon 8-15 lens at 8 mm, focal length 4 8K sensor in 16:9.
  TMFishEyeCameraAndLensTypesRedVRaptor8KCanon8158Mm = 6,
/// Use the preset for the Red V-Raptor 8K Camera with Canon 8-15 lens at 10 mm, focal length 4 8K sensor in 16:9.
  TMFishEyeCameraAndLensTypesRedVRaptor8KCanon81510Mm = 7,
/// Use the preset for the Red V-Raptor 8K Camera with Canon 8-15 lens at 13 mm, focal length 4 8K sensor in 16:9.
  TMFishEyeCameraAndLensTypesRedVRaptor8KCanon81513Mm = 8,
};


SWIFT_CLASS("_TtC9MediaFlow34TMFishEyeCameraAndLensTypesCBridge")
@interface TMFishEyeCameraAndLensTypesCBridge : NSObject
+ (enum TMFishEyeCameraAndLensTypes)getFishEyeCameraAndLensTypeWithArgValue:(int32_t)argValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Lens types for fish eye cameras
typedef SWIFT_ENUM(int32_t, TMFishEyeLensTypes, open) {
  TMFishEyeLensTypesDefaultFisheyeLens = 0,
  TMFishEyeLensTypesEquisolid = 1,
  TMFishEyeLensTypesEquidistant = 2,
  TMFishEyeLensTypesPolynomial = 3,
};


SWIFT_CLASS("_TtC9MediaFlow24TMFishEyeLensTypesBridge")
@interface TMFishEyeLensTypesBridge : NSObject
+ (enum TMFishEyeLensTypes)getFishEyeLensTypeWithArgValue:(int32_t)argValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum TMFisheyePresets : int32_t;

/// Describes the exact fish eye lens parameters. A number of pre-defined lenses are available, see TMFisheyePresets for more information.
SWIFT_CLASS("_TtC9MediaFlow17TMFishEyeSettings")
@interface TMFishEyeSettings : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     argFishEyeCameraAndLensType: The default constructor for the fish eye settings
///   </li>
///   <li>
///     argFishEyeLensType:  Fish eye settings preset
///   </li>
///   <li>
///     argFocalLength: The type of lens used by the fish eye camera
///   </li>
///   <li>
///     argSensorPixelDensity: the invert of the size of a pixel in mm^-1
///   </li>
///   <li>
///     argReferenceWidth: The width in pixels used to compute the sensor pixel density
///   </li>
///   <li>
///     argReferenceHeight: The height in pixels used to compute the sensor pixel density
///   </li>
/// </ul>
- (nonnull instancetype)initWithArgFishEyeCameraAndLensType:(enum TMFishEyeCameraAndLensTypes)argFishEyeCameraAndLensType argFishEyeLensType:(enum TMFishEyeLensTypes)argFishEyeLensType argFocalLength:(float)argFocalLength argSensorPixelDensity:(float)argSensorPixelDensity argReferenceWidth:(int32_t)argReferenceWidth argReferenceHeight:(int32_t)argReferenceHeight OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("TMFishEyeCameraAndLensTypes has been obseleted to make place for the updated TMFisheyePresets. Please use the new constructor using this enum now.");
- (nonnull instancetype)initWithFisheyePreset:(enum TMFisheyePresets)fisheyePreset FisheyeLensType:(enum TMFishEyeLensTypes)FisheyeLensType focalLength:(float)focalLength sensorPixelDensity:(float)sensorPixelDensity referenceWidth:(int32_t)referenceWidth referenceHeight:(int32_t)referenceHeight OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Describes the exact fish eye lens parameters. A number of pre-defined lenses are available, see <a href="xref:com.tiledmedia.clearvr.FishEyeSettings.cameraAndLens">cameraAndLens</a>.
SWIFT_CLASS("_TtC9MediaFlow25TMFishEyeSettingsFromJSON")
@interface TMFishEyeSettingsFromJSON : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Fish-eye settings presets for known camera types
typedef SWIFT_ENUM(int32_t, TMFisheyePresets, open) {
/// Use the preset for the blackmagic URSA Mini Canon 8-15 at 8mm.
  TMFisheyePresetsBlackmagicUrsaMiniCanon8_15_8Mm = 0,
/// Use the preset for the blackmagic URSA Mini Canon 8-15 at 8.5mm.
  TMFisheyePresetsBlackmagicUrsaMiniCanon8_15_8Dot5Mm = 1,
/// Use the preset for the blackmagic URSA Mini Canon 8-15 at 9mm.
  TMFisheyePresetsBlackmagicUrsaMiniCanon8_15_9Mm = 2,
/// Use the preset for the blackmagic URSA Mini Canon 8-15 at 9.5mm.
  TMFisheyePresetsBlackmagicUrsaMiniCanon8_15_9Dot5Mm = 3,
/// Use the preset for the blackmagic URSA Mini Canon 8-15 at 10mm.
  TMFisheyePresetsBlackmagicUrsaMiniCanon8_15_10Mm = 4,
/// Use the preset for the blackmagic URSA Mini Canon 8-15 at 10.5mm.
  TMFisheyePresetsBlackmagicUrsaMiniCanon8_15_10Dot5Mm = 5,
/// Use the preset for the blackmagic URSA Mini Canon 8-15 at 11mm.
  TMFisheyePresetsBlackmagicUrsaMiniCanon8_15_11Mm = 6,
/// Use the preset for the blackmagic URSA Mini Canon 8-15 at 11.5mm.
  TMFisheyePresetsBlackmagicUrsaMiniCanon8_15_11Dot5Mm = 7,
/// Use the preset for the blackmagic URSA Mini Canon 8-15 at 12mm.
  TMFisheyePresetsBlackmagicUrsaMiniCanon8_15_12Mm = 8,
/// Use the preset for the blackmagic URSA Mini Canon 8-15 at 12.5mm.
  TMFisheyePresetsBlackmagicUrsaMiniCanon8_15_12Dot5Mm = 9,
/// Use the preset for the Blackmagic Ursa 12K Camera with Canon 815 lens at 8 mm, focal length 4 8K sensor in 16:9.
  TMFisheyePresetsBlackmagicUrsa12Kcanon8_15_8Mm_8K_16_9 = 10,
/// Use the preset for the Z cam K1 pro with Pro Izugar Mkx 22mft sensor.
  TMFisheyePresetsZcamk1ProIzugarMkx22Mft_3Dot25Mm = 11,
/// Use the preset for the Z cam K2 pro with Pro Izugar Mkx 200 sensor.
  TMFisheyePresetsZcamk2ProIzugarMkx200_3Dot8Mm = 12,
/// Use the preset for the Red Komodo 6K Camera with Canon 815 lens.
  TMFisheyePresetsRedKomodo6Kcanon8_12_8Mm = 13,
/// Use the preset for the Red V-Raptor 8K Camera with Canon 815 lens at 8 mm, focal length 4 8K sensor in 16:9.
  TMFisheyePresetsRedVraptor8Kcanon8_15_8Mm = 14,
/// Use the preset for the Red V-Raptor 8K Camera with Canon 815 lens at 10 mm, focal length 4 8K sensor in 16:9.
  TMFisheyePresetsRedVraptor8Kcanon8_15_10Mm = 15,
/// Use the preset for the Red V-Raptor 8K Camera with Canon 815 lens at 13 mm, focal length 4 8K sensor in 16:9.
  TMFisheyePresetsRedVraptor8Kcanon8_15_13Mm = 16,
/// No preset used for the fish eye camera. Can be used if a custom camera and lens type combination is used not covered by any of the provided presets.
  TMFisheyePresetsCustom = 17,
};

typedef SWIFT_ENUM(int64_t, TMInitializeFlags, open) {
  TMInitializeFlagsNone = 0x0000000000000000,
  TMInitializeFlagsNoCachePrewarming = 0x0000000000000001,
};

enum TMSDKTypes : int32_t;
@class TMTelemetryConfiguration;

/// Initialization parameters. (for advanced implementation) For a detailed description see the ClearVRCoreDocumentation
SWIFT_CLASS("_TtC9MediaFlow22TMInitializeParameters")
@interface TMInitializeParameters : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithArgDeviceParameters:(TMDeviceParameters * _Nonnull)argDeviceParameters argHttpProxyParams:(TMClearVRProxyParameters * _Nonnull)argHttpProxyParams argHttpsProxyParams:(TMClearVRProxyParameters * _Nonnull)argHttpsProxyParams argOverrideUserAgent:(NSString * _Nonnull)argOverrideUserAgent argMuteState:(float)argMuteState argAllowDecoderContraintsInducedStereoToMono:(BOOL)argAllowDecoderContraintsInducedStereoToMono argSDKType:(enum TMSDKTypes)argSDKType argTelemetryConfiguration:(TMTelemetryConfiguration * _Nullable)argTelemetryConfiguration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// By default, the <code>TMClearVRPlayer</code> will manage interaction (rotating the camera, positioning a rectilinear (“16x9”) clip at the optimal position for you automatically.
/// If you want to customize the behaviour, you can tune each <code>TMInteractionModes</code>’s specific configuration.
/// For example, the <code>TMInteractionModes.OmniDirectional</code> takes two configuration parameters:
/// <ol>
///   <li>
///     The <code>TMClearVRGestureOrientationTrackerParameters</code>
///   </li>
///   <li>
///     The <code>TMClearVRMotionOrientationTrackerParameters</code>
///     whereas the <code>TMInteractionModes.Rectilinear</code> and .Planar do not take any configuration parameters (yet).
///   </li>
/// </ol>
SWIFT_CLASS("_TtC9MediaFlow30TMInteractionModeConfiguration")
@interface TMInteractionModeConfiguration : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9MediaFlow17TMIntervalTracker")
@interface TMIntervalTracker : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// LayoutParameters used to configure the display object to video feed mapping, audio selection, and subtitles
SWIFT_CLASS("_TtC9MediaFlow18TMLayoutParameters")
@interface TMLayoutParameters : NSObject <NSCopying>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

typedef SWIFT_ENUM(int32_t, TMLogComponents, open) {
  TMLogComponentsUnknown = 0,
  TMLogComponentsTmCore = 1,
  TMLogComponentsNrp = 2,
  TMLogComponentsMediaFlow = 3,
  TMLogComponentsSdk = 4,
  TMLogComponentsSigmaAudio = 5,
};

typedef SWIFT_ENUM(int32_t, TMLogLevels, open) {
  TMLogLevelsFatal = -2,
  TMLogLevelsError = -1,
  TMLogLevelsWarn = 0,
  TMLogLevelsInfo = 1,
  TMLogLevelsDebug = 2,
};

typedef SWIFT_ENUM(int32_t, TMMeshTextureModes, open) {
/// Unknown is a forbidden value
  TMMeshTextureModesUnknown = 0,
/// Normal texture rendering mode
  TMMeshTextureModesUvshuffling = 1,
/// OVR overlay texture rendering mode (not supported in this SDK)
  TMMeshTextureModesOvroverlay = 2,
};

typedef SWIFT_ENUM(int32_t, TMNRPColorSpaces, open) {
  TMNRPColorSpacesUninitialized = 0,
  TMNRPColorSpacesGamma = 1,
  TMNRPColorSpacesLinear = 2,
};

typedef SWIFT_ENUM(int32_t, TMNRPTextureBlitModes, open) {
/// Not set, illegal value
  TMNRPTextureBlitModesUnknown = 0,
/// Auto detect, the application is assumed to set the correct value.
  TMNRPTextureBlitModesDefault = 1,
/// Classic, UV based, shuffling without texture copy (“Fast OES”)
  TMNRPTextureBlitModesUVShufflingZeroCopy = 2,
/// Classic, UV based, shuffling with texture copy (“non-fast OES”), used in PiP for example.
  TMNRPTextureBlitModesUVShufflingCopy = 3,
/// OVROverlay. We use blitting to unshuffle the texture.
  TMNRPTextureBlitModesOVROverlayCopy = 4,
/// OVROverlay. We use the oculus zero copy path. Only applicable to traditional video playback.
  TMNRPTextureBlitModesOVROverlayZeroCopy = 5,
};


SWIFT_CLASS("_TtC9MediaFlow12TMObservable")
@interface TMObservable : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9MediaFlow29TMPopulateMediaInfoParameters")
@interface TMPopulateMediaInfoParameters : NSObject
- (nonnull instancetype)initWithArgContentItem:(TMContentItem * _Nonnull)argContentItem OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TMVector3;
@class TMQuaternion;

SWIFT_CLASS("_TtC9MediaFlow13TMPoseCBridge")
@interface TMPoseCBridge : NSObject
+ (TMPose * _Nonnull)getAsPoseWithArgPosition:(TMVector3 * _Nonnull)argPosition argOrientation:(TMQuaternion * _Nonnull)argOrientation SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TMSyncSettings;

/// TMPrepareContentForPlayoutParameters, default values could be used
SWIFT_CLASS("_TtC9MediaFlow26TMPrepareContentParameters")
@interface TMPrepareContentParameters : NSObject
@property (nonatomic, strong) TMContentItem * _Nonnull contentItem;
@property (nonatomic, strong) TMTimingParameters * _Nullable timingParameters;
@property (nonatomic, strong) TMLayoutParameters * _Nonnull layoutParameters;
@property (nonatomic, strong) TMAudioTrackAndPlaybackParameters * _Nullable audioTrackAndPlaybackParameters;
/// The time out in milliseconds.
@property (nonatomic) int32_t timeout;
@property (nonatomic, strong) TMSyncSettings * _Nullable syncSettings;
/// The approximate distance from the live edge in milliseconds.
@property (nonatomic) int64_t approximateDistanceFromLiveEdge;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Used to configure the first {@link ContentItem} that will be loaded and played by the ClearVRPlayer object
/// \param argContentItem the contentItem to load, cannot be null
///
/// \param argTimingParameters the preferred initial position to start playback, and how to interpret this initial position. If set to null, VOD clips will start playback from position 0 while LIVE clips will start playback from the live edge..
///
/// \param argSyncSettings the synchronisation settings. Keep at null to disable.
///
/// \param argFlags additional flags to customize content loading. Default value: 0, other values not (yet) available.
///
/// \param argTimeoutInMilliseconds the default timeout in milliseconds. Keep at 0 for default (30.000 msec).
///
- (nonnull instancetype)initWithArgContentItem:(TMContentItem * _Nonnull)argContentItem argTimingParameters:(TMTimingParameters * _Nullable)argTimingParameters argSyncSettings:(TMSyncSettings * _Nullable)argSyncSettings argTimeoutInMilliseconds:(int32_t)argTimeoutInMilliseconds;
/// Used to configure the first ContentItem that will be loaded and played by the ClearVRPlayer object
/// \param argContentItem the contentItem to load, cannot be null
///
/// \param argTimingParameters the preferred initial position to start playback, and how to interpret this initial position. If set to null, VOD clips will start playback from position 0 while LIVE clips will start playback from the live edge..
///
/// \param argAudioTrackAndPlaybackParameters the audio track and playback parameters. Keep at nil for default (recommended).
///
/// \param argSyncSettings the synchronisation settings. Keep at null to disable.
///
/// \param argTimeoutInMilliseconds the default timeout in milliseconds. Keep at 0 for default (30.000 msec).
///
/// \param argApproximateDistanceFromLiveEdgeInMilliseconds Specifies the approximate offset that should be kept from the live edge. Default value: 0 (msec). Note that a non-0 minimum value might be enforced. Changing the default value is strongly discouraged.
///
/// \param argPreferredAudioTrackLanguage Override the preferred audio track language by setting this to the preferred ISO-639 language code. Only works if language codes are embedded in the source stream. Default value: “”, which is interpreted as “automatically pick an audio track”.
///
- (nonnull instancetype)initWithArgContentItem:(TMContentItem * _Nonnull)argContentItem argTimingParameters:(TMTimingParameters * _Nullable)argTimingParameters argAudioTrackAndPlaybackParameters:(TMAudioTrackAndPlaybackParameters * _Nullable)argAudioTrackAndPlaybackParameters argSyncSettings:(TMSyncSettings * _Nullable)argSyncSettings argTimeoutInMilliseconds:(int32_t)argTimeoutInMilliseconds argApproximateDistanceFromLiveEdgeInMilliseconds:(int64_t)argApproximateDistanceFromLiveEdgeInMilliseconds argPreferredAudioTrackLanguage:(NSString * _Nonnull)argPreferredAudioTrackLanguage OBJC_DESIGNATED_INITIALIZER;
/// Used to configure the first ContentItem that will be loaded and played by the ClearVRPlayer object
/// \param contentItem the content item to load
///
/// \param timingParameters the timing parameters to use. Set to nil to invoke default behaviour: VOD starts at t =0 , LIVE starts at the live edge.
///
/// \param layoutParameters The layout parameters describing the constellation of feed(s).
///
- (nonnull instancetype)initWithContentItem:(TMContentItem * _Nonnull)contentItem timingParameters:(TMTimingParameters * _Nullable)timingParameters layoutParameters:(TMLayoutParameters * _Nonnull)layoutParameters OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// PrewarmCache parameters, at least a valid manifestURL must be specified.
SWIFT_CLASS("_TtC9MediaFlow24TMPrewarmCacheParameters")
@interface TMPrewarmCacheParameters : NSObject
/// The url of the content item.
@property (nonatomic, copy) NSString * _Nonnull manifestUrl;
/// The initial position of the content time in milliseconds.
@property (nonatomic) int64_t initialPositionInMilliseconds;
/// The flags.
@property (nonatomic) int64_t flags;
- (nonnull instancetype)initWithArgManifestUrl:(NSString * _Nonnull)argManifestUrl argInitialPositionInMilliseconds:(int64_t)argInitialPositionInMilliseconds argFlags:(int64_t)argFlags OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int32_t, TMProjectionTypes, open) {
  TMProjectionTypesRectilinearMono = 0,
  TMProjectionTypesRectilinearStereoTopBottom = 1,
  TMProjectionTypesErp360Mono = 2,
  TMProjectionTypesErp360StereoTopBottom = 3,
  TMProjectionTypesErp180Mono = 4,
  TMProjectionTypesErp180StereoSideBySide = 5,
  TMProjectionTypesFisheyeMono = 6,
  TMProjectionTypesFisheyeStereoSideBySide = 7,
  TMProjectionTypesRectilinearStereoSideBySide = 8,
  TMProjectionTypesMeshBoxMono = 9,
  TMProjectionTypesMeshBoxStereo = 10,
  TMProjectionTypesUnknown = 99,
};


SWIFT_CLASS("_TtC9MediaFlow12TMQuaternion")
@interface TMQuaternion : NSObject
- (nonnull instancetype)init;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC9MediaFlow19TMQuaternionCBridge")
@interface TMQuaternionCBridge : NSObject
+ (TMQuaternion * _Nonnull)getAsQuaternionWithArgW:(double)argW argX:(double)argX argY:(double)argY argZ:(double)argZ SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum TMTextureTypes : int32_t;

/// Struct that contains the imageBuffer and the rendered timestamp
SWIFT_CLASS("_TtC9MediaFlow21TMReleasedTextureInfo")
@interface TMReleasedTextureInfo : NSObject
@property (nonatomic) CVImageBufferRef _Nullable imageBuffer;
@property (nonatomic) CVImageBufferRef _Nullable chromaImageBuffer;
@property (nonatomic) enum TMTextureTypes textureType;
@property (nonatomic) enum TMColorSpaceStandards colorSpaceStandard;
@property (nonatomic) int32_t textureCropTop;
@property (nonatomic) int32_t textureCropRight;
@property (nonatomic) int32_t textureCropLeft;
@property (nonatomic) int32_t textureCropBottom;
@property (nonatomic) int32_t textureWidth;
@property (nonatomic) int32_t textureHeight;
@property (nonatomic) int32_t bitstreamWidth;
@property (nonatomic) int32_t bitstreamHeight;
@property (nonatomic) uint64_t discontinuityCounter;
@property (nonatomic) int64_t rtsInMicroseconds;
@property (nonatomic) int64_t ctsInMicroseconds;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This delegates sends important information from the Wrapper to the subscribed class.
SWIFT_PROTOCOL("_TtP9MediaFlow23TMRendererFrameDelegate_")
@protocol TMRendererFrameDelegate
/// This delegate gets called when a renderedframe ByteArray is available. It is send to the wrapper from the ClearVRCore. And is rawly passed without any modifications to this callback asap.
- (void)cbRendererFrameByteArrayAvailableWithArgRendererFrame:(NSData * _Nonnull)argRendererFrame argSizeInBytes:(NSInteger)argSizeInBytes;
@end

typedef SWIFT_ENUM(int32_t, TMSDKTypes, open) {
  TMSDKTypesUnknown = 0,
  TMSDKTypesUnity = 1,
  TMSDKTypesNative = 2,
  TMSDKTypesWeb = 3,
};


SWIFT_CLASS("_TtC9MediaFlow7TMScale")
@interface TMScale : NSObject
- (nonnull instancetype)init;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC9MediaFlow14TMScaleCBridge")
@interface TMScaleCBridge : NSObject
+ (TMScale * _Nonnull)getAsScaleWithArgX:(double)argX argY:(double)argY argZ:(double)argZ SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum TMTransitionTypes : int32_t;

/// Parameters to specify seek operation. Note that frame accurate seek is not guaranteed.
SWIFT_CLASS("_TtC9MediaFlow16TMSeekParameters")
@interface TMSeekParameters : NSObject
/// The timing parameters used in the seek call.
@property (nonatomic, readonly, strong) TMTimingParameters * _Nullable timingParameters;
/// The type of transition that this seek should be.
@property (nonatomic, readonly) enum TMTransitionTypes transitionType;
- (nonnull instancetype)initWithNewPositionInMilliseconds:(int64_t)newPositionInMilliseconds argFlags:(int64_t)argFlags;
/// Default constructor, allowing you to specify the new seek position, and how to interpret this new seek position.
/// \param timingParameters Describes the new position (in milliseconds) and how this new position should be interpreted. If set to nil, VOD clips will seek to the start position (0). LIVE clips will seek to the live edge.
///
/// \param transitionType Defines how the seek should be handled: Default value: Fast. Currently, no other value is supported and you will always default to this value when doing a seek.
///
- (nonnull instancetype)initWithTimingParameters:(TMTimingParameters * _Nullable)timingParameters transitionType:(enum TMTransitionTypes)transitionType OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Intentionally left empty for now
SWIFT_CLASS("_TtC9MediaFlow24TMStartPlayoutParameters")
@interface TMStartPlayoutParameters : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Stop parameters
SWIFT_CLASS("_TtC9MediaFlow16TMStopParameters")
@interface TMStopParameters : NSObject
/// Whether an error is reported or not.
@property (nonatomic) BOOL isErrorReported;
/// Whether the core is already stopped or not.
@property (nonatomic) BOOL isClearVRCoreAlreadyStopped;
/// Whether the core crashed or not.
@property (nonatomic) BOOL isClearVRCoreCrashed;
/// Default constructor, for internal use only.
/// \param argIsErrorReported Whether an error is reported or not.
///
/// \param argIsClearVRCoreAlreadyStopped Whether the core is already stopped or not.
///
/// \param argIsClearVRCoreCrashed whether the core crashed
///
- (nonnull instancetype)initWithArgIsErrorReported:(BOOL)argIsErrorReported argIsClearVRCoreAlreadyStopped:(BOOL)argIsClearVRCoreAlreadyStopped argIsClearVRCoreCrashed:(BOOL)argIsClearVRCoreCrashed OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Helper class that holds the info of one subtitle track.
SWIFT_CLASS("_TtC9MediaFlow19TMSubtitleTrackInfo")
@interface TMSubtitleTrackInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Parameters required for switching to a different ContentItem.
SWIFT_CLASS("_TtC9MediaFlow25TMSwitchContentParameters")
@interface TMSwitchContentParameters : NSObject
@property (nonatomic, strong) TMContentItem * _Nonnull contentItem;
@property (nonatomic, strong) TMTimingParameters * _Nullable timingParameters;
@property (nonatomic) enum TMTransitionTypes transitionType;
@property (nonatomic, strong) TMAudioTrackAndPlaybackParameters * _Nullable audioTrackAndPlaybackParameters;
@property (nonatomic, strong) TMSyncSettings * _Nullable syncSettings;
/// The approximate distance from the live edge in milliseconds.
@property (nonatomic) int64_t approximateDistanceFromLiveEdge;
@property (nonatomic, strong) TMLayoutParameters * _Nonnull layoutParameters;
@property (nonatomic, copy) NSString * _Nonnull preferredAudioTrackLanguage SWIFT_DEPRECATED_MSG("", "layoutParameters.preferredAudioLanguage");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithArgManifestUrl:(NSString * _Nonnull)argManifestUrl argStartYaw:(double)argStartYaw argStartPitch:(double)argStartPitch argStartPositionInMilliseconds:(int64_t)argStartPositionInMilliseconds argAudioDecoderType:(enum TMAudioDecoderTypes)argAudioDecoderType argAudioPlaybackEngineType:(enum TMAudioPlaybackEngineTypes)argAudioPlaybackEngineType argFlags:(int64_t)argFlags;
- (nonnull instancetype)initWithArgContentItem:(TMContentItem * _Nonnull)argContentItem argAudioTrackAndPlaybackParameters:(TMAudioTrackAndPlaybackParameters * _Nonnull)argAudioTrackAndPlaybackParameters argFlags:(int64_t)argFlags;
/// Default Constructor. Under typical conditions one should only set argContentItem and argTimingParameters and keep the other fields at their default values.
/// \param argContentItem The content item to switch to. Cannot be null.
///
/// \param argTimingParameters The timing parameters, defining playback start position and how it should be interpreted with respect to switch content. Cannnot be null.
///
/// \param argTransitionType Determines how the transition from the current content item to the specified content item should be performed. Default value: TransitionTypes.Fast.
///
/// \param argAudioTrackAndPlaybackParameters The audio decoder and playback engine to use after switching content. Keep at its default value: null
///
/// \param argSyncSettings Enable sync with supplied settings. Default value: null (sync = disabled)
///
/// \param argFlags Customize switch content API behaviour. Currently unused. Leave at default value: 0
///
/// \param argApproximateDistanceFromLiveEdgeInMilliseconds Specifies the approximate offset that should be kept from the live edge. Default value: 0 (msec). Note that a non-0 minimum value might be enforced. Changing the default value is strongly discouraged.
///
/// \param argPreferredAudioTrackLanguage Override the preferred audio track language by setting this to the preferred ISO-639 language code. Only works if language codes are embedded in the source stream. Default value: “”, which is interpreted as “automatically pick an audio track”.
///
- (nonnull instancetype)initWithArgContentItem:(TMContentItem * _Nonnull)argContentItem argTimingParameters:(TMTimingParameters * _Nullable)argTimingParameters argTransitionType:(enum TMTransitionTypes)argTransitionType argAudioTrackAndPlaybackParameters:(TMAudioTrackAndPlaybackParameters * _Nullable)argAudioTrackAndPlaybackParameters argSyncSettings:(TMSyncSettings * _Nullable)argSyncSettings argFlags:(int64_t)argFlags argApproximateDistanceFromLiveEdgeInMilliseconds:(int64_t)argApproximateDistanceFromLiveEdgeInMilliseconds argPreferredAudioTrackLanguage:(NSString * _Nonnull)argPreferredAudioTrackLanguage OBJC_DESIGNATED_INITIALIZER;
/// Since v10
/// \param contentItem the contentItem to switch to
///
/// \param timingParameters The timing parameters, specifying how to start playback. Setting this to <code>null</code> will trigger default behaviour (VOD: start from beginning of the clip, LIVE: start from the live edge) and is a valid value
///
/// \param layoutParameters The LayoutParameters specifying which DisplayObject will render what Feed.
///
- (nonnull instancetype)initWithContentItem:(TMContentItem * _Nonnull)contentItem timingParameters:(TMTimingParameters * _Nullable)timingParameters layoutParameters:(TMLayoutParameters * _Nonnull)layoutParameters OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9MediaFlow14TMSyncSettings")
@interface TMSyncSettings : NSObject
/// Constructs default SyncSettings.
/// Client latency: 0 msec
/// Max target lag: 0 msec
/// Max playback rate: 1.3
/// Min playback rate: 0.7
/// Max playback rate change: 0.10
/// Disable initial seek: false
- (nonnull instancetype)init;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC9MediaFlow12TMSyncStatus")
@interface TMSyncStatus : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This object contains the configuration of one or more Telemetry targets. See TelemetryTarget for details.
SWIFT_CLASS("_TtC9MediaFlow24TMTelemetryConfiguration")
@interface TMTelemetryConfiguration : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int32_t, TMTelemetryIPSignallingTypes, open) {
  TMTelemetryIPSignallingTypesTelemetryIpSignallingDisabled = 0,
  TMTelemetryIPSignallingTypesTelemetryIpSignallingMasked = 1,
  TMTelemetryIPSignallingTypesTelemetryIpSignallingFull = 2,
};


/// Configure your Telemetry Target(s) of a specific <a href="xref:com.tiledmedia.clearvr.TelemetryTargetTypes">type</a>.
SWIFT_CLASS("_TtC9MediaFlow17TMTelemetryTarget")
@interface TMTelemetryTarget : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9MediaFlow27TMTelemetryTargetConfigBase")
@interface TMTelemetryTargetConfigBase : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC9MediaFlow31TMTelemetryTargetConfigNewRelic")
@interface TMTelemetryTargetConfigNewRelic : TMTelemetryTargetConfigBase
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int32_t, TMTelemetryTargetTypes, open) {
  TMTelemetryTargetTypesTelemetryTargetNewRelic = 0,
};


/// Used to send custom key/value pair data to the configured Telemetry Targets. Refer see:TMTelemetryUpdateTargetCustomData
SWIFT_CLASS("_TtC9MediaFlow27TMTelemetryUpdateCustomData")
@interface TMTelemetryUpdateCustomData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Data fields to set send custom data to the telemtry target of choice.
SWIFT_CLASS("_TtC9MediaFlow33TMTelemetryUpdateTargetCustomData")
@interface TMTelemetryUpdateTargetCustomData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int32_t, TMTextureTypes, open) {
/// Default texture type. Only textureId is used and contains interlace RGBA 8 bits colors with resolution frameWidth x frameHeight
  TMTextureTypesRGBA = 0,
/// textureId contains a the luma plane: 8 bits Y of resolution frameWidth x frameHeight. chromaTextutureId contains the interlace chromaPlane uv 8 bits with resolution frameWidth/2 x frameHeight/2
  TMTextureTypesNV12 = 1,
};


SWIFT_CLASS("_TtC9MediaFlow18TMTimingParameters")
@interface TMTimingParameters : NSObject
/// The position in time of the content in milliseconds.
@property (nonatomic, readonly) int64_t position;
/// Definines how to interpret the position. Refer to TMTimingTypes for details.
@property (nonatomic, readonly) enum TMTimingTypes timingType;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Convenience constructor, assuming that the provided positionInMilliseconds must be treated as a content time. This might not what you prefer when playing back a live stream
/// \param positionInMilliseconds the position in milliseconds, interpreted as ContentTime
///
- (nonnull instancetype)initWithPositionInMilliseconds:(int64_t)positionInMilliseconds;
/// Constructor allowing you to define how the startPositionInMilliseconds must be interpreted. Refer to TMTimingTypes for details
/// \param positionInMilliseconds the position in milliseconds, interpreted as ContentTime
///
/// \param timingType defines how to interpret the provided start position.
///
- (nonnull instancetype)initWithPositionInMilliseconds:(int64_t)positionInMilliseconds timingType:(enum TMTimingTypes)timingType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9MediaFlow14TMTimingReport")
@interface TMTimingReport : NSObject
/// The message containing the error message in case of failure, or just a success message in case of success.
@property (nonatomic, readonly, strong) TMClearVRMessage * _Nonnull clearVRMessage;
/// the TimingType of the content
@property (nonatomic, readonly) enum TMTimingTypes timingType;
/// the current position of the content time in milliseconds
@property (nonatomic, readonly) int64_t currentPosition;
/// the lower seek bound in milliseconds
@property (nonatomic, readonly) int64_t lowerSeekBound;
/// the upper seek bound in milliseconds
@property (nonatomic, readonly) int64_t upperSeekBound;
/// the duration of the content item in milliseconds
@property (nonatomic, readonly) int64_t contentDuration;
/// the duration of the content item in milliseconds
@property (nonatomic, readonly) enum TMEventTypes eventType;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// If the timing report was successfully generated
@property (nonatomic, readonly) BOOL isSuccess;
/// the distance from the upper bound in milliseconds
@property (nonatomic, readonly) int64_t distanceFromUpperBound;
- (TMClearVRMessage * _Nonnull)getClearVRMessage SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use clearVRMessage instead.");
- (enum TMTimingTypes)getTimingType SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use timingType instead.");
- (int64_t)getCurrentPositionInMilliseconds SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use currentPosition instead.");
- (int64_t)getLowerSeekBoundInMilliseconds SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use lowerSeekBound instead.");
- (int64_t)getUpperSeekBoundInMilliseconds SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use upperSeekBound instead.");
- (int64_t)getContentDurationInMilliseconds SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use contentDuration instead.");
- (BOOL)getIsSuccess SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use isSuccess instead.");
- (int64_t)getDistanceFromUpperBoundInMilliseconds SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use distanceFromUpperBound instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int32_t, TMTimingTypes, open) {
  TMTimingTypesNone = -1,
  TMTimingTypesContentTime = 0,
/// When specified, seek to specified wallclock time. Normally, one would seek based on content time. This flag is typically used when playing back synchronized live broadcast with multiple cameras.
  TMTimingTypesWallclockTime = 1,
/// Use the RelativeTime flag to seek based on the current content position. This saves you from grabbing the current content position and adding the required offset yourself.
  TMTimingTypesRelativeTime = 2,
/// Use the Seamless flag to seamlessly switch between two content items. This is typically used when switching between cameras in a synchronized multi-camera event. This does not apply to seeking, only switch content.
  TMTimingTypesSeamless = 3,
/// Interpret the specified time position as the start time of a scheduled on demand content. This applies to PrepareContentParameters and SwitchContentParameters, but cannot be used in conjunction with SeekParameters.
  TMTimingTypesScheduledOnDemand = 4,
/// When specified, seek to live edge of the currently playing ContentItem. This flag is only valid when playing Live content.
  TMTimingTypesLiveEdge = 5,
};


SWIFT_CLASS("_TtC9MediaFlow20TMTimingTypesCBridge")
@interface TMTimingTypesCBridge : NSObject
/// These static helper functions help out to bridge Swift enums to objective C
/// \param argValue argValue description
///
///
/// returns:
/// return value description
+ (enum TMTimingTypes)getTimingTypeWithArgValue:(int32_t)argValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A TrackID uniquely identifies a Video/Audio/Subtitle Track in a ContentInfo.
SWIFT_CLASS("_TtC9MediaFlow9TMTrackID")
@interface TMTrackID : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// When seeking or switching content, one can specify how this should be effectuated.
typedef SWIFT_ENUM(int32_t, TMTransitionTypes, open) {
/// In case of a continuous transition, the current content will keep playing until the transition to the next position or content item has completed (e.g. until the internal buffers have been filled sufficiently to start playback at the new position (and new clip in case of switch content)l.
  TMTransitionTypesContinuous = 0,
/// When specifying Fast as transition type, playback will immediately halt and will only continue once the buffers at the requested content position (and in case of switch content in the new content item) have been sufficiently filled.
  TMTransitionTypesFast = 1,
};


SWIFT_CLASS("_TtC9MediaFlow24TMTransitionTypesCBridge")
@interface TMTransitionTypesCBridge : NSObject
/// These static helper functions help out to bridge Swift enums to objective C
/// \param argValue argValue description
///
///
/// returns:
/// return value description
+ (enum TMTransitionTypes)getTransitionTypeWithArgValue:(int32_t)argValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9MediaFlow9TMVector3")
@interface TMVector3 : TMObservable
- (nonnull instancetype)init;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC9MediaFlow16TMVector3CBridge")
@interface TMVector3CBridge : NSObject
+ (TMVector3 * _Nonnull)getAsVector3WithArgX:(double)argX argY:(double)argY argZ:(double)argZ SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(int32_t, TMVideoCodecProfiles, open) {
  TMVideoCodecProfilesUnknown = 0,
  TMVideoCodecProfilesH265Main = 1,
  TMVideoCodecProfilesH265Main10 = 2,
  TMVideoCodecProfilesH265Main12 = 3,
  TMVideoCodecProfilesH265MainStill = 4,
  TMVideoCodecProfilesH265Main10Hdr10 = 5,
  TMVideoCodecProfilesH265Main10Hdr10Plus = 6,
  TMVideoCodecProfilesH264ConstrainedBaseline = 10,
  TMVideoCodecProfilesH264Baseline = 11,
  TMVideoCodecProfilesH264ExtendedProfile = 12,
  TMVideoCodecProfilesH264Main = 13,
  TMVideoCodecProfilesH264High = 14,
  TMVideoCodecProfilesH264High10 = 15,
  TMVideoCodecProfilesH264High422 = 16,
  TMVideoCodecProfilesH264High444 = 17,
  TMVideoCodecProfilesH264ConstrainedHigh = 18,
  TMVideoCodecProfilesAv1Main = 20,
  TMVideoCodecProfilesAv1High = 21,
  TMVideoCodecProfilesAv1Professional = 22,
};

typedef SWIFT_ENUM(int32_t, TMVideoCodecTypes, open) {
  TMVideoCodecTypesUnspecified = 0,
  TMVideoCodecTypesH264 = 1,
  TMVideoCodecTypesH265 = 2,
  TMVideoCodecTypesAv1 = 3,
};


SWIFT_CLASS("_TtC9MediaFlow26TMVideoDecoderCapabilities")
@interface TMVideoDecoderCapabilities : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Helper class that holds the info of one video track.
SWIFT_CLASS("_TtC9MediaFlow16TMVideoTrackInfo")
@interface TMVideoTrackInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9MediaFlow30TMViewportAndDisplayObjectPose")
@interface TMViewportAndDisplayObjectPose : NSObject
/// The position and the orientation of the viewport.
@property (nonatomic, strong) TMPose * _Nonnull viewportPose;
/// The position and the orientation of the display object
@property (nonatomic, strong) TMDisplayObject * _Nonnull displayObject;
- (nonnull instancetype)initWithArgViewportPose:(TMPose * _Nonnull)argViewportPose argDisplayObject:(TMDisplayObject * _Nonnull)argDisplayObject OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end





#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
