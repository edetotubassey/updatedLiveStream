// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::com.tiledmedia.clearvr.protobuf;
using pbc = global::com.tiledmedia.clearvr.protobuf.Collections;
using pbr = global::com.tiledmedia.clearvr.protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace com.tiledmedia.clearvr.cvrinterface {

  /// <summary>Holder for reflection information generated from core.proto</summary>
  public static partial class CoreReflection {

    #region Descriptor
    /// <summary>File descriptor for core.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CoreReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgpjb3JlLnByb3RvEgxjdnJpbnRlcmZhY2UizQEKE0NyZWF0ZUNvbnRleHRQ",
            "YXJhbXMSHQoVUGVyc2lzdGVuY2VGb2xkZXJQYXRoGAEgASgJEjAKDERldmlj",
            "ZVBhcmFtcxgCIAEoCzIaLmN2cmludGVyZmFjZS5EZXZpY2VQYXJhbXMSPQoP",
            "VGVsZW1ldHJ5Q29uZmlnGAUgASgLMiQuY3ZyaW50ZXJmYWNlLlRlbGVtZXRy",
            "eUNvbmZpZ3VyYXRpb24SJgoHU0RLVHlwZRgGIAEoDjIVLmN2cmludGVyZmFj",
            "ZS5TREtUeXBlIl4KFkluaXRpYWxpemVQYXJhbXNIZWFkZXISDwoHTGljZW5z",
            "ZRgBIAEoDBITCgtEZXZpY2VBcHBJRBgCIAEoCRIeChZEaXNhYmxlQ2FjaGVQ",
            "cmV3YXJtaW5nGAYgASgIIrwDChBJbml0aWFsaXplUGFyYW1zEkQKFkluaXRp",
            "YWxpemVQYXJhbXNIZWFkZXIYASABKAsyJC5jdnJpbnRlcmZhY2UuSW5pdGlh",
            "bGl6ZVBhcmFtc0hlYWRlchIuCgtDb250ZW50SXRlbRgCIAEoCzIZLmN2cmlu",
            "dGVyZmFjZS5Db250ZW50SXRlbRI3ChNTdGFydFBvc2l0aW9uUGFyYW1zGAMg",
            "ASgLMhouY3ZyaW50ZXJmYWNlLlRpbWluZ1BhcmFtcxJQChxWaWV3cG9ydEFu",
            "ZERpc3BsYXlPYmplY3RQb3NlGAQgASgLMiouY3ZyaW50ZXJmYWNlLlZpZXdw",
            "b3J0QW5kRGlzcGxheU9iamVjdFBvc2USEwoLU3luY0VuYWJsZWQYBSABKAgS",
            "MAoMU3luY1NldHRpbmdzGAYgASgLMhouY3ZyaW50ZXJmYWNlLlN5bmNTZXR0",
            "aW5ncxIiChpBcHByb3hEaXN0YW5jZUZyb21MaXZlRWRnZRgHIAEoAxI8ChFG",
            "ZWVkQ29uZmlndXJhdGlvbhgIIAEoCzIhLmN2cmludGVyZmFjZS5TZXRGZWVk",
            "TGF5b3V0UGFyYW1zIkwKDFRpbWluZ1BhcmFtcxIOCgZUYXJnZXQYAiABKAMS",
            "LAoKVGltaW5nVHlwZRgDIAEoDjIYLmN2cmludGVyZmFjZS5UaW1pbmdUeXBl",
            "It8BCgxEZXZpY2VQYXJhbXMSLAoKRGV2aWNlVHlwZRgBIAEoDjIYLmN2cmlu",
            "dGVyZmFjZS5EZXZpY2VUeXBlEhMKC1NjcmVlbldpZHRoGAIgASgNEhQKDFNj",
            "cmVlbkhlaWdodBgDIAEoDRISCgpEZXZpY2VOYW1lGAQgASgJEhEKCU9TVmVy",
            "c2lvbhgFIAEoARIPCgdDaGlwc2V0GAYgASgJEj4KDERlY29kaW5nQ2FwcxgH",
            "IAEoCzIoLmN2cmludGVyZmFjZS5EZXZpY2VEZWNvZGluZ0NhcGFiaWxpdGll",
            "cyLXAQoaRGV2aWNlRGVjb2RpbmdDYXBhYmlsaXRpZXMSPAoDQVZDGAEgASgL",
            "Mi8uY3ZyaW50ZXJmYWNlLkNvZGVjU3BlY2lmaWNEZWNvZGluZ0NhcGFiaWxp",
            "dGllcxI9CgRIRVZDGAIgASgLMi8uY3ZyaW50ZXJmYWNlLkNvZGVjU3BlY2lm",
            "aWNEZWNvZGluZ0NhcGFiaWxpdGllcxI8CgNBVjEYAyABKAsyLy5jdnJpbnRl",
            "cmZhY2UuQ29kZWNTcGVjaWZpY0RlY29kaW5nQ2FwYWJpbGl0aWVzIkwKIUNv",
            "ZGVjU3BlY2lmaWNEZWNvZGluZ0NhcGFiaWxpdGllcxInCghEZWNvZGVycxgB",
            "IAMoCzIVLmN2cmludGVyZmFjZS5EZWNvZGVyInsKB0RlY29kZXISEwoLRGVj",
            "b2Rlck5hbWUYASABKAkSFAoMRGVjb2RlckZsYWdzGAIgASgNEkUKE1Byb2Zp",
            "bGVDYXBhYmlsaXRpZXMYAyADKAsyKC5jdnJpbnRlcmZhY2UuRGVjb2RlclBy",
            "b2ZpbGVDYXBhYmlsaXRpZXMimAIKGkRlY29kZXJQcm9maWxlQ2FwYWJpbGl0",
            "aWVzEjAKB1Byb2ZpbGUYASABKA4yHy5jdnJpbnRlcmZhY2UuVmlkZW9Db2Rl",
            "Y1Byb2ZpbGUSOQoXQWJzb2x1dGVSZXNvbHV0aW9uTGltaXQYAiABKAsyGC5j",
            "dnJpbnRlcmZhY2UuUmVzb2x1dGlvbhINCgVMZXZlbBgEIAEoCRIpCiFTZWN1",
            "cmVEZWNvZGVyTWF4aW11bVRpbGVTbG90Q291bnQYBSABKA0SIAoYTWF4aW11",
            "bU51bWJlck9mSW5zdGFuY2VzGAYgASgNEjEKDURlY29kZXJMaW1pdHMYByAD",
            "KAsyGi5jdnJpbnRlcmZhY2UuRGVjb2RlckxpbWl0Ik8KDERlY29kZXJMaW1p",
            "dBIsCgpSZXNvbHV0aW9uGAEgASgLMhguY3ZyaW50ZXJmYWNlLlJlc29sdXRp",
            "b24SEQoJRnJhbWVyYXRlGAIgASgCIisKClJlc29sdXRpb24SDQoFV2lkdGgY",
            "ASABKA0SDgoGSGVpZ2h0GAIgASgNIkkKF1BvcHVsYXRlTWVkaWFJbmZvUGFy",
            "YW1zEi4KC0NvbnRlbnRJdGVtGAIgASgLMhkuY3ZyaW50ZXJmYWNlLkNvbnRl",
            "bnRJdGVtIkkKFkNoZWNrSXNTdXBwb3J0ZWRQYXJhbXMSLwoMQ29udGVudEl0",
            "ZW1zGAogAygLMhkuY3ZyaW50ZXJmYWNlLkNvbnRlbnRJdGVtIncKFkNoZWNr",
            "SXNTdXBwb3J0ZWRSZXBvcnQSEQoJRXJyb3JDb2RlGAEgASgFEhQKDEVycm9y",
            "TWVzc2FnZRgCIAEoCRI0CgtJc1N1cHBvcnRlZBgDIAMoDjIfLmN2cmludGVy",
            "ZmFjZS5Jc1N1cHBvcnRlZFJlc3VsdCKpAgoTU2V0RmVlZExheW91dFBhcmFt",
            "cxJDChREaXNwbGF5T2JqZWN0TWFwcGluZxgBIAMoCzIlLmN2cmludGVyZmFj",
            "ZS5EaXNwbGF5T2JqZWN0RmVlZFRyaXBsZRITCgtBdWRpb0ZlZWRJZBgCIAEo",
            "BRIVCg1BdWRpb1RyYWNrSWR4GAMgASgFEhYKDlN1YnRpdGxlRmVlZElkGAQg",
            "ASgFEhgKEFN1YnRpdGxlVHJhY2tJZHgYBSABKAUSHgoWUHJlZmVycmVkQXVk",
            "aW9MYW5ndWFnZRgGIAEoCRIiChpQcmVmZXJyZWRTdWJ0aXRsZXNMYW5ndWFn",
            "ZRgHIAEoCRIdChVEaXNhYmxlRmFsbGJhY2tTd2l0Y2gYCCABKAgSDAoETmFt",
            "ZRgJIAEoCSKtAQoXRGlzcGxheU9iamVjdEZlZWRUcmlwbGUSFwoPRGlzcGxh",
            "eU9iamVjdElkGAEgASgFEg4KBkZlZWRJZBgCIAEoBRI8ChJEaXNwbGF5T2Jq",
            "ZWN0Q2xhc3MYAyABKA4yIC5jdnJpbnRlcmZhY2UuRGlzcGxheU9iamVjdENs",
            "YXNzEhMKC0ZvcmNlQnVuZGxlGAQgASgIEhYKDkZvcmNlQnVuZGxlSWR4GAUg",
            "ASgFIvMBCgxUaW1pbmdSZXBvcnQSEQoJRXJyb3JDb2RlGAEgASgFEhQKDEVy",
            "cm9yTWVzc2FnZRgCIAEoCRIsCgpUaW1pbmdUeXBlGAMgASgOMhguY3ZyaW50",
            "ZXJmYWNlLlRpbWluZ1R5cGUSFwoPQ3VycmVudFBvc2l0aW9uGAQgASgDEhYK",
            "DlNlZWtMb3dlckJvdW5kGAUgASgDEhYKDlNlZWtVcHBlckJvdW5kGAYgASgD",
            "EhcKD0NvbnRlbnREdXJhdGlvbhgHIAEoAxIqCglFdmVudFR5cGUYCCABKA4y",
            "Fy5jdnJpbnRlcmZhY2UuRXZlbnRUeXBlIqsDChNTd2l0Y2hDb250ZW50UGFy",
            "YW1zEi4KC0NvbnRlbnRJdGVtGAEgASgLMhkuY3ZyaW50ZXJmYWNlLkNvbnRl",
            "bnRJdGVtEjcKE1N0YXJ0UG9zaXRpb25QYXJhbXMYAiABKAsyGi5jdnJpbnRl",
            "cmZhY2UuVGltaW5nUGFyYW1zElAKHFZpZXdwb3J0QW5kRGlzcGxheU9iamVj",
            "dFBvc2UYAyABKAsyKi5jdnJpbnRlcmZhY2UuVmlld3BvcnRBbmREaXNwbGF5",
            "T2JqZWN0UG9zZRIwCgpUcmFuc2l0aW9uGAQgASgOMhwuY3ZyaW50ZXJmYWNl",
            "LlRyYW5zaXRpb25UeXBlEhMKC1N5bmNFbmFibGVkGAUgASgIEjAKDFN5bmNT",
            "ZXR0aW5ncxgGIAEoCzIaLmN2cmludGVyZmFjZS5TeW5jU2V0dGluZ3MSIgoa",
            "QXBwcm94RGlzdGFuY2VGcm9tTGl2ZUVkZ2UYByABKAMSPAoRRmVlZENvbmZp",
            "Z3VyYXRpb24YCCABKAsyIS5jdnJpbnRlcmZhY2UuU2V0RmVlZExheW91dFBh",
            "cmFtcyKnAwodSW5pdGlhbGl6ZVBhcmFtZXRlcnNNZWRpYUZsb3cSPgoTQ3Jl",
            "YXRlQ29udGV4dFBhcmFtcxgBIAEoCzIhLmN2cmludGVyZmFjZS5DcmVhdGVD",
            "b250ZXh0UGFyYW1zEkQKGEh0dHBQcm94eVBhcmFtc01lZGlhRmxvdxgCIAEo",
            "CzIiLmN2cmludGVyZmFjZS5Qcm94eVBhcmFtc01lZGlhRmxvdxJFChlIdHRw",
            "c1Byb3h5UGFyYW1zTWVkaWFGbG93GAMgASgLMiIuY3ZyaW50ZXJmYWNlLlBy",
            "b3h5UGFyYW1zTWVkaWFGbG93EhEKCU11dGVTdGF0ZRgEIAEoAhIxCilBbGxv",
            "d0RlY29kZXJDb250cmFpbnRzSW5kdWNlZFN0ZXJlb1RvTW9ubxgFIAEoCBIZ",
            "ChFPdmVycmlkZVVzZXJBZ2VudBgGIAEoCRJYCiBDb250ZW50UHJvdGVjdGlv",
            "blJvYnVzdG5lc3NMZXZlbBgHIAEoDjIuLmN2cmludGVyZmFjZS5Db250ZW50",
            "UHJvdGVjdGlvblJvYnVzdG5lc3NMZXZlbCL2AQohUHJlcGFyZUNvbnRlbnRQ",
            "YXJhbWV0ZXJzTWVkaWFmbG93EjgKEEluaXRpYWxpemVQYXJhbXMYASABKAsy",
            "Hi5jdnJpbnRlcmZhY2UuSW5pdGlhbGl6ZVBhcmFtcxJoCihBdWRpb1RyYWNr",
            "QW5kUGxheWJhY2tQYXJhbWV0ZXJzTWVkaWFGbG93GAIgASgLMjYuY3ZyaW50",
            "ZXJmYWNlLkF1ZGlvVHJhY2tBbmRQbGF5YmFja1BhcmFtZXRlcnNNZWRpYUZs",
            "b3cSLQolU3RhcnRDbGVhclZSQ29yZVRpbWVvdXRJbk1pbGxpc2Vjb25kcxgD",
            "IAEoBSLIAQocU3dpdGNoQ29udGVudFBhcmFtc01lZGlhRmxvdxI+ChNTd2l0",
            "Y2hDb250ZW50UGFyYW1zGAEgASgLMiEuY3ZyaW50ZXJmYWNlLlN3aXRjaENv",
            "bnRlbnRQYXJhbXMSaAooQXVkaW9UcmFja0FuZFBsYXliYWNrUGFyYW1ldGVy",
            "c01lZGlhRmxvdxgCIAEoCzI2LmN2cmludGVyZmFjZS5BdWRpb1RyYWNrQW5k",
            "UGxheWJhY2tQYXJhbWV0ZXJzTWVkaWFGbG93IowDCilDb250ZW50U3VwcG9y",
            "dGVkVGVzdGVyUGFyYW1ldGVyc01lZGlhRmxvdxI+ChNDcmVhdGVDb250ZXh0",
            "UGFyYW1zGAEgASgLMiEuY3ZyaW50ZXJmYWNlLkNyZWF0ZUNvbnRleHRQYXJh",
            "bXMSRAoWY2hlY2tJc1N1cHBvcnRlZFBhcmFtcxgCIAEoCzIkLmN2cmludGVy",
            "ZmFjZS5DaGVja0lzU3VwcG9ydGVkUGFyYW1zEkQKGEh0dHBQcm94eVBhcmFt",
            "c01lZGlhRmxvdxgDIAEoCzIiLmN2cmludGVyZmFjZS5Qcm94eVBhcmFtc01l",
            "ZGlhRmxvdxJFChlIdHRwc1Byb3h5UGFyYW1zTWVkaWFGbG93GAQgASgLMiIu",
            "Y3ZyaW50ZXJmYWNlLlByb3h5UGFyYW1zTWVkaWFGbG93EhkKEU92ZXJyaWRl",
            "VXNlckFnZW50GAUgASgJEjEKKUFsbG93RGVjb2RlckNvbnRyYWludHNJbmR1",
            "Y2VkU3RlcmVvVG9Nb25vGAYgASgIIoIBChRQcm94eVBhcmFtc01lZGlhRmxv",
            "dxIMCgRIb3N0GAEgASgJEgwKBFBvcnQYAiABKAUSEAoIVXNlcm5hbWUYAyAB",
            "KAkSEAoIUGFzc3dvcmQYBCABKAkSKgoJUHJveHlUeXBlGAUgASgOMhcuY3Zy",
            "aW50ZXJmYWNlLlByb3h5VHlwZSIsCgdUcmFja0lEEg8KB0ZlZWRJZHgYASAB",
            "KAUSEAoIVHJhY2tJZHgYAiABKAUicAoLQ29udGVudEl0ZW0SCwoDVVJMGAEg",
            "ASgJEh4KA0RSTRgKIAEoCzIRLmN2cmludGVyZmFjZS5EUk0SNAoSUHJvamVj",
            "dGlvbk92ZXJyaWRlGBQgASgLMhguY3ZyaW50ZXJmYWNlLlByb2plY3Rpb24i",
            "nAEKClByb2plY3Rpb24SFgoOUHJvamVjdGlvblR5cGUYASABKAkSPgoYRGVw",
            "cmVjYXRlZFByb2plY3Rpb25UeXBlGAIgASgOMhwuY3ZyaW50ZXJmYWNlLlBy",
            "b2plY3Rpb25UeXBlEjYKD0Zpc2hFeWVTZXR0aW5ncxgDIAEoCzIdLmN2cmlu",
            "dGVyZmFjZS5GaXNoRXllU2V0dGluZ3Mi9wMKA0RSTRIYChBMaWNlbnNlU2Vy",
            "dmVyVVJMGAEgASgJEhkKEUxpY2Vuc2VTZXJ2ZXJUeXBlGAIgASgJEh4KFkNl",
            "cnRpZmljYXRlUEVNQXNCYXNlNjQYCiABKAkSFgoOS2V5UEVNQXNCYXNlNjQY",
            "CyABKAkSGgoSQ0FDaGFpblBFTUFzQmFzZTY0GAwgASgJEhMKC1BFTVBhc3N3",
            "b3JkGA0gASgJEg0KBVRva2VuGA8gASgJEhwKFExpY2Vuc2VBdXRoSGVhZGVy",
            "S2V5GBQgAygJEh4KFkxpY2Vuc2VBdXRoSGVhZGVyVmFsdWUYFSADKAkSIQoZ",
            "TGljZW5zZUF1dGhRdWVyeVN0cmluZ0tleRgWIAMoCRIjChtMaWNlbnNlQXV0",
            "aFF1ZXJ5U3RyaW5nVmFsdWUYFyADKAkSHQoVVG9rZW5pemF0aW9uSGVhZGVy",
            "S2V5GBggAygJEh8KF1Rva2VuaXphdGlvbkhlYWRlclZhbHVlGBkgAygJEiIK",
            "GlRva2VuaXphdGlvblF1ZXJ5U3RyaW5nS2V5GBogAygJEiQKHFRva2VuaXph",
            "dGlvblF1ZXJ5U3RyaW5nVmFsdWUYGyADKAkSGQoRS2V5T3ZlcnJpZGVCYXNl",
            "NjQYKCABKAkSGAoQSVZPdmVycmlkZUJhc2U2NBgpIAEoCSKSAgoSUG9seW5v",
            "bWlhbFNldHRpbmdzEg8KB0NlbnRlclUYASABKAISDwoHQ2VudGVyVhgCIAEo",
            "AhIYChBBZmZpbmVQYXJhbWV0ZXJDGAMgASgCEhgKEEFmZmluZVBhcmFtZXRl",
            "ckQYBCABKAISGAoQQWZmaW5lUGFyYW1ldGVyRRgFIAEoAhIcChRTcGhlcmVU",
            "b1BsYW5Qb2x5bm9tZRgGIAMoAhIcChRQbGFuVG9TcGhlcmVQb2x5bm9tZRgH",
            "IAMoAhIWCg5SZWZlcmVuY2VXaWR0aBgIIAEoBRIXCg9SZWZlcmVuY2VIZWln",
            "aHQYCSABKAUSHwoXQ2lyY3VsYXJSYWRpdXNJbkRlZ3JlZXMYCiABKAIimwEK",
            "FklkZWFsTGVuc01vZGVsU2V0dGluZ3MSEwoLRm9jYWxMZW5ndGgYASABKAIS",
            "GgoSU2Vuc29yUGl4ZWxEZW5zaXR5GAIgASgCEhYKDlJlZmVyZW5jZVdpZHRo",
            "GAMgASgFEhcKD1JlZmVyZW5jZUhlaWdodBgEIAEoBRIfChdDaXJjdWxhclJh",
            "ZGl1c0luRGVncmVlcxgFIAEoAiKiAgoPRmlzaEV5ZVNldHRpbmdzEhUKDUZp",
            "c2hleWVQcmVzZXQYASABKAkSQwoXRGVwcmVjYXRlZENhbWVyYUFuZExlbnMY",
            "AiABKA4yIi5jdnJpbnRlcmZhY2UuRmlzaEV5ZUNhbWVyYUFuZExlbnMSLwoI",
            "TGVuc1R5cGUYAyABKA4yHS5jdnJpbnRlcmZhY2UuRmlzaEV5ZUxlbnNUeXBl",
            "EkQKFklkZWFsTGVuc01vZGVsU2V0dGluZ3MYBCABKAsyJC5jdnJpbnRlcmZh",
            "Y2UuSWRlYWxMZW5zTW9kZWxTZXR0aW5ncxI8ChJQb2x5bm9taWFsU2V0dGlu",
            "Z3MYBSABKAsyIC5jdnJpbnRlcmZhY2UuUG9seW5vbWlhbFNldHRpbmdzItMB",
            "CihBdWRpb1RyYWNrQW5kUGxheWJhY2tQYXJhbWV0ZXJzTWVkaWFGbG93EhcK",
            "D0F1ZGlvVHJhY2tJbmRleBgBIAEoBRIYChBBdWRpb0RlY29kZXJUeXBlGAIg",
            "ASgFEh8KF0F1ZGlvUGxheWJhY2tFbmdpbmVUeXBlGAMgASgFEhEKCUF1ZGlv",
            "R2FpbhgEIAEoAhIRCglDb250ZW50SUQYBSABKAUSLQolRXN0aW1hdGVkUGxh",
            "eWJhY2tMYXRlbmN5SW5OYW5vc2Vjb25kcxgGIAEoAyLTAQohVmlkZW9EZWNv",
            "ZGVyQ2FwYWJpbGl0aWVzTWVkaWFGbG93EhMKC0RlY29kZXJOYW1lGAEgASgJ",
            "EisKI01heGltdW1WaWRlb0xldmVsU3VwcG9ydGVkQnlEZWNvZGVyGAIgASgJ",
            "EicKH21heGltdW1WaWRlb0xldmVsU3VwcG9ydGVkQnlTZGsYAyABKAkSMQop",
            "bWF4aW11bVZpZGVvTGV2ZWxTdXBwb3J0ZWRCeURlY29kZXJBbmRTZGsYBCAB",
            "KAkSEAoIbWltZXR5cGUYBSABKAkiRgoRU3VidGl0bGVJbmZvR3JvdXASMQoN",
            "c3VidGl0bGVJbmZvcxgBIAMoCzIaLmN2cmludGVyZmFjZS5TdWJ0aXRsZUlu",
            "Zm8ibQoMU3VidGl0bGVJbmZvEgwKBFRleHQYASABKAkSHgoWQ1RTU3RhcnRJ",
            "bk1pY3Jvc2Vjb25kcxgCIAEoAxIcChRDVFNFbmRJbk1pY3Jvc2Vjb25kcxgD",
            "IAEoAxIRCglGZWVkSW5kZXgYBCABKAUiogIKHFZpZXdwb3J0QW5kRGlzcGxh",
            "eU9iamVjdFBvc2USLAoQVmlld3BvcnRQb3NpdGlvbhgBIAEoCzISLmN2cmlu",
            "dGVyZmFjZS5WZWMzEjUKE1ZpZXdwb3J0T3JpZW50YXRpb24YAiABKAsyGC5j",
            "dnJpbnRlcmZhY2UuUXVhdGVybmlvbhIxChVEaXNwbGF5T2JqZWN0UG9zaXRp",
            "b24YAyABKAsyEi5jdnJpbnRlcmZhY2UuVmVjMxI6ChhEaXNwbGF5T2JqZWN0",
            "T3JpZW50YXRpb24YBCABKAsyGC5jdnJpbnRlcmZhY2UuUXVhdGVybmlvbhIu",
            "ChJEaXNwbGF5T2JqZWN0U2NhbGUYBSABKAsyEi5jdnJpbnRlcmZhY2UuVmVj",
            "MyInCgRWZWMzEgkKAXgYASABKAESCQoBeRgCIAEoARIJCgF6GAMgASgBIjgK",
            "ClF1YXRlcm5pb24SCQoBdxgBIAEoARIJCgF4GAIgASgBEgkKAXkYAyABKAES",
            "CQoBehgEIAEoASLhBgoPQ2FsbENvcmVSZXF1ZXN0Ej4KE0NhbGxDb3JlUmVx",
            "dWVzdFR5cGUYASABKA4yIS5jdnJpbnRlcmZhY2UuQ2FsbENvcmVSZXF1ZXN0",
            "VHlwZRIwCgxTeW5jU2V0dGluZ3MYAiABKAsyGi5jdnJpbnRlcmZhY2UuU3lu",
            "Y1NldHRpbmdzEkoKGUNoYW5nZVBsYXliYWNrUmF0ZVJlcXVlc3QYAyABKAsy",
            "Jy5jdnJpbnRlcmZhY2UuQ2hhbmdlUGxheWJhY2tSYXRlUmVxdWVzdBJCChVT",
            "d2l0Y2hBYnJMZXZlbFJlcXVlc3QYBCABKAsyIy5jdnJpbnRlcmZhY2UuU3dp",
            "dGNoQWJyTGV2ZWxSZXF1ZXN0Ej8KFFNldEZlZWRMYXlvdXRSZXF1ZXN0GAUg",
            "ASgLMiEuY3ZyaW50ZXJmYWNlLlNldEZlZWRMYXlvdXRQYXJhbXMSPAoSQ29u",
            "dGVudEluZm9SZXF1ZXN0GAYgASgLMiAuY3ZyaW50ZXJmYWNlLkNvbnRlbnRJ",
            "bmZvUmVxdWVzdBI8ChJDb250ZW50TGlzdFJlcXVlc3QYByABKAsyIC5jdnJp",
            "bnRlcmZhY2UuQ29udGVudExpc3RSZXF1ZXN0EjgKEExvYWRTdGF0ZVJlcXVl",
            "c3QYCCABKAsyHi5jdnJpbnRlcmZhY2UuTG9hZFN0YXRlUmVxdWVzdBI4ChBT",
            "YXZlU3RhdGVSZXF1ZXN0GAkgASgLMh4uY3ZyaW50ZXJmYWNlLlNhdmVTdGF0",
            "ZVJlcXVlc3QSOAoQTG9nVXBsb2FkUmVxdWVzdBgKIAEoCzIeLmN2cmludGVy",
            "ZmFjZS5Mb2dVcGxvYWRSZXF1ZXN0EkgKGEluaXRpYWxpemVMb2dnaW5nUmVx",
            "dWVzdBgLIAEoCzImLmN2cmludGVyZmFjZS5Jbml0aWFsaXplTG9nZ2luZ1Jl",
            "cXVlc3QSRAoWRG93bmxvYWRDb250ZW50UmVxdWVzdBgMIAEoCzIkLmN2cmlu",
            "dGVyZmFjZS5Eb3dubG9hZENvbnRlbnRSZXF1ZXN0ElEKIFRlbGVtZXRyeVVw",
            "ZGF0ZUN1c3RvbURhdGFSZXF1ZXN0GA0gASgLMicuY3ZyaW50ZXJmYWNlLlRl",
            "bGVtZXRyeVVwZGF0ZUN1c3RvbURhdGEiswMKEENhbGxDb3JlUmVzcG9uc2US",
            "EQoJRXJyb3JDb2RlGAEgASgFEhQKDEVycm9yTWVzc2FnZRgCIAEoCRI6ChFT",
            "eW5jU3RhdHVzTWVzc2FnZRgDIAEoCzIfLmN2cmludGVyZmFjZS5TeW5jU3Rh",
            "dHVzTWVzc2FnZRI8ChJDb250ZW50SW5mb01lc3NhZ2UYBCABKAsyIC5jdnJp",
            "bnRlcmZhY2UuQ29udGVudEluZm9NZXNzYWdlEjwKEkNvbnRlbnRMaXN0TWVz",
            "c2FnZRgFIAEoCzIgLmN2cmludGVyZmFjZS5Db250ZW50TGlzdE1lc3NhZ2US",
            "OgoRTG9hZFN0YXRlUmVzcG9uc2UYBiABKAsyHy5jdnJpbnRlcmZhY2UuTG9h",
            "ZFN0YXRlUmVzcG9uc2USOgoRTG9nVXBsb2FkUmVzcG9uc2UYByABKAsyHy5j",
            "dnJpbnRlcmZhY2UuTG9nVXBsb2FkUmVzcG9uc2USRgoXRG93bmxvYWRDb250",
            "ZW50UmVzcG9uc2UYCCABKAsyJS5jdnJpbnRlcmZhY2UuRG93bmxvYWRDb250",
            "ZW50UmVzcG9uc2UiowEKFlRlbGVtZXRyeUNvbmZpZ3VyYXRpb24SIgoaRGlz",
            "YWJsZVRpbGVkbWVkaWFUZWxlbWV0cnkYASABKAgSNwoQVGVsZW1ldHJ5VGFy",
            "Z2V0cxgCIAMoCzIdLmN2cmludGVyZmFjZS5UZWxlbWV0cnlUYXJnZXQSLAok",
            "RGlzYWJsZVRpbGVkbWVkaWFUZWxlbWV0cnlUb05ld1JlbGljGAMgASgIIsoB",
            "Cg9UZWxlbWV0cnlUYXJnZXQSLwoEVHlwZRgBIAEoDjIhLmN2cmludGVyZmFj",
            "ZS5UZWxlbWV0cnlUYXJnZXRUeXBlEkEKEElQU2lnbmFsbGluZ1R5cGUYAiAB",
            "KA4yJy5jdnJpbnRlcmZhY2UuVGVsZW1ldHJ5SVBTaWduYWxsaW5nVHlwZRJD",
            "Cg5OZXdSZWxpY0NvbmZpZxgKIAEoCzIrLmN2cmludGVyZmFjZS5UZWxlbWV0",
            "cnlUYXJnZXRDb25maWdOZXdSZWxpYyJQCh1UZWxlbWV0cnlUYXJnZXRDb25m",
            "aWdOZXdSZWxpYxIRCglBY2NvdW50SUQYASABKAkSDwoHTGljZW5zZRgCIAEo",
            "CRILCgNVUkwYAyABKAkicAoZVGVsZW1ldHJ5VXBkYXRlQ3VzdG9tRGF0YRJT",
            "ChxUYXJnZXRTcGVjaWZpY0N1c3RvbU1ldGFkYXRhGAEgAygLMi0uY3ZyaW50",
            "ZXJmYWNlLlRlbGVtZXRyeVVwZGF0ZVRhcmdldEN1c3RvbURhdGEibQofVGVs",
            "ZW1ldHJ5VXBkYXRlVGFyZ2V0Q3VzdG9tRGF0YRIaChJUZWxlbWV0cnlUYXJn",
            "ZXRJZHgYASABKAUSFQoNQ3VzdG9tRGF0YUtleRgCIAMoCRIXCg9DdXN0b21E",
            "YXRhVmFsdWUYAyADKAkiuAIKEVN5bmNTdGF0dXNNZXNzYWdlEhUKDUNsaWVu",
            "dExhdGVuY3kYASABKAUSFAoMTWF4VGFyZ2V0TGFnGAIgASgFEhcKD01heFBs",
            "YXliYWNrUmF0ZRgDIAEoAhIXCg9NaW5QbGF5YmFja1JhdGUYBCABKAISHQoV",
            "TWF4UGxheWJhY2tSYXRlQ2hhbmdlGAUgASgCEioKCVN5bmNTdGF0ZRgGIAEo",
            "DjIXLmN2cmludGVyZmFjZS5TeW5jU3RhdGUSFAoMUGxheWJhY2tSYXRlGAcg",
            "ASgBEg8KB05UUFRpbWUYCCABKAMSEgoKVGFyZ2V0VGltZRgJIAEoAxISCgpB",
            "Y3R1YWxUaW1lGAogASgDEhEKCVRhcmdldExhZxgLIAEoBRIXCg9TeW5jRWRn",
            "ZUxhdGVuY3kYDCABKAUi0gEKDFN5bmNTZXR0aW5ncxIVCg1DbGllbnRMYXRl",
            "bmN5GAEgASgFEhQKDE1heFRhcmdldExhZxgCIAEoBRIXCg9NYXhQbGF5YmFj",
            "a1JhdGUYAyABKAISFwoPTWluUGxheWJhY2tSYXRlGAQgASgCEh0KFU1heFBs",
            "YXliYWNrUmF0ZUNoYW5nZRgFIAEoAhIoCghTeW5jTW9kZRgGIAEoDjIWLmN2",
            "cmludGVyZmFjZS5TeW5jTW9kZRIaChJEaXNhYmxlSW5pdGlhbFNlZWsYByAB",
            "KAgiMQoZQ2hhbmdlUGxheWJhY2tSYXRlUmVxdWVzdBIUCgxQbGF5YmFja1Jh",
            "dGUYASABKAEiIwoVU3dpdGNoQWJyTGV2ZWxSZXF1ZXN0EgoKAnVwGAEgASgI",
            "IooBCg5DYWxsQXBwTWVzc2FnZRI8ChJDYWxsQXBwTWVzc2FnZVR5cGUYASAB",
            "KA4yIC5jdnJpbnRlcmZhY2UuQ2FsbEFwcE1lc3NhZ2VUeXBlEjoKEVN5bmNT",
            "dGF0dXNNZXNzYWdlGAIgASgLMh8uY3ZyaW50ZXJmYWNlLlN5bmNTdGF0dXNN",
            "ZXNzYWdlIlkKEkNvbnRlbnRJbmZvUmVxdWVzdBITCgtDb250ZW50VVVJRBgB",
            "IAEoBRIuCgtDb250ZW50SXRlbRgCIAEoCzIZLmN2cmludGVyZmFjZS5Db250",
            "ZW50SXRlbSL+AQoSQ29udGVudEluZm9NZXNzYWdlEioKCUV2ZW50VHlwZRgB",
            "IAEoDjIXLmN2cmludGVyZmFjZS5FdmVudFR5cGUSMAoRQWN0aXZlVmlkZW9U",
            "cmFja3MYAiADKAsyFS5jdnJpbnRlcmZhY2UuVHJhY2tJRBIvChBBY3RpdmVB",
            "dWRpb1RyYWNrGAMgASgLMhUuY3ZyaW50ZXJmYWNlLlRyYWNrSUQSMgoTQWN0",
            "aXZlU3VidGl0bGVUcmFjaxgEIAEoCzIVLmN2cmludGVyZmFjZS5UcmFja0lE",
            "EiUKBUZlZWRzGAUgAygLMhYuY3ZyaW50ZXJmYWNlLkZlZWRJbmZvImYKEExv",
            "Z1VwbG9hZFJlcXVlc3QSEwoLTG9nRmlsZVBhdGgYASABKAkSEwoLQ29yZVZl",
            "cnNpb24YAiABKAkSFAoMTGljZW5zZUJ5dGVzGAMgASgMEhIKCkZvcmNlQ2hp",
            "bmEYBCABKAgiVQoWRG93bmxvYWRDb250ZW50UmVxdWVzdBIdChVQZXJzaXN0",
            "ZW5jZUZvbGRlclBhdGgYASABKAkSDAoEVVVJRBgCIAEoCRIOCgZDYW5jZWwY",
            "AyABKAginwMKGEluaXRpYWxpemVMb2dnaW5nUmVxdWVzdBIyChJHbG9iYWxM",
            "b2dWZXJib3NpdHkYASABKA4yFi5jdnJpbnRlcmZhY2UuTG9nTGV2ZWwSFwoP",
            "R2xvYmFsTG9nRm9sZGVyGAIgASgJEhkKEUdsb2JhbExvZ0ZpbGVOYW1lGAMg",
            "ASgJEhkKEUdsb2JhbExvZ1RvTWVtb3J5GAcgASgIEhkKEUdsb2JhbExvZ1Rv",
            "U3RkZXJyGAggASgIEhIKCkxvZ05ldHdvcmsYCSABKAgSUgodT3ZlcnJpZGVM",
            "b2dMZXZlbENvbmZpZ3VyYXRpb24YBCADKAsyKy5jdnJpbnRlcmZhY2UuQ29t",
            "cG9uZW50U3BlY2lmaWNMb2dnaW5nTGV2ZWwSWAoiT3ZlcnJpZGVMb2dnaW5n",
            "T3V0cHV0Q29uZmlndXJhdGlvbhgFIAMoCzIsLmN2cmludGVyZmFjZS5Db21w",
            "b25lbnRTcGVjaWZpY0xvZ2dpbmdPdXRwdXQSIwobSW50ZXJhY3Rpb25SZWNv",
            "cmRlckZpbGVOYW1lGAYgASgJInwKHUNvbXBvbmVudFNwZWNpZmljTG9nZ2lu",
            "Z0xldmVsEi0KCUNvbXBvbmVudBgBIAEoDjIaLmN2cmludGVyZmFjZS5Mb2dD",
            "b21wb25lbnQSLAoMTG9nVmVyYm9zaXR5GAIgASgOMhYuY3ZyaW50ZXJmYWNl",
            "LkxvZ0xldmVsIo4BCh5Db21wb25lbnRTcGVjaWZpY0xvZ2dpbmdPdXRwdXQS",
            "LQoJQ29tcG9uZW50GAEgASgOMhouY3ZyaW50ZXJmYWNlLkxvZ0NvbXBvbmVu",
            "dBITCgtMb2dGaWxlTmFtZRgCIAEoCRITCgtMb2dUb01lbW9yeRgDIAEoCBIT",
            "CgtMb2dUb1N0ZGVychgEIAEoCCIxChBMb2FkU3RhdGVSZXF1ZXN0Eh0KFVBl",
            "cnNpc3RlbmNlRm9sZGVyUGF0aBgBIAEoCSIxChBTYXZlU3RhdGVSZXF1ZXN0",
            "Eh0KFVBlcnNpc3RlbmNlRm9sZGVyUGF0aBgBIAEoCSKEAQoRTG9hZFN0YXRl",
            "UmVzcG9uc2USOAoQSW5pdGlhbGl6ZVBhcmFtcxgBIAEoCzIeLmN2cmludGVy",
            "ZmFjZS5Jbml0aWFsaXplUGFyYW1zEjUKC0NvbnRlbnRJbmZvGAIgASgLMiAu",
            "Y3ZyaW50ZXJmYWNlLkNvbnRlbnRJbmZvTWVzc2FnZSImChFMb2dVcGxvYWRS",
            "ZXNwb25zZRIRCglDb3JlTG9nSUQYASABKAkiGQoXRG93bmxvYWRDb250ZW50",
            "UmVzcG9uc2UivAIKEkNvbnRlbnRMaXN0UmVxdWVzdBISCgpGb3JjZUNoaW5h",
            "GAEgASgIEhIKCkxvY2FsUGF0aHMYAiADKAkSMQoLQ3JlZGVudGlhbHMYAyAD",
            "KAsyHC5jdnJpbnRlcmZhY2UuQ01TQ3JlZGVudGlhbHMSDAoEVVJMcxgEIAMo",
            "CRIRCglKU09OQnl0ZXMYBSABKAwSHQoVUGVyc2lzdGVuY2VGb2xkZXJQYXRo",
            "GAYgASgJEkQKGEh0dHBQcm94eVBhcmFtc01lZGlhRmxvdxgKIAEoCzIiLmN2",
            "cmludGVyZmFjZS5Qcm94eVBhcmFtc01lZGlhRmxvdxJFChlIdHRwc1Byb3h5",
            "UGFyYW1zTWVkaWFGbG93GAsgASgLMiIuY3ZyaW50ZXJmYWNlLlByb3h5UGFy",
            "YW1zTWVkaWFGbG93IjQKDkNNU0NyZWRlbnRpYWxzEhAKCFVzZXJuYW1lGAEg",
            "ASgJEhAKCFBhc3N3b3JkGAIgASgJIksKEkNvbnRlbnRMaXN0TWVzc2FnZRI1",
            "Cg9BcHBDb250ZW50SXRlbXMYASADKAsyHC5jdnJpbnRlcmZhY2UuQXBwQ29u",
            "dGVudEl0ZW0itgEKCEZlZWRJbmZvEjEKC1ZpZGVvVHJhY2tzGAEgAygLMhwu",
            "Y3ZyaW50ZXJmYWNlLlZpZGVvVHJhY2tJbmZvEjEKC0F1ZGlvVHJhY2tzGAIg",
            "AygLMhwuY3ZyaW50ZXJmYWNlLkF1ZGlvVHJhY2tJbmZvEjcKDlN1YnRpdGxl",
            "VHJhY2tzGAMgAygLMh8uY3ZyaW50ZXJmYWNlLlN1YnRpdGxlVHJhY2tJbmZv",
            "EgsKA1VSTBgEIAEoCSK1AgoOVmlkZW9UcmFja0luZm8SFQoNVmlkZW9UcmFj",
            "a0lkeBgBIAEoBRIyCglTdXBwb3J0ZWQYAiABKA4yHy5jdnJpbnRlcmZhY2Uu",
            "SXNTdXBwb3J0ZWRSZXN1bHQSCwoDVVJMGAMgASgJEisKBUNvZGVjGAQgASgO",
            "MhwuY3ZyaW50ZXJmYWNlLlZpZGVvQ29kZWNUeXBlEg0KBVdpZHRoGAUgASgF",
            "Eg4KBkhlaWdodBgGIAEoBRIUCgxGcmFtZXJhdGVOdW0YByABKAUSFgoORnJh",
            "bWVyYXRlRGVub20YCCABKAUSFgoOUHJvamVjdGlvblR5cGUYCSABKAkSFQoN",
            "Qml0cmF0ZUluS2JwcxgKIAEoBRIiCgNEUk0YFCABKA4yFS5jdnJpbnRlcmZh",
            "Y2UuRFJNVHlwZSKIAgoOQXVkaW9UcmFja0luZm8SFQoNQXVkaW9UcmFja0lk",
            "eBgBIAEoBRIcChRCb3VuZFRvVmlkZW9UcmFja0lkeBgCIAEoBRILCgNVUkwY",
            "AyABKAkSKwoFQ29kZWMYBCABKA4yHC5jdnJpbnRlcmZhY2UuQXVkaW9Db2Rl",
            "Y1R5cGUSEgoKU2FtcGxlUmF0ZRgFIAEoBRIYChBOdW1iZXJPZkNoYW5uZWxz",
            "GAYgASgFEgwKBE5hbWUYByABKAkSEAoITGFuZ3VhZ2UYCCABKAkSFQoNQml0",
            "cmF0ZUluS2JwcxgJIAEoBRIiCgNEUk0YFCABKA4yFS5jdnJpbnRlcmZhY2Uu",
            "RFJNVHlwZSJ4ChFTdWJ0aXRsZVRyYWNrSW5mbxIYChBTdWJ0aXRsZVRyYWNr",
            "SWR4GAEgASgFEhwKFEJvdW5kVG9WaWRlb1RyYWNrSWR4GAIgASgFEgsKA1VS",
            "TBgDIAEoCRIMCgROYW1lGAUgASgJEhAKCExhbmd1YWdlGAQgASgJIt0DCg5B",
            "cHBDb250ZW50SXRlbRIOCgZBdXRob3IYASABKAkSDQoFVGl0bGUYAiABKAkS",
            "EQoJVGh1bWJuYWlsGAMgASgJEhMKC0Rlc2NyaXB0aW9uGAQgASgJEg8KB0dy",
            "b3VwSUQYBSABKAkSKQoKTWF4UXVhbGl0eRgGIAEoCzIVLmN2cmludGVyZmFj",
            "ZS5RdWFsaXR5EgwKBExpdmUYCiABKAgSFwoPV2FsbGNsb2NrU3luY2VkGAsg",
            "ASgIEg4KBlN0ZXJlbxgMIAEoCBIOCgZQbGFuYXIYDSABKAgSEgoKTG93TGF0",
            "ZW5jeRgOIAEoCBIQCghEdXJhdGlvbhgUIAEoAxIRCglEYXRhQWRkZWQYFSAB",
            "KAMSLgoLQ29udGVudFR5cGUYHiABKA4yGS5jdnJpbnRlcmZhY2UuQ29udGVu",
            "dFR5cGUSEAoIQ2VydFBhdGgYKCABKAkSDwoHS2V5UGF0aBgpIAEoCRITCgtD",
            "QUNoYWluUGF0aBgqIAEoCRISCgpMYXlvdXROYW1lGDIgASgJEgwKBFVVSUQY",
            "PCABKAkSCwoDVVJMGGMgASgJEjEKDlNES0NvbnRlbnRJdGVtGGQgASgLMhku",
            "Y3ZyaW50ZXJmYWNlLkNvbnRlbnRJdGVtIjsKB1F1YWxpdHkSDQoFV2lkdGgY",
            "ASABKAUSDgoGSGVpZ2h0GAIgASgFEhEKCUZyYW1lcmF0ZRgDIAEoASKbDwoY",
            "SW50ZXJhY3Rpb25SZWNvcmRSZXF1ZXN0EkIKFUludGVyYWN0aW9uUmVjb3Jk",
            "VHlwZRgBIAEoDjIjLmN2cmludGVyZmFjZS5JbnRlcmFjdGlvblJlY29yZFR5",
            "cGUSGQoRSW50ZXJhY3Rpb25UaW1pbmcYAiABKAMSPgoTSW50ZXJhY3Rpb25D",
            "YWxsQ29yZRgDIAEoCzIhLmN2cmludGVyZmFjZS5JbnRlcmFjdGlvbkNhbGxD",
            "b3JlEjYKD0ludGVyYWN0aW9uU2VlaxgEIAEoCzIdLmN2cmludGVyZmFjZS5J",
            "bnRlcmFjdGlvblNlZWsSPAoSSW50ZXJhY3Rpb25VbnBhdXNlGAUgASgLMiAu",
            "Y3ZyaW50ZXJmYWNlLkludGVyYWN0aW9uVW5wYXVzZRJIChhJbnRlcmFjdGlv",
            "blN3aXRjaENvbnRlbnQYBiABKAsyJi5jdnJpbnRlcmZhY2UuSW50ZXJhY3Rp",
            "b25Td2l0Y2hDb250ZW50El4KI0ludGVyYWN0aW9uQ3JlYXRlQ2xlYXJWUkNv",
            "cmVDb250ZXh0GAcgASgLMjEuY3ZyaW50ZXJmYWNlLkludGVyYWN0aW9uQ3Jl",
            "YXRlQ2xlYXJWUkNvcmVDb250ZXh0EkIKFUludGVyYWN0aW9uSW5pdGlhbGl6",
            "ZRgIIAEoCzIjLmN2cmludGVyZmFjZS5JbnRlcmFjdGlvbkluaXRpYWxpemUS",
            "UAocSW50ZXJhY3Rpb25Qb3B1bGF0ZU1lZGlhSW5mbxgJIAEoCzIqLmN2cmlu",
            "dGVyZmFjZS5JbnRlcmFjdGlvblBvcHVsYXRlTWVkaWFJbmZvElQKHkludGVy",
            "YWN0aW9uR2V0Q29udGVudFBhcmFtZXRlchgKIAEoCzIsLmN2cmludGVyZmFj",
            "ZS5JbnRlcmFjdGlvbkdldENvbnRlbnRQYXJhbWV0ZXISVAoeSW50ZXJhY3Rp",
            "b25TZXRDb250ZW50UGFyYW1ldGVyGAsgASgLMiwuY3ZyaW50ZXJmYWNlLklu",
            "dGVyYWN0aW9uU2V0Q29udGVudFBhcmFtZXRlchJKChlJbnRlcmFjdGlvbkdl",
            "dENBUGFyYW1ldGVyGAwgASgLMicuY3ZyaW50ZXJmYWNlLkludGVyYWN0aW9u",
            "R2V0Q0FQYXJhbWV0ZXISSgoZSW50ZXJhY3Rpb25TZXRDQVBhcmFtZXRlchgN",
            "IAEoCzInLmN2cmludGVyZmFjZS5JbnRlcmFjdGlvblNldENBUGFyYW1ldGVy",
            "EkYKF0ludGVyYWN0aW9uR2V0UGFyYW1ldGVyGA4gASgLMiUuY3ZyaW50ZXJm",
            "YWNlLkludGVyYWN0aW9uR2V0UGFyYW1ldGVyElAKHEludGVyYWN0aW9uR2V0",
            "QXJyYXlQYXJhbWV0ZXIYDyABKAsyKi5jdnJpbnRlcmZhY2UuSW50ZXJhY3Rp",
            "b25HZXRBcnJheVBhcmFtZXRlchJGChdJbnRlcmFjdGlvblNldFBhcmFtZXRl",
            "chgQIAEoCzIlLmN2cmludGVyZmFjZS5JbnRlcmFjdGlvblNldFBhcmFtZXRl",
            "chJGChdJbnRlcmFjdGlvblByZXdhcm1DYWNoZRgRIAEoCzIlLmN2cmludGVy",
            "ZmFjZS5JbnRlcmFjdGlvblByZXdhcm1DYWNoZRJCChVJbnRlcmFjdGlvblRp",
            "bWluZ0Z1bmMYEiABKAsyIy5jdnJpbnRlcmZhY2UuSW50ZXJhY3Rpb25UaW1p",
            "bmdGdW5jEkoKGUludGVyYWN0aW9uU2lnbmFsU0RLRXZlbnQYEyABKAsyJy5j",
            "dnJpbnRlcmZhY2UuSW50ZXJhY3Rpb25TaWduYWxTREtFdmVudBJMChpJbnRl",
            "cmFjdGlvbkdlbkRlY1Rlc3RGcmFtZRgUIAEoCzIoLmN2cmludGVyZmFjZS5J",
            "bnRlcmFjdGlvbkdlbkRlY1Rlc3RGcmFtZRJQChxJbnRlcmFjdGlvbkxvYWRN",
            "RlBlcnNpc3RlbmNlGBUgASgLMiouY3ZyaW50ZXJmYWNlLkludGVyYWN0aW9u",
            "TG9hZE1GUGVyc2lzdGVuY2USUAocSW50ZXJhY3Rpb25TYXZlTUZQZXJzaXN0",
            "ZW5jZRgWIAEoCzIqLmN2cmludGVyZmFjZS5JbnRlcmFjdGlvblNhdmVNRlBl",
            "cnNpc3RlbmNlEk4KG0ludGVyYWN0aW9uQ2hlY2tJc1N1cHBvcnRlZBgXIAEo",
            "CzIpLmN2cmludGVyZmFjZS5JbnRlcmFjdGlvbkNoZWNrSXNTdXBwb3J0ZWQS",
            "SgoZSW50ZXJhY3Rpb25TZW5kU2Vuc29yUG9zZRgYIAEoCzInLmN2cmludGVy",
            "ZmFjZS5JbnRlcmFjdGlvblNlbmRTZW5zb3JQb3NlEkoKGUludGVyYWN0aW9u",
            "U2VuZFNlbnNvckRhdGEYGSABKAsyJy5jdnJpbnRlcmZhY2UuSW50ZXJhY3Rp",
            "b25TZW5kU2Vuc29yRGF0YRJSCh1JbnRlcmFjdGlvblNlbmRTZW5zb3JEYXRh",
            "UG9zZRgaIAEoCzIrLmN2cmludGVyZmFjZS5JbnRlcmFjdGlvblNlbmRTZW5z",
            "b3JEYXRhUG9zZSJNChNJbnRlcmFjdGlvbkNhbGxDb3JlEjYKD0NhbGxDb3Jl",
            "UmVxdWVzdBgBIAEoCzIdLmN2cmludGVyZmFjZS5DYWxsQ29yZVJlcXVlc3Qi",
            "QwoPSW50ZXJhY3Rpb25TZWVrEjAKDFRpbWluZ1BhcmFtcxgBIAEoCzIaLmN2",
            "cmludGVyZmFjZS5UaW1pbmdQYXJhbXMiWgoYSW50ZXJhY3Rpb25Td2l0Y2hD",
            "b250ZW50Ej4KE1N3aXRjaENvbnRlbnRQYXJhbXMYASABKAsyIS5jdnJpbnRl",
            "cmZhY2UuU3dpdGNoQ29udGVudFBhcmFtcyJlCiNJbnRlcmFjdGlvbkNyZWF0",
            "ZUNsZWFyVlJDb3JlQ29udGV4dBI+ChNDcmVhdGVDb250ZXh0UGFyYW1zGAEg",
            "ASgLMiEuY3ZyaW50ZXJmYWNlLkNyZWF0ZUNvbnRleHRQYXJhbXMiUQoVSW50",
            "ZXJhY3Rpb25Jbml0aWFsaXplEjgKEEluaXRpYWxpemVQYXJhbXMYASABKAsy",
            "Hi5jdnJpbnRlcmZhY2UuSW5pdGlhbGl6ZVBhcmFtcyJmChxJbnRlcmFjdGlv",
            "blBvcHVsYXRlTWVkaWFJbmZvEkYKF1BvcHVsYXRlTWVkaWFJbmZvUGFyYW1z",
            "GAEgASgLMiUuY3ZyaW50ZXJmYWNlLlBvcHVsYXRlTWVkaWFJbmZvUGFyYW1z",
            "IkYKEkludGVyYWN0aW9uVW5wYXVzZRIwCgxUaW1pbmdQYXJhbXMYASABKAsy",
            "Gi5jdnJpbnRlcmZhY2UuVGltaW5nUGFyYW1zIkIKHkludGVyYWN0aW9uR2V0",
            "Q29udGVudFBhcmFtZXRlchILCgNrZXkYASABKAkSEwoLY29udGVudFVVSUQY",
            "AiABKAUiUQoeSW50ZXJhY3Rpb25TZXRDb250ZW50UGFyYW1ldGVyEgsKA2tl",
            "eRgBIAEoCRINCgV2YWx1ZRgCIAEoCRITCgtjb250ZW50VVVJRBgDIAEoBSJM",
            "ChlJbnRlcmFjdGlvbkdldENBUGFyYW1ldGVyEgsKA2tleRgBIAEoCRITCgtj",
            "b250ZW50VVVJRBgCIAEoBRINCgVpbmRleBgDIAEoBSJbChlJbnRlcmFjdGlv",
            "blNldENBUGFyYW1ldGVyEgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCRIT",
            "Cgtjb250ZW50VVVJRBgDIAEoBRINCgVpbmRleBgEIAEoBSImChdJbnRlcmFj",
            "dGlvbkdldFBhcmFtZXRlchILCgNrZXkYASABKAkiOgocSW50ZXJhY3Rpb25H",
            "ZXRBcnJheVBhcmFtZXRlchILCgNrZXkYASABKAkSDQoFaW5kZXgYAiABKAUi",
            "NQoXSW50ZXJhY3Rpb25TZXRQYXJhbWV0ZXISCwoDa2V5GAEgASgJEg0KBXZh",
            "bHVlGAIgASgJIkwKF0ludGVyYWN0aW9uUHJld2FybUNhY2hlEgsKA3VybBgB",
            "IAEoCRIVCg1zdGFydFBvc2l0aW9uGAIgASgDEg0KBWZsYWdzGAMgASgDIisK",
            "FUludGVyYWN0aW9uVGltaW5nRnVuYxISCgp0aW1pbmdUeXBlGAEgASgFIogC",
            "ChlJbnRlcmFjdGlvblNpZ25hbFNES0V2ZW50EhsKE01lc3NhZ2VDb2RlQXNT",
            "dHJpbmcYBiABKAkSEQoJRXZlbnRUeXBlGAEgASgJEg8KB1BheWxvYWQYAiAB",
            "KAkSEwoLTWVzc2FnZUNvZGUYByABKAUSEAoIU2V2ZXJpdHkYBSABKAUSLQoJ",
            "Q29tcG9uZW50GAggASgOMhouY3ZyaW50ZXJmYWNlLkxvZ0NvbXBvbmVudBIm",
            "CgdTREtUeXBlGAkgASgOMhUuY3ZyaW50ZXJmYWNlLlNES1R5cGUSLAoKRGV2",
            "aWNlSW5mbxgEIAEoCzIYLmN2cmludGVyZmFjZS5EZXZpY2VJbmZvIukECgpE",
            "ZXZpY2VJbmZvEhAKCFBsYXRmb3JtGAEgASgJEg4KBkRldmljZRgCIAEoCRIV",
            "Cg1EZXZpY2VDaGlwc2V0GAMgASgJEhQKDE1lZGlhRmxvd09FTRgEIAEoCRIY",
            "ChBNZWRpYUZsb3dWZXJzaW9uGAUgASgJEhwKFFBsYXRmb3JtQXJjaGl0ZWN0",
            "dXJlGAYgASgJEhcKD1BsYXRmb3JtVmVyc2lvbhgHIAEoCRIWCg5Db25uZWN0",
            "aW9uVHlwZRgIIAEoCRIZChFDUFVDb3JlQ2x1c3RlcmluZxgJIAEoCRIiChpS",
            "ZW5kZXJUaW1lU3RkRGV2aWF0aW9uSW5NcxgKIAEoAhIaChJEZWNvZGVyT3Zl",
            "cmZsb3dOT1MYCyABKAUSIQoZRGVjb2RlckluUXVldWVPdmVyZmxvd0NudBgM",
            "IAEoBRIiChpEZWNvZGVyT3V0UXVldWVPdmVyZmxvd0NudBgNIAEoBRIfChdN",
            "YXhUZW1wZXJhdHVyZUluRGVncmVlcxgOIAEoAhIbChNJbml0aWFsQmF0dGVy",
            "eUxldmVsGA8gASgCEhsKE0N1cnJlbnRCYXR0ZXJ5TGV2ZWwYECABKAISHwoX",
            "QXBwbGljYXRpb25GcmFtZVJhdGVOT1MYESABKAUSHwoXQXBwbGljYXRpb25G",
            "cmFtZVJhdGVDbnQYEiABKAISHwoXQXBwbGljYXRpb25GcmFtZVJhdGVNYXgY",
            "EyABKAISHwoXQXBwbGljYXRpb25GcmFtZVJhdGVNaW4YFCABKAISIgoaQXBw",
            "bGljYXRpb25GcmFtZVJhdGVTdGRkZXYYFSABKAIidAoaSW50ZXJhY3Rpb25H",
            "ZW5EZWNUZXN0RnJhbWUSEAoIZHN0V2lkdGgYASABKAUSEQoJZHN0SGVpZ2h0",
            "GAIgASgFEg0KBWNvZGVjGAMgASgJEg8KB3Byb2ZpbGUYBCABKAkSEQoJZW5j",
            "cnlwdGVkGAUgASgIIi4KHEludGVyYWN0aW9uTG9hZE1GUGVyc2lzdGVuY2US",
            "DgoGZm9sZGVyGAEgASgJIkIKHEludGVyYWN0aW9uU2F2ZU1GUGVyc2lzdGVu",
            "Y2USDgoGZm9sZGVyGAEgASgJEhIKCmJhc2U2NERhdGEYAiABKAkiYwobSW50",
            "ZXJhY3Rpb25DaGVja0lzU3VwcG9ydGVkEkQKFkNoZWNrSXNTdXBwb3J0ZWRQ",
            "YXJhbXMYASABKAsyJC5jdnJpbnRlcmZhY2UuQ2hlY2tJc1N1cHBvcnRlZFBh",
            "cmFtcyJtChlJbnRlcmFjdGlvblNlbmRTZW5zb3JQb3NlElAKHFZpZXdwb3J0",
            "QW5kRGlzcGxheU9iamVjdFBvc2UYASABKAsyKi5jdnJpbnRlcmZhY2UuVmll",
            "d3BvcnRBbmREaXNwbGF5T2JqZWN0UG9zZSJtChlJbnRlcmFjdGlvblNlbmRT",
            "ZW5zb3JEYXRhElAKHFZpZXdwb3J0QW5kRGlzcGxheU9iamVjdFBvc2UYASAB",
            "KAsyKi5jdnJpbnRlcmZhY2UuVmlld3BvcnRBbmREaXNwbGF5T2JqZWN0UG9z",
            "ZSJxCh1JbnRlcmFjdGlvblNlbmRTZW5zb3JEYXRhUG9zZRJQChxWaWV3cG9y",
            "dEFuZERpc3BsYXlPYmplY3RQb3NlGAEgASgLMiouY3ZyaW50ZXJmYWNlLlZp",
            "ZXdwb3J0QW5kRGlzcGxheU9iamVjdFBvc2UqYgoRSXNTdXBwb3J0ZWRSZXN1",
            "bHQSDQoJU1VQUE9SVEVEEAASIAocU1VQUE9SVEVEX0FTX01PTk9TQ09QSUNf",
            "T05MWRABEg8KC1VOU1VQUE9SVEVEEAISCwoHVU5LTk9XThADKiYKDlRyYW5z",
            "aXRpb25UeXBlEggKBEZBU1QQABIKCgZTTU9PVEgQASrJAgoURmlzaEV5ZUNh",
            "bWVyYUFuZExlbnMSIgoeQ1VTVE9NX0ZJU0hFWUVfQ0FNRVJBX0FORF9MRU5T",
            "EAASIAocQkxBQ0tNQUdJQ19VUlNBTUlOSV9DQU5PTjgxNRABEh0KGVpDQU1f",
            "SzFQUk9fSVpVR0FSTUtYMjJNRlQQAhIbChdaQ0FNX0syUFJPX0laVUdBUk1L",
            "WDIwMBADEhoKFlJFRF9LT01PRE9fNktfQ0FOT044MTIQBBIrCidCTEFDS01B",
            "R0lDX1VSU0ExMktfQ0FOT044MTVfOE1NRjRfOEsxNjkQBRIgChxSRURfVl9S",
            "QVBUT1JfOEtfQ0FOT044MTVfOE1NEAYSIQodUkVEX1ZfUkFQVE9SXzhLX0NB",
            "Tk9OODE1XzEwTU0QBxIhCh1SRURfVl9SQVBUT1JfOEtfQ0FOT044MTVfMTNN",
            "TRAIKp4BCiBDb250ZW50UHJvdGVjdGlvblJvYnVzdG5lc3NMZXZlbBIPCgtV",
            "TlBST1RFQ1RFRBAAEhQKEFNXX1NFQ1VSRV9DUllQVE8QARIUChBTV19TRUNV",
            "UkVfREVDT0RFEAISFAoQSFdfU0VDVVJFX0NSWVBUTxADEhQKEEhXX1NFQ1VS",
            "RV9ERUNPREUQBBIRCg1IV19TRUNVUkVfQUxMEAUqYAoPRmlzaEV5ZUxlbnNU",
            "eXBlEh0KGURFRkFVTFRfRklTSEVZRV9MRU5TX1RZUEUQABINCglFUVVJU09M",
            "SUQQARIPCgtFUVVJRElTVEFOVBACEg4KClBPTFlOT01JQUwQAypJCglFdmVu",
            "dFR5cGUSBwoDVk9EEAASCAoETElWRRABEhEKDUZJTklTSEVEX0xJVkUQAhIW",
            "ChJFVkVOVF9UWVBFX1VOS05PV04QAyo4CgtDb250ZW50VHlwZRILCgdDTEVB",
            "UlZSEAASBwoDSExTEAESEwoPUFJPR1JFU1NJVkVfTVA0EAIqxgIKDlByb2pl",
            "Y3Rpb25UeXBlEhQKEFJFQ1RJTElORUFSX01PTk8QABIhCh1SRUNUSUxJTkVB",
            "Ul9TVEVSRU9fVE9QX0JPVFRPTRABEg8KC0VSUDM2MF9NT05PEAISHAoYRVJQ",
            "MzYwX1NURVJFT19UT1BfQk9UVE9NEAMSDwoLRVJQMTgwX01PTk8QBBIeChpF",
            "UlAxODBfU1RFUkVPX1NJREVfQllfU0lERRAFEhAKDEZJU0hFWUVfTU9OTxAG",
            "Eh8KG0ZJU0hFWUVfU1RFUkVPX1NJREVfQllfU0lERRAHEiMKH1JFQ1RJTElO",
            "RUFSX1NURVJFT19TSURFX0JZX1NJREUQCBIRCg1NRVNIX0JPWF9NT05PEAkS",
            "EwoPTUVTSF9CT1hfU1RFUkVPEAoSGwoXUFJPSkVDVElPTl9UWVBFX1VOS05P",
            "V04QYyriBgoKRGV2aWNlVHlwZRIXChNVTktOT1dOX0RFVklDRV9UWVBFEAAS",
            "EAoMQU5EUk9JRF9GTEFUEGQSDQoISU9TX0ZMQVQQlgESDQoIQVBQTEVfVFYQ",
            "oAESDAoHUENfRkxBVBDIARIYChNBTkRST0lEX0dFTkVSSUNfSE1EEOgHEh4K",
            "GUFORFJPSURfR0VORVJJQ19DQVJEQk9BUkQQ6QcSHQoYQU5EUk9JRF9HRU5F",
            "UklDX0RBWURSRUFNEOoHEh4KGUFORFJPSURfTU9CRklTSF9DQVJEQk9BUkQQ",
            "6wcSGwoWQU5EUk9JRF9PQ1VMVVNfR0VORVJJQxCaCBIWChFBTkRST0lEX09D",
            "VUxVU19HTxCbCBIaChVBTkRST0lEX09DVUxVU19HRUFSVlIQnAgSGQoUQU5E",
            "Uk9JRF9PQ1VMVVNfUVVFU1QQnQgSGwoWQU5EUk9JRF9PQ1VMVVNfUVVFU1Rf",
            "MhCeCBIbChZBTkRST0lEX1dBVkVWUl9HRU5FUklDEMwIEhsKFkFORFJPSURf",
            "UElDT1ZSX0dFTkVSSUMQ/ggSHwoaQU5EUk9JRF9TS1lXT1JUSFZSX0dFTkVS",
            "SUMQsAkSGQoUQU5EUk9JRF9HU1hSX0dFTkVSSUMQ4gkSFAoPSU9TX0dFTkVS",
            "SUNfSE1EENAPEhoKFUlPU19HRU5FUklDX0NBUkRCT0FSRBDRDxIaChVJT1Nf",
            "TU9CRklTSF9DQVJEQk9BUkQQ0g8SEwoOUENfR0VORVJJQ19ITUQQuBcSFgoR",
            "UENfT0NVTFVTX0dFTkVSSUMQ6hcSFwoSUENfT0NVTFVTX1JJRlRfREsxEOsX",
            "EhcKElBDX09DVUxVU19SSUZUX0RLMhDsFxIXChJQQ19PQ1VMVVNfUklGVF9D",
            "VjEQ7RcSFQoQUENfT0NVTFVTX1JJRlRfUxDuFxIZChRQQ19PQ1VMVVNfTElO",
            "S19RVUVTVBDvFxITCg5QQ19IVENfR0VORVJJQxCcGBIQCgtQQ19IVENfVklW",
            "RRCdGBIUCg9QQ19IVENfVklWRV9QUk8QnhgSFwoSUENfSFRDX1ZJVkVfQ09T",
            "TU9TEJ8YEhUKEFBDX1ZBTFZFX0dFTkVSSUMQzhgSEwoOUENfVkFMVkVfSU5E",
            "RVgQzxgSCwoGVEVTVEVSEJBOKswBChJEaXNwbGF5T2JqZWN0Q2xhc3MSIAoc",
            "RElTUExBWV9PQkpFQ1RfQ0xBU1NfVU5LTk9XThAAEiQKIERJU1BMQVlfT0JK",
            "RUNUX0NMQVNTX0ZVTExfU0NSRUVOEAESJAogRElTUExBWV9PQkpFQ1RfQ0xB",
            "U1NfTEFSR0VfUEFORUwQAhIkCiBESVNQTEFZX09CSkVDVF9DTEFTU19TTUFM",
            "TF9QQU5FTBADEiIKHkRJU1BMQVlfT0JKRUNUX0NMQVNTX1RIVU1CTkFJTBAE",
            "KuoBCgpUaW1pbmdUeXBlEhwKGFRJTUlOR19UWVBFX0NPTlRFTlRfVElNRRAA",
            "Eh4KGlRJTUlOR19UWVBFX1dBTExDTE9DS19USU1FEAESHQoZVElNSU5HX1RZ",
            "UEVfUkVMQVRJVkVfVElNRRACEhgKFFRJTUlOR19UWVBFX1NFQU1MRVNTEAMS",
            "IwofVElNSU5HX1RZUEVfU0NIRURVTEVEX09OX0RFTUFORBAEEhkKFVRJTUlO",
            "R19UWVBFX0xJVkVfRURHRRAFEiUKIVRJTUlOR19UWVBFX0NPUkVfSU5URVJO",
            "QUxfREVGQVVMVBBjKpMBCgxEZWNvZGVyRmxhZ3MSFgoSREVDT0RFUl9GTEFH",
            "X0RVTU1ZEAASGQoVREVDT0RFUl9GTEFHX0hBUkRXQVJFEAESFwoTREVDT0RF",
            "Ul9GTEFHX1NFQ1VSRRACEhkKFURFQ09ERVJfRkxBR19UVU5ORUxFRBAEEhwK",
            "GERFQ09ERVJfRkxBR19MT1dfTEFURU5DWRAQKoMGChFWaWRlb0NvZGVjUHJv",
            "ZmlsZRIfChtWSURFT19DT0RFQ19QUk9GSUxFX1VOS05PV04QABIhCh1WSURF",
            "T19DT0RFQ19QUk9GSUxFX0gyNjVfTUFJThABEiMKH1ZJREVPX0NPREVDX1BS",
            "T0ZJTEVfSDI2NV9NQUlOMTAQAhIjCh9WSURFT19DT0RFQ19QUk9GSUxFX0gy",
            "NjVfTUFJTjEyEAMSJwojVklERU9fQ09ERUNfUFJPRklMRV9IMjY1X01BSU5f",
            "U1RJTEwQBBIqCiZWSURFT19DT0RFQ19QUk9GSUxFX0gyNjVfTUFJTjEwX0hE",
            "Ul8xMBAFEi4KKlZJREVPX0NPREVDX1BST0ZJTEVfSDI2NV9NQUlOMTBfSERS",
            "XzEwUGx1cxAGEjEKLVZJREVPX0NPREVDX1BST0ZJTEVfSDI2NF9DT05TVFJB",
            "SU5FRF9CQVNFTElORRAKEiUKIVZJREVPX0NPREVDX1BST0ZJTEVfSDI2NF9C",
            "QVNFTElORRALEi0KKVZJREVPX0NPREVDX1BST0ZJTEVfSDI2NF9FWFRFTkRF",
            "RF9QUk9GSUxFEAwSIQodVklERU9fQ09ERUNfUFJPRklMRV9IMjY0X01BSU4Q",
            "DRIhCh1WSURFT19DT0RFQ19QUk9GSUxFX0gyNjRfSElHSBAOEiMKH1ZJREVP",
            "X0NPREVDX1BST0ZJTEVfSDI2NF9ISUdIMTAQDxIkCiBWSURFT19DT0RFQ19Q",
            "Uk9GSUxFX0gyNjRfSElHSDQyMhAQEiQKIFZJREVPX0NPREVDX1BST0ZJTEVf",
            "SDI2NF9ISUdINDQ0EBESLQopVklERU9fQ09ERUNfUFJPRklMRV9IMjY0X0NP",
            "TlNUUkFJTkVEX0hJR0gQEhIgChxWSURFT19DT0RFQ19QUk9GSUxFX0FWMV9N",
            "QUlOEBQSIAocVklERU9fQ09ERUNfUFJPRklMRV9BVjFfSElHSBAVEigKJFZJ",
            "REVPX0NPREVDX1BST0ZJTEVfQVYxX1BST0ZFU1NJT05BTBAWKk4KCVByb3h5",
            "VHlwZRIWChJQUk9YWV9UWVBFX1VOS05PV04QABITCg9QUk9YWV9UWVBFX0hU",
            "VFAQARIUChBQUk9YWV9UWVBFX0hUVFBTEAIqRgoKRHJtU3VidHlwZRIbChdE",
            "Uk1fU1VCVFlQRV9XSURFVklORV9MMRAAEhsKF0RSTV9TVUJUWVBFX1dJREVW",
            "SU5FX0wzEAEqXgoSRHJtS2V5UmVzcG9uc2VUeXBlEhYKEktFWV9SRVNQT05T",
            "RV9FUlJPUhAAEhgKFEtFWV9SRVNQT05TRV9TVUNDRVNTEAESFgoSS0VZX1JF",
            "U1BPTlNFX1JFVFJZEAIqyAIKE0NhbGxDb3JlUmVxdWVzdFR5cGUSFAoQUE9M",
            "TF9TWU5DX1NUQVRVUxAAEg8KC0VOQUJMRV9TWU5DEAESEAoMRElTQUJMRV9T",
            "WU5DEAISGAoUQ0hBTkdFX1BMQVlCQUNLX1JBVEUQAxIUChBTV0lUQ0hfQUJS",
            "X0xFVkVMEAQSEwoPU0VUX0ZFRURfTEFZT1VUEAUSEAoMQ09OVEVOVF9JTkZP",
            "EAYSFAoQRk9SQ0VfQ09SRV9DUkFTSBAHEhAKDENPTlRFTlRfTElTVBAIEg4K",
            "ClNBVkVfU1RBVEUQCRIOCgpMT0FEX1NUQVRFEAoSDwoLVVBMT0FEX0xPR1MQ",
            "CxIQCgxJTklUX0xPR0dJTkcQDBIUChBET1dOTE9BRF9DT05URU5UEA0SIAoc",
            "VEVMRU1FVFJZX1VQREFURV9DVVNUT01fREFUQRAOKjUKE1RlbGVtZXRyeVRh",
            "cmdldFR5cGUSHgoaVEVMRU1FVFJZX1RBUkdFVF9ORVdfUkVMSUMQACqHAQoZ",
            "VGVsZW1ldHJ5SVBTaWduYWxsaW5nVHlwZRIkCiBURUxFTUVUUllfSVBfU0lH",
            "TkFMTElOR19ESVNBQkxFRBAAEiIKHlRFTEVNRVRSWV9JUF9TSUdOQUxMSU5H",
            "X01BU0tFRBABEiAKHFRFTEVNRVRSWV9JUF9TSUdOQUxMSU5HX0ZVTEwQAion",
            "CghTeW5jTW9kZRIRCg1QTEFZQkFDS19SQVRFEAASCAoEU0VFSxABKjMKCVN5",
            "bmNTdGF0ZRIMCghESVNBQkxFRBAAEgsKB1NZTkNJTkcQARILCgdJTl9TWU5D",
            "EAIqJQoSQ2FsbEFwcE1lc3NhZ2VUeXBlEg8KC1NZTkNfU1RBVFVTEAAqggEK",
            "DlZpZGVvQ29kZWNUeXBlEiAKHFZJREVPX0NPREVDX1RZUEVfVU5TUEVDSUZJ",
            "RUQQABIZChVWSURFT19DT0RFQ19UWVBFX0gyNjQQARIZChVWSURFT19DT0RF",
            "Q19UWVBFX0gyNjUQAhIYChRWSURFT19DT0RFQ19UWVBFX0FWMRADKk8KDkF1",
            "ZGlvQ29kZWNUeXBlEiAKHEFVRElPX0NPREVDX1RZUEVfVU5TUEVDSUZJRUQQ",
            "ABIbChdBVURJT19DT0RFQ19UWVBFX0FBQ19MQxABKsUBCgdEUk1UeXBlEhgK",
            "FERSTV9UWVBFX1VOU1BFQ0lGSUVEEAASEAoMRFJNX1RZUEVfVEJEEAESEQoN",
            "RFJNX1RZUEVfTk9ORRACEhgKFERSTV9UWVBFX0hMU19BRVNfMTI4EAMSGwoX",
            "RFJNX1RZUEVfSExTX1NBTVBMRV9BRVMQBBIWChJEUk1fVFlQRV9QTEFZUkVB",
            "RFkQBRIVChFEUk1fVFlQRV9XSURFVklORRAGEhUKEURSTV9UWVBFX0ZBSVJQ",
            "TEFZEAcqgwEKCExvZ0xldmVsEhIKDkxPR19MRVZFTF9XQVJOEAASEgoOTE9H",
            "X0xFVkVMX0lORk8QARITCg9MT0dfTEVWRUxfREVCVUcQAhIcCg9MT0dfTEVW",
            "RUxfRVJST1IQ////////////ARIcCg9MT0dfTEVWRUxfRkFUQUwQ/v//////",
            "////ASqvAQoMTG9nQ29tcG9uZW50EhkKFUxPR19DT01QT05FTlRfVU5LTk9X",
            "ThAAEhkKFUxPR19DT01QT05FTlRfVE1fQ09SRRABEhUKEUxPR19DT01QT05F",
            "TlRfTlJQEAISHAoYTE9HX0NPTVBPTkVOVF9NRURJQV9GTE9XEAMSFQoRTE9H",
            "X0NPTVBPTkVOVF9TREsQBBIdChlMT0dfQ09NUE9ORU5UX1NJR01BX0FVRElP",
            "EAUqWgoHU0RLVHlwZRIUChBTREtfVFlQRV9VTktOT1dOEAASEgoOU0RLX1RZ",
            "UEVfVU5JVFkQARITCg9TREtfVFlQRV9OQVRJVkUQAhIQCgxTREtfVFlQRV9X",
            "RUIQAyq/BwoVSW50ZXJhY3Rpb25SZWNvcmRUeXBlEhMKD1pFUk9fVElNRV9F",
            "VkVOVBAAEhMKD0NBTExfQ09SRV9FVkVOVBABEg4KClNFRUtfRVZFTlQQAhIP",
            "CgtQQVVTRV9FVkVOVBADEhEKDVVOUEFVU0VfRVZFTlQQBBIOCgpRVUlUX0VW",
            "RU5UEAUSGAoUU1dJVENIX0NPTlRFTlRfRVZFTlQQBhIYChRDUkVBVEVfQ09O",
            "VEVYVF9FVkVOVBAHEhQKEElOSVRJQUxJWkVfRVZFTlQQCBIdChlQT1BVTEFU",
            "RV9NRURJQV9JTkZPX0VWRU5UEAkSGwoXUkVHX0NSQVNIX0hBTkRMRVJfRVZF",
            "TlQQChIXChNSVU5fQU5EX0JMT0NLX0VWRU5UEAsSGwoXR0VUX0NPTlRFTlRf",
            "UEFSQU1fRVZFTlQQDBIbChdTRVRfQ09OVEVOVF9QQVJBTV9FVkVOVBANEiEK",
            "HUdFVF9DT05URU5UX0FSUkFZX1BBUkFNX0VWRU5UEA4SIQodU0VUX0NPTlRF",
            "TlRfQVJSQVlfUEFSQU1fRVZFTlQQDxITCg9HRVRfUEFSQU1fRVZFTlQQEBIZ",
            "ChVHRVRfQVJSQVlfUEFSQU1fRVZFTlQQERITCg9TRVRfUEFSQU1fRVZFTlQQ",
            "EhIZChVERVNUUk9ZX0NPTlRFWFRfRVZFTlQQExIYChRSRUdfQ0JfSEFORExF",
            "Ul9FVkVOVBAUEhYKElJFR19OUlBfVk9JRF9FVkVOVBAVEhEKDVJFR19OUlBf",
            "RVZFTlQQFhIXChNQUkVXQVJNX0NBQ0hFX0VWRU5UEBcSEAoMVElNSU5HX0VW",
            "RU5UEBgSHgoaQ1VSUkVOVF9DT05URU5UX1RJTUVfRVZFTlQQGRIZChVDVVJS",
            "RU5UX1dDX1RJTUVfRVZFTlQQGhIaChZORVRfUlVOTklOR19USU1FX0VWRU5U",
            "EBsSHAoYTkVUX1JUX0lOQ0xfUEFVU0VEX0VWRU5UEBwSFAoQU0lHTkFMX1NE",
            "S19FVkVOVBAdEhwKGEdFTl9ERUNfVEVTVF9GUkFNRV9FVkVOVBAeEh0KGUxP",
            "QURfTUZfUEVSU0lTVEVOQ0VfRVZFTlQQHxIdChlTQVZFX01GX1BFUlNJU1RF",
            "TkNFX0VWRU5UECASHAoYQ0hFQ0tfSVNfU1VQUE9SVEVEX0VWRU5UECESFAoQ",
            "U0VORF9TRU5TT1JfUE9TRRAiEhQKEFNFTkRfU0VOU09SX0RBVEEQIxIYChRT",
            "RU5EX1NFTlNPUl9EQVRBUE9TRRAkQgJIA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::com.tiledmedia.clearvr.cvrinterface.IsSupportedResult), typeof(global::com.tiledmedia.clearvr.cvrinterface.TransitionType), typeof(global::com.tiledmedia.clearvr.cvrinterface.FishEyeCameraAndLens), typeof(global::com.tiledmedia.clearvr.cvrinterface.ContentProtectionRobustnessLevel), typeof(global::com.tiledmedia.clearvr.cvrinterface.FishEyeLensType), typeof(global::com.tiledmedia.clearvr.cvrinterface.EventType), typeof(global::com.tiledmedia.clearvr.cvrinterface.ContentType), typeof(global::com.tiledmedia.clearvr.cvrinterface.ProjectionType), typeof(global::com.tiledmedia.clearvr.cvrinterface.DeviceType), typeof(global::com.tiledmedia.clearvr.cvrinterface.DisplayObjectClass), typeof(global::com.tiledmedia.clearvr.cvrinterface.TimingType), typeof(global::com.tiledmedia.clearvr.cvrinterface.DecoderFlags), typeof(global::com.tiledmedia.clearvr.cvrinterface.VideoCodecProfile), typeof(global::com.tiledmedia.clearvr.cvrinterface.ProxyType), typeof(global::com.tiledmedia.clearvr.cvrinterface.DrmSubtype), typeof(global::com.tiledmedia.clearvr.cvrinterface.DrmKeyResponseType), typeof(global::com.tiledmedia.clearvr.cvrinterface.CallCoreRequestType), typeof(global::com.tiledmedia.clearvr.cvrinterface.TelemetryTargetType), typeof(global::com.tiledmedia.clearvr.cvrinterface.TelemetryIPSignallingType), typeof(global::com.tiledmedia.clearvr.cvrinterface.SyncMode), typeof(global::com.tiledmedia.clearvr.cvrinterface.SyncState), typeof(global::com.tiledmedia.clearvr.cvrinterface.CallAppMessageType), typeof(global::com.tiledmedia.clearvr.cvrinterface.VideoCodecType), typeof(global::com.tiledmedia.clearvr.cvrinterface.AudioCodecType), typeof(global::com.tiledmedia.clearvr.cvrinterface.DRMType), typeof(global::com.tiledmedia.clearvr.cvrinterface.LogLevel), typeof(global::com.tiledmedia.clearvr.cvrinterface.LogComponent), typeof(global::com.tiledmedia.clearvr.cvrinterface.SDKType), typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionRecordType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.CreateContextParams), global::com.tiledmedia.clearvr.cvrinterface.CreateContextParams.Parser, new[]{ "PersistenceFolderPath", "DeviceParams", "TelemetryConfig", "SDKType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InitializeParamsHeader), global::com.tiledmedia.clearvr.cvrinterface.InitializeParamsHeader.Parser, new[]{ "License", "DeviceAppID", "DisableCachePrewarming" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InitializeParams), global::com.tiledmedia.clearvr.cvrinterface.InitializeParams.Parser, new[]{ "InitializeParamsHeader", "ContentItem", "StartPositionParams", "ViewportAndDisplayObjectPose", "SyncEnabled", "SyncSettings", "ApproxDistanceFromLiveEdge", "FeedConfiguration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.TimingParams), global::com.tiledmedia.clearvr.cvrinterface.TimingParams.Parser, new[]{ "Target", "TimingType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.DeviceParams), global::com.tiledmedia.clearvr.cvrinterface.DeviceParams.Parser, new[]{ "DeviceType", "ScreenWidth", "ScreenHeight", "DeviceName", "OSVersion", "Chipset", "DecodingCaps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.DeviceDecodingCapabilities), global::com.tiledmedia.clearvr.cvrinterface.DeviceDecodingCapabilities.Parser, new[]{ "AVC", "HEVC", "AV1" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.CodecSpecificDecodingCapabilities), global::com.tiledmedia.clearvr.cvrinterface.CodecSpecificDecodingCapabilities.Parser, new[]{ "Decoders" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.Decoder), global::com.tiledmedia.clearvr.cvrinterface.Decoder.Parser, new[]{ "DecoderName", "DecoderFlags", "ProfileCapabilities" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.DecoderProfileCapabilities), global::com.tiledmedia.clearvr.cvrinterface.DecoderProfileCapabilities.Parser, new[]{ "Profile", "AbsoluteResolutionLimit", "Level", "SecureDecoderMaximumTileSlotCount", "MaximumNumberOfInstances", "DecoderLimits" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.DecoderLimit), global::com.tiledmedia.clearvr.cvrinterface.DecoderLimit.Parser, new[]{ "Resolution", "Framerate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.Resolution), global::com.tiledmedia.clearvr.cvrinterface.Resolution.Parser, new[]{ "Width", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.PopulateMediaInfoParams), global::com.tiledmedia.clearvr.cvrinterface.PopulateMediaInfoParams.Parser, new[]{ "ContentItem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.CheckIsSupportedParams), global::com.tiledmedia.clearvr.cvrinterface.CheckIsSupportedParams.Parser, new[]{ "ContentItems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.CheckIsSupportedReport), global::com.tiledmedia.clearvr.cvrinterface.CheckIsSupportedReport.Parser, new[]{ "ErrorCode", "ErrorMessage", "IsSupported" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.SetFeedLayoutParams), global::com.tiledmedia.clearvr.cvrinterface.SetFeedLayoutParams.Parser, new[]{ "DisplayObjectMapping", "AudioFeedId", "AudioTrackIdx", "SubtitleFeedId", "SubtitleTrackIdx", "PreferredAudioLanguage", "PreferredSubtitlesLanguage", "DisableFallbackSwitch", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.DisplayObjectFeedTriple), global::com.tiledmedia.clearvr.cvrinterface.DisplayObjectFeedTriple.Parser, new[]{ "DisplayObjectId", "FeedId", "DisplayObjectClass", "ForceBundle", "ForceBundleIdx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.TimingReport), global::com.tiledmedia.clearvr.cvrinterface.TimingReport.Parser, new[]{ "ErrorCode", "ErrorMessage", "TimingType", "CurrentPosition", "SeekLowerBound", "SeekUpperBound", "ContentDuration", "EventType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.SwitchContentParams), global::com.tiledmedia.clearvr.cvrinterface.SwitchContentParams.Parser, new[]{ "ContentItem", "StartPositionParams", "ViewportAndDisplayObjectPose", "Transition", "SyncEnabled", "SyncSettings", "ApproxDistanceFromLiveEdge", "FeedConfiguration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InitializeParametersMediaFlow), global::com.tiledmedia.clearvr.cvrinterface.InitializeParametersMediaFlow.Parser, new[]{ "CreateContextParams", "HttpProxyParamsMediaFlow", "HttpsProxyParamsMediaFlow", "MuteState", "AllowDecoderContraintsInducedStereoToMono", "OverrideUserAgent", "ContentProtectionRobustnessLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.PrepareContentParametersMediaflow), global::com.tiledmedia.clearvr.cvrinterface.PrepareContentParametersMediaflow.Parser, new[]{ "InitializeParams", "AudioTrackAndPlaybackParametersMediaFlow", "StartClearVRCoreTimeoutInMilliseconds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.SwitchContentParamsMediaFlow), global::com.tiledmedia.clearvr.cvrinterface.SwitchContentParamsMediaFlow.Parser, new[]{ "SwitchContentParams", "AudioTrackAndPlaybackParametersMediaFlow" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.ContentSupportedTesterParametersMediaFlow), global::com.tiledmedia.clearvr.cvrinterface.ContentSupportedTesterParametersMediaFlow.Parser, new[]{ "CreateContextParams", "CheckIsSupportedParams", "HttpProxyParamsMediaFlow", "HttpsProxyParamsMediaFlow", "OverrideUserAgent", "AllowDecoderContraintsInducedStereoToMono" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow), global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow.Parser, new[]{ "Host", "Port", "Username", "Password", "ProxyType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.TrackID), global::com.tiledmedia.clearvr.cvrinterface.TrackID.Parser, new[]{ "FeedIdx", "TrackIdx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.ContentItem), global::com.tiledmedia.clearvr.cvrinterface.ContentItem.Parser, new[]{ "URL", "DRM", "ProjectionOverride" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.Projection), global::com.tiledmedia.clearvr.cvrinterface.Projection.Parser, new[]{ "ProjectionType", "DeprecatedProjectionType", "FishEyeSettings" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.DRM), global::com.tiledmedia.clearvr.cvrinterface.DRM.Parser, new[]{ "LicenseServerURL", "LicenseServerType", "CertificatePEMAsBase64", "KeyPEMAsBase64", "CAChainPEMAsBase64", "PEMPassword", "Token", "LicenseAuthHeaderKey", "LicenseAuthHeaderValue", "LicenseAuthQueryStringKey", "LicenseAuthQueryStringValue", "TokenizationHeaderKey", "TokenizationHeaderValue", "TokenizationQueryStringKey", "TokenizationQueryStringValue", "KeyOverrideBase64", "IVOverrideBase64" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.PolynomialSettings), global::com.tiledmedia.clearvr.cvrinterface.PolynomialSettings.Parser, new[]{ "CenterU", "CenterV", "AffineParameterC", "AffineParameterD", "AffineParameterE", "SphereToPlanPolynome", "PlanToSpherePolynome", "ReferenceWidth", "ReferenceHeight", "CircularRadiusInDegrees" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.IdealLensModelSettings), global::com.tiledmedia.clearvr.cvrinterface.IdealLensModelSettings.Parser, new[]{ "FocalLength", "SensorPixelDensity", "ReferenceWidth", "ReferenceHeight", "CircularRadiusInDegrees" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.FishEyeSettings), global::com.tiledmedia.clearvr.cvrinterface.FishEyeSettings.Parser, new[]{ "FisheyePreset", "DeprecatedCameraAndLens", "LensType", "IdealLensModelSettings", "PolynomialSettings" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.AudioTrackAndPlaybackParametersMediaFlow), global::com.tiledmedia.clearvr.cvrinterface.AudioTrackAndPlaybackParametersMediaFlow.Parser, new[]{ "AudioTrackIndex", "AudioDecoderType", "AudioPlaybackEngineType", "AudioGain", "ContentID", "EstimatedPlaybackLatencyInNanoseconds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.VideoDecoderCapabilitiesMediaFlow), global::com.tiledmedia.clearvr.cvrinterface.VideoDecoderCapabilitiesMediaFlow.Parser, new[]{ "DecoderName", "MaximumVideoLevelSupportedByDecoder", "MaximumVideoLevelSupportedBySdk", "MaximumVideoLevelSupportedByDecoderAndSdk", "Mimetype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.SubtitleInfoGroup), global::com.tiledmedia.clearvr.cvrinterface.SubtitleInfoGroup.Parser, new[]{ "SubtitleInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.SubtitleInfo), global::com.tiledmedia.clearvr.cvrinterface.SubtitleInfo.Parser, new[]{ "Text", "CTSStartInMicroseconds", "CTSEndInMicroseconds", "FeedIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose), global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose.Parser, new[]{ "ViewportPosition", "ViewportOrientation", "DisplayObjectPosition", "DisplayObjectOrientation", "DisplayObjectScale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.Vec3), global::com.tiledmedia.clearvr.cvrinterface.Vec3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.Quaternion), global::com.tiledmedia.clearvr.cvrinterface.Quaternion.Parser, new[]{ "W", "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.CallCoreRequest), global::com.tiledmedia.clearvr.cvrinterface.CallCoreRequest.Parser, new[]{ "CallCoreRequestType", "SyncSettings", "ChangePlaybackRateRequest", "SwitchAbrLevelRequest", "SetFeedLayoutRequest", "ContentInfoRequest", "ContentListRequest", "LoadStateRequest", "SaveStateRequest", "LogUploadRequest", "InitializeLoggingRequest", "DownloadContentRequest", "TelemetryUpdateCustomDataRequest" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.CallCoreResponse), global::com.tiledmedia.clearvr.cvrinterface.CallCoreResponse.Parser, new[]{ "ErrorCode", "ErrorMessage", "SyncStatusMessage", "ContentInfoMessage", "ContentListMessage", "LoadStateResponse", "LogUploadResponse", "DownloadContentResponse" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.TelemetryConfiguration), global::com.tiledmedia.clearvr.cvrinterface.TelemetryConfiguration.Parser, new[]{ "DisableTiledmediaTelemetry", "TelemetryTargets", "DisableTiledmediaTelemetryToNewRelic" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.TelemetryTarget), global::com.tiledmedia.clearvr.cvrinterface.TelemetryTarget.Parser, new[]{ "Type", "IPSignallingType", "NewRelicConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.TelemetryTargetConfigNewRelic), global::com.tiledmedia.clearvr.cvrinterface.TelemetryTargetConfigNewRelic.Parser, new[]{ "AccountID", "License", "URL" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.TelemetryUpdateCustomData), global::com.tiledmedia.clearvr.cvrinterface.TelemetryUpdateCustomData.Parser, new[]{ "TargetSpecificCustomMetadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.TelemetryUpdateTargetCustomData), global::com.tiledmedia.clearvr.cvrinterface.TelemetryUpdateTargetCustomData.Parser, new[]{ "TelemetryTargetIdx", "CustomDataKey", "CustomDataValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.SyncStatusMessage), global::com.tiledmedia.clearvr.cvrinterface.SyncStatusMessage.Parser, new[]{ "ClientLatency", "MaxTargetLag", "MaxPlaybackRate", "MinPlaybackRate", "MaxPlaybackRateChange", "SyncState", "PlaybackRate", "NTPTime", "TargetTime", "ActualTime", "TargetLag", "SyncEdgeLatency" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.SyncSettings), global::com.tiledmedia.clearvr.cvrinterface.SyncSettings.Parser, new[]{ "ClientLatency", "MaxTargetLag", "MaxPlaybackRate", "MinPlaybackRate", "MaxPlaybackRateChange", "SyncMode", "DisableInitialSeek" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.ChangePlaybackRateRequest), global::com.tiledmedia.clearvr.cvrinterface.ChangePlaybackRateRequest.Parser, new[]{ "PlaybackRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.SwitchAbrLevelRequest), global::com.tiledmedia.clearvr.cvrinterface.SwitchAbrLevelRequest.Parser, new[]{ "Up" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.CallAppMessage), global::com.tiledmedia.clearvr.cvrinterface.CallAppMessage.Parser, new[]{ "CallAppMessageType", "SyncStatusMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.ContentInfoRequest), global::com.tiledmedia.clearvr.cvrinterface.ContentInfoRequest.Parser, new[]{ "ContentUUID", "ContentItem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.ContentInfoMessage), global::com.tiledmedia.clearvr.cvrinterface.ContentInfoMessage.Parser, new[]{ "EventType", "ActiveVideoTracks", "ActiveAudioTrack", "ActiveSubtitleTrack", "Feeds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.LogUploadRequest), global::com.tiledmedia.clearvr.cvrinterface.LogUploadRequest.Parser, new[]{ "LogFilePath", "CoreVersion", "LicenseBytes", "ForceChina" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.DownloadContentRequest), global::com.tiledmedia.clearvr.cvrinterface.DownloadContentRequest.Parser, new[]{ "PersistenceFolderPath", "UUID", "Cancel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InitializeLoggingRequest), global::com.tiledmedia.clearvr.cvrinterface.InitializeLoggingRequest.Parser, new[]{ "GlobalLogVerbosity", "GlobalLogFolder", "GlobalLogFileName", "GlobalLogToMemory", "GlobalLogToStderr", "LogNetwork", "OverrideLogLevelConfiguration", "OverrideLoggingOutputConfiguration", "InteractionRecorderFileName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.ComponentSpecificLoggingLevel), global::com.tiledmedia.clearvr.cvrinterface.ComponentSpecificLoggingLevel.Parser, new[]{ "Component", "LogVerbosity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.ComponentSpecificLoggingOutput), global::com.tiledmedia.clearvr.cvrinterface.ComponentSpecificLoggingOutput.Parser, new[]{ "Component", "LogFileName", "LogToMemory", "LogToStderr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.LoadStateRequest), global::com.tiledmedia.clearvr.cvrinterface.LoadStateRequest.Parser, new[]{ "PersistenceFolderPath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.SaveStateRequest), global::com.tiledmedia.clearvr.cvrinterface.SaveStateRequest.Parser, new[]{ "PersistenceFolderPath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.LoadStateResponse), global::com.tiledmedia.clearvr.cvrinterface.LoadStateResponse.Parser, new[]{ "InitializeParams", "ContentInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.LogUploadResponse), global::com.tiledmedia.clearvr.cvrinterface.LogUploadResponse.Parser, new[]{ "CoreLogID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.DownloadContentResponse), global::com.tiledmedia.clearvr.cvrinterface.DownloadContentResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.ContentListRequest), global::com.tiledmedia.clearvr.cvrinterface.ContentListRequest.Parser, new[]{ "ForceChina", "LocalPaths", "Credentials", "URLs", "JSONBytes", "PersistenceFolderPath", "HttpProxyParamsMediaFlow", "HttpsProxyParamsMediaFlow" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.CMSCredentials), global::com.tiledmedia.clearvr.cvrinterface.CMSCredentials.Parser, new[]{ "Username", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.ContentListMessage), global::com.tiledmedia.clearvr.cvrinterface.ContentListMessage.Parser, new[]{ "AppContentItems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.FeedInfo), global::com.tiledmedia.clearvr.cvrinterface.FeedInfo.Parser, new[]{ "VideoTracks", "AudioTracks", "SubtitleTracks", "URL" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.VideoTrackInfo), global::com.tiledmedia.clearvr.cvrinterface.VideoTrackInfo.Parser, new[]{ "VideoTrackIdx", "Supported", "URL", "Codec", "Width", "Height", "FramerateNum", "FramerateDenom", "ProjectionType", "BitrateInKbps", "DRM" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.AudioTrackInfo), global::com.tiledmedia.clearvr.cvrinterface.AudioTrackInfo.Parser, new[]{ "AudioTrackIdx", "BoundToVideoTrackIdx", "URL", "Codec", "SampleRate", "NumberOfChannels", "Name", "Language", "BitrateInKbps", "DRM" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.SubtitleTrackInfo), global::com.tiledmedia.clearvr.cvrinterface.SubtitleTrackInfo.Parser, new[]{ "SubtitleTrackIdx", "BoundToVideoTrackIdx", "URL", "Name", "Language" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.AppContentItem), global::com.tiledmedia.clearvr.cvrinterface.AppContentItem.Parser, new[]{ "Author", "Title", "Thumbnail", "Description", "GroupID", "MaxQuality", "Live", "WallclockSynced", "Stereo", "Planar", "LowLatency", "Duration", "DataAdded", "ContentType", "CertPath", "KeyPath", "CAChainPath", "LayoutName", "UUID", "URL", "SDKContentItem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.Quality), global::com.tiledmedia.clearvr.cvrinterface.Quality.Parser, new[]{ "Width", "Height", "Framerate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionRecordRequest), global::com.tiledmedia.clearvr.cvrinterface.InteractionRecordRequest.Parser, new[]{ "InteractionRecordType", "InteractionTiming", "InteractionCallCore", "InteractionSeek", "InteractionUnpause", "InteractionSwitchContent", "InteractionCreateClearVRCoreContext", "InteractionInitialize", "InteractionPopulateMediaInfo", "InteractionGetContentParameter", "InteractionSetContentParameter", "InteractionGetCAParameter", "InteractionSetCAParameter", "InteractionGetParameter", "InteractionGetArrayParameter", "InteractionSetParameter", "InteractionPrewarmCache", "InteractionTimingFunc", "InteractionSignalSDKEvent", "InteractionGenDecTestFrame", "InteractionLoadMFPersistence", "InteractionSaveMFPersistence", "InteractionCheckIsSupported", "InteractionSendSensorPose", "InteractionSendSensorData", "InteractionSendSensorDataPose" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionCallCore), global::com.tiledmedia.clearvr.cvrinterface.InteractionCallCore.Parser, new[]{ "CallCoreRequest" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionSeek), global::com.tiledmedia.clearvr.cvrinterface.InteractionSeek.Parser, new[]{ "TimingParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionSwitchContent), global::com.tiledmedia.clearvr.cvrinterface.InteractionSwitchContent.Parser, new[]{ "SwitchContentParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionCreateClearVRCoreContext), global::com.tiledmedia.clearvr.cvrinterface.InteractionCreateClearVRCoreContext.Parser, new[]{ "CreateContextParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionInitialize), global::com.tiledmedia.clearvr.cvrinterface.InteractionInitialize.Parser, new[]{ "InitializeParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionPopulateMediaInfo), global::com.tiledmedia.clearvr.cvrinterface.InteractionPopulateMediaInfo.Parser, new[]{ "PopulateMediaInfoParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionUnpause), global::com.tiledmedia.clearvr.cvrinterface.InteractionUnpause.Parser, new[]{ "TimingParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionGetContentParameter), global::com.tiledmedia.clearvr.cvrinterface.InteractionGetContentParameter.Parser, new[]{ "Key", "ContentUUID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionSetContentParameter), global::com.tiledmedia.clearvr.cvrinterface.InteractionSetContentParameter.Parser, new[]{ "Key", "Value", "ContentUUID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionGetCAParameter), global::com.tiledmedia.clearvr.cvrinterface.InteractionGetCAParameter.Parser, new[]{ "Key", "ContentUUID", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionSetCAParameter), global::com.tiledmedia.clearvr.cvrinterface.InteractionSetCAParameter.Parser, new[]{ "Key", "Value", "ContentUUID", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionGetParameter), global::com.tiledmedia.clearvr.cvrinterface.InteractionGetParameter.Parser, new[]{ "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionGetArrayParameter), global::com.tiledmedia.clearvr.cvrinterface.InteractionGetArrayParameter.Parser, new[]{ "Key", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionSetParameter), global::com.tiledmedia.clearvr.cvrinterface.InteractionSetParameter.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionPrewarmCache), global::com.tiledmedia.clearvr.cvrinterface.InteractionPrewarmCache.Parser, new[]{ "Url", "StartPosition", "Flags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionTimingFunc), global::com.tiledmedia.clearvr.cvrinterface.InteractionTimingFunc.Parser, new[]{ "TimingType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionSignalSDKEvent), global::com.tiledmedia.clearvr.cvrinterface.InteractionSignalSDKEvent.Parser, new[]{ "MessageCodeAsString", "EventType", "Payload", "MessageCode", "Severity", "Component", "SDKType", "DeviceInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.DeviceInfo), global::com.tiledmedia.clearvr.cvrinterface.DeviceInfo.Parser, new[]{ "Platform", "Device", "DeviceChipset", "MediaFlowOEM", "MediaFlowVersion", "PlatformArchitecture", "PlatformVersion", "ConnectionType", "CPUCoreClustering", "RenderTimeStdDeviationInMs", "DecoderOverflowNOS", "DecoderInQueueOverflowCnt", "DecoderOutQueueOverflowCnt", "MaxTemperatureInDegrees", "InitialBatteryLevel", "CurrentBatteryLevel", "ApplicationFrameRateNOS", "ApplicationFrameRateCnt", "ApplicationFrameRateMax", "ApplicationFrameRateMin", "ApplicationFrameRateStddev" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionGenDecTestFrame), global::com.tiledmedia.clearvr.cvrinterface.InteractionGenDecTestFrame.Parser, new[]{ "DstWidth", "DstHeight", "Codec", "Profile", "Encrypted" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionLoadMFPersistence), global::com.tiledmedia.clearvr.cvrinterface.InteractionLoadMFPersistence.Parser, new[]{ "Folder" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionSaveMFPersistence), global::com.tiledmedia.clearvr.cvrinterface.InteractionSaveMFPersistence.Parser, new[]{ "Folder", "Base64Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionCheckIsSupported), global::com.tiledmedia.clearvr.cvrinterface.InteractionCheckIsSupported.Parser, new[]{ "CheckIsSupportedParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionSendSensorPose), global::com.tiledmedia.clearvr.cvrinterface.InteractionSendSensorPose.Parser, new[]{ "ViewportAndDisplayObjectPose" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionSendSensorData), global::com.tiledmedia.clearvr.cvrinterface.InteractionSendSensorData.Parser, new[]{ "ViewportAndDisplayObjectPose" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.tiledmedia.clearvr.cvrinterface.InteractionSendSensorDataPose), global::com.tiledmedia.clearvr.cvrinterface.InteractionSendSensorDataPose.Parser, new[]{ "ViewportAndDisplayObjectPose" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum IsSupportedResult {
    [pbr::OriginalName("SUPPORTED")] Supported = 0,
    [pbr::OriginalName("SUPPORTED_AS_MONOSCOPIC_ONLY")] SupportedAsMonoscopicOnly = 1,
    [pbr::OriginalName("UNSUPPORTED")] Unsupported = 2,
    [pbr::OriginalName("UNKNOWN")] Unknown = 3,
  }

  public enum TransitionType {
    [pbr::OriginalName("FAST")] Fast = 0,
    [pbr::OriginalName("SMOOTH")] Smooth = 1,
  }

  public enum FishEyeCameraAndLens {
    [pbr::OriginalName("CUSTOM_FISHEYE_CAMERA_AND_LENS")] CustomFisheyeCameraAndLens = 0,
    [pbr::OriginalName("BLACKMAGIC_URSAMINI_CANON815")] BlackmagicUrsaminiCanon815 = 1,
    [pbr::OriginalName("ZCAM_K1PRO_IZUGARMKX22MFT")] ZcamK1ProIzugarmkx22Mft = 2,
    [pbr::OriginalName("ZCAM_K2PRO_IZUGARMKX200")] ZcamK2ProIzugarmkx200 = 3,
    [pbr::OriginalName("RED_KOMODO_6K_CANON812")] RedKomodo6KCanon812 = 4,
    [pbr::OriginalName("BLACKMAGIC_URSA12K_CANON815_8MMF4_8K169")] BlackmagicUrsa12KCanon8158Mmf48K169 = 5,
    [pbr::OriginalName("RED_V_RAPTOR_8K_CANON815_8MM")] RedVRaptor8KCanon8158Mm = 6,
    [pbr::OriginalName("RED_V_RAPTOR_8K_CANON815_10MM")] RedVRaptor8KCanon81510Mm = 7,
    [pbr::OriginalName("RED_V_RAPTOR_8K_CANON815_13MM")] RedVRaptor8KCanon81513Mm = 8,
  }

  public enum ContentProtectionRobustnessLevel {
    [pbr::OriginalName("UNPROTECTED")] Unprotected = 0,
    [pbr::OriginalName("SW_SECURE_CRYPTO")] SwSecureCrypto = 1,
    [pbr::OriginalName("SW_SECURE_DECODE")] SwSecureDecode = 2,
    [pbr::OriginalName("HW_SECURE_CRYPTO")] HwSecureCrypto = 3,
    [pbr::OriginalName("HW_SECURE_DECODE")] HwSecureDecode = 4,
    [pbr::OriginalName("HW_SECURE_ALL")] HwSecureAll = 5,
  }

  public enum FishEyeLensType {
    [pbr::OriginalName("DEFAULT_FISHEYE_LENS_TYPE")] DefaultFisheyeLensType = 0,
    [pbr::OriginalName("EQUISOLID")] Equisolid = 1,
    [pbr::OriginalName("EQUIDISTANT")] Equidistant = 2,
    [pbr::OriginalName("POLYNOMIAL")] Polynomial = 3,
  }

  public enum EventType {
    [pbr::OriginalName("VOD")] Vod = 0,
    [pbr::OriginalName("LIVE")] Live = 1,
    [pbr::OriginalName("FINISHED_LIVE")] FinishedLive = 2,
    /// <summary>
    /// Needed on the SDK.
    /// </summary>
    [pbr::OriginalName("EVENT_TYPE_UNKNOWN")] Unknown = 3,
  }

  public enum ContentType {
    [pbr::OriginalName("CLEARVR")] Clearvr = 0,
    [pbr::OriginalName("HLS")] Hls = 1,
    [pbr::OriginalName("PROGRESSIVE_MP4")] ProgressiveMp4 = 2,
  }

  public enum ProjectionType {
    [pbr::OriginalName("RECTILINEAR_MONO")] RectilinearMono = 0,
    [pbr::OriginalName("RECTILINEAR_STEREO_TOP_BOTTOM")] RectilinearStereoTopBottom = 1,
    [pbr::OriginalName("ERP360_MONO")] Erp360Mono = 2,
    [pbr::OriginalName("ERP360_STEREO_TOP_BOTTOM")] Erp360StereoTopBottom = 3,
    [pbr::OriginalName("ERP180_MONO")] Erp180Mono = 4,
    [pbr::OriginalName("ERP180_STEREO_SIDE_BY_SIDE")] Erp180StereoSideBySide = 5,
    [pbr::OriginalName("FISHEYE_MONO")] FisheyeMono = 6,
    [pbr::OriginalName("FISHEYE_STEREO_SIDE_BY_SIDE")] FisheyeStereoSideBySide = 7,
    [pbr::OriginalName("RECTILINEAR_STEREO_SIDE_BY_SIDE")] RectilinearStereoSideBySide = 8,
    [pbr::OriginalName("MESH_BOX_MONO")] MeshBoxMono = 9,
    [pbr::OriginalName("MESH_BOX_STEREO")] MeshBoxStereo = 10,
    /// <summary>
    /// Only used for ContentInfo
    /// </summary>
    [pbr::OriginalName("PROJECTION_TYPE_UNKNOWN")] Unknown = 99,
  }

  public enum DeviceType {
    /// <summary>
    /// Only here because Protobuf enums should start with 0 and all
    /// </summary>
    [pbr::OriginalName("UNKNOWN_DEVICE_TYPE")] UnknownDeviceType = 0,
    /// <summary>
    /// Android (100 - 149) 
    /// </summary>
    [pbr::OriginalName("ANDROID_FLAT")] AndroidFlat = 100,
    /// <summary>
    /// iOS (150 - 199) 
    /// </summary>
    [pbr::OriginalName("IOS_FLAT")] IosFlat = 150,
    [pbr::OriginalName("APPLE_TV")] AppleTv = 160,
    /// <summary>
    /// PC (200 - 249) 
    /// </summary>
    [pbr::OriginalName("PC_FLAT")] PcFlat = 200,
    /// <summary>
    /// Android Generic (1000 - 1049)
    /// </summary>
    [pbr::OriginalName("ANDROID_GENERIC_HMD")] AndroidGenericHmd = 1000,
    [pbr::OriginalName("ANDROID_GENERIC_CARDBOARD")] AndroidGenericCardboard = 1001,
    [pbr::OriginalName("ANDROID_GENERIC_DAYDREAM")] AndroidGenericDaydream = 1002,
    [pbr::OriginalName("ANDROID_MOBFISH_CARDBOARD")] AndroidMobfishCardboard = 1003,
    /// <summary>
    /// Android Oculus (1050 - 1099) 
    /// </summary>
    [pbr::OriginalName("ANDROID_OCULUS_GENERIC")] AndroidOculusGeneric = 1050,
    [pbr::OriginalName("ANDROID_OCULUS_GO")] AndroidOculusGo = 1051,
    [pbr::OriginalName("ANDROID_OCULUS_GEARVR")] AndroidOculusGearvr = 1052,
    [pbr::OriginalName("ANDROID_OCULUS_QUEST")] AndroidOculusQuest = 1053,
    [pbr::OriginalName("ANDROID_OCULUS_QUEST_2")] AndroidOculusQuest2 = 1054,
    /// <summary>
    /// Android WaveVR (1100 - 1149 ) 
    /// </summary>
    [pbr::OriginalName("ANDROID_WAVEVR_GENERIC")] AndroidWavevrGeneric = 1100,
    /// <summary>
    /// Android PicoVR (1150 - 1199) 
    /// </summary>
    [pbr::OriginalName("ANDROID_PICOVR_GENERIC")] AndroidPicovrGeneric = 1150,
    /// <summary>
    /// Android SkyworthVR (1200 - 1249) 
    /// </summary>
    [pbr::OriginalName("ANDROID_SKYWORTHVR_GENERIC")] AndroidSkyworthvrGeneric = 1200,
    /// <summary>
    /// Android GSXR (1250 - 1299) 
    /// </summary>
    [pbr::OriginalName("ANDROID_GSXR_GENERIC")] AndroidGsxrGeneric = 1250,
    /// <summary>
    /// iOS Generic (2000 - 2049) 
    /// </summary>
    [pbr::OriginalName("IOS_GENERIC_HMD")] IosGenericHmd = 2000,
    [pbr::OriginalName("IOS_GENERIC_CARDBOARD")] IosGenericCardboard = 2001,
    [pbr::OriginalName("IOS_MOBFISH_CARDBOARD")] IosMobfishCardboard = 2002,
    /// <summary>
    /// PC Generic (3000 - 3049) 
    /// </summary>
    [pbr::OriginalName("PC_GENERIC_HMD")] PcGenericHmd = 3000,
    /// <summary>
    /// PC Oculus (3050 - 3099) 
    /// </summary>
    [pbr::OriginalName("PC_OCULUS_GENERIC")] PcOculusGeneric = 3050,
    [pbr::OriginalName("PC_OCULUS_RIFT_DK1")] PcOculusRiftDk1 = 3051,
    [pbr::OriginalName("PC_OCULUS_RIFT_DK2")] PcOculusRiftDk2 = 3052,
    [pbr::OriginalName("PC_OCULUS_RIFT_CV1")] PcOculusRiftCv1 = 3053,
    [pbr::OriginalName("PC_OCULUS_RIFT_S")] PcOculusRiftS = 3054,
    [pbr::OriginalName("PC_OCULUS_LINK_QUEST")] PcOculusLinkQuest = 3055,
    /// <summary>
    /// PC HTC (3100 - 3149) 
    /// </summary>
    [pbr::OriginalName("PC_HTC_GENERIC")] PcHtcGeneric = 3100,
    [pbr::OriginalName("PC_HTC_VIVE")] PcHtcVive = 3101,
    [pbr::OriginalName("PC_HTC_VIVE_PRO")] PcHtcVivePro = 3102,
    [pbr::OriginalName("PC_HTC_VIVE_COSMOS")] PcHtcViveCosmos = 3103,
    /// <summary>
    /// PC Valve (3150 - 3199) 
    /// </summary>
    [pbr::OriginalName("PC_VALVE_GENERIC")] PcValveGeneric = 3150,
    [pbr::OriginalName("PC_VALVE_INDEX")] PcValveIndex = 3151,
    /// <summary>
    /// Tester (10000 - 11000) 
    /// </summary>
    [pbr::OriginalName("TESTER")] Tester = 10000,
  }

  /// <summary>
  /// This enum is used to indicate the type of display object we are use to select a representation with a matching
  /// quality IMPORTANT: Ordering is used inside the Core to determine 'quality-preference'. With lower being better
  /// quality
  /// </summary>
  public enum DisplayObjectClass {
    /// <summary>
    /// The display object class is unknown. This is not a valid class and will trigger error if used
    /// </summary>
    [pbr::OriginalName("DISPLAY_OBJECT_CLASS_UNKNOWN")] Unknown = 0,
    /// <summary>
    /// Indicates full screen display. They highest rendition will be targeted for this display object
    /// </summary>
    [pbr::OriginalName("DISPLAY_OBJECT_CLASS_FULL_SCREEN")] FullScreen = 1,
    /// <summary>
    /// Indicates HD-like resolution is sufficient given panel size
    /// </summary>
    [pbr::OriginalName("DISPLAY_OBJECT_CLASS_LARGE_PANEL")] LargePanel = 2,
    /// <summary>
    /// Indicates SD-like resolution is sufficient given panel size
    /// </summary>
    [pbr::OriginalName("DISPLAY_OBJECT_CLASS_SMALL_PANEL")] SmallPanel = 3,
    /// <summary>
    /// Indicates thumbnail resolution is sufficient given panel size
    /// </summary>
    [pbr::OriginalName("DISPLAY_OBJECT_CLASS_THUMBNAIL")] Thumbnail = 4,
  }

  /// <summary>
  /// Do not change the integer values of these enum cases. Check TMTimingTypes.swift
  /// </summary>
  public enum TimingType {
    /// <summary>
    /// Timing information is provided as milliseconds since the start of the content.
    /// </summary>
    [pbr::OriginalName("TIMING_TYPE_CONTENT_TIME")] ContentTime = 0,
    /// <summary>
    /// Timing information is provided as milliseconds since the Unix Epoch, only applicable for live content.
    /// </summary>
    [pbr::OriginalName("TIMING_TYPE_WALLCLOCK_TIME")] WallclockTime = 1,
    /// <summary>
    /// Timing information is provided as milliseconds relative to the current playback position.
    /// </summary>
    [pbr::OriginalName("TIMING_TYPE_RELATIVE_TIME")] RelativeTime = 2,
    /// <summary>
    /// Timing information is relative to currently running content item. Can only be used with SwitchContent()
    /// </summary>
    [pbr::OriginalName("TIMING_TYPE_SEAMLESS")] Seamless = 3,
    /// <summary>
    /// Timing information is the starttime of the scheduled on demand content, provided as milliseconds since the Unix
    /// Epoch,
    /// </summary>
    [pbr::OriginalName("TIMING_TYPE_SCHEDULED_ON_DEMAND")] ScheduledOnDemand = 4,
    /// <summary>
    /// Follow the live edge, the target and timing type fields are ignored. Only applicable for live content.
    /// </summary>
    [pbr::OriginalName("TIMING_TYPE_LIVE_EDGE")] LiveEdge = 5,
    /// <summary>
    /// Should not be exposed
    /// </summary>
    [pbr::OriginalName("TIMING_TYPE_CORE_INTERNAL_DEFAULT")] CoreInternalDefault = 99,
  }

  public enum DecoderFlags {
    /// <summary>
    /// To satisfy proto3 requirement that all enums have a 0 value
    /// </summary>
    [pbr::OriginalName("DECODER_FLAG_DUMMY")] DecoderFlagDummy = 0,
    [pbr::OriginalName("DECODER_FLAG_HARDWARE")] DecoderFlagHardware = 1,
    [pbr::OriginalName("DECODER_FLAG_SECURE")] Ecure = 2,
    [pbr::OriginalName("DECODER_FLAG_TUNNELED")] DecoderFlagTunneled = 4,
    /// <summary>
    /// DECODER_FLAG_ADAPTIVE = 8;  // Unused, kept for parity with MediaFlow-Android
    /// </summary>
    [pbr::OriginalName("DECODER_FLAG_LOW_LATENCY")] DecoderFlagLowLatency = 16,
  }

  public enum VideoCodecProfile {
    [pbr::OriginalName("VIDEO_CODEC_PROFILE_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("VIDEO_CODEC_PROFILE_H265_MAIN")] H265Main = 1,
    [pbr::OriginalName("VIDEO_CODEC_PROFILE_H265_MAIN10")] H265Main10 = 2,
    [pbr::OriginalName("VIDEO_CODEC_PROFILE_H265_MAIN12")] H265Main12 = 3,
    [pbr::OriginalName("VIDEO_CODEC_PROFILE_H265_MAIN_STILL")] H265MainStill = 4,
    [pbr::OriginalName("VIDEO_CODEC_PROFILE_H265_MAIN10_HDR_10")] H265Main10Hdr10 = 5,
    [pbr::OriginalName("VIDEO_CODEC_PROFILE_H265_MAIN10_HDR_10Plus")] H265Main10Hdr10Plus = 6,
    [pbr::OriginalName("VIDEO_CODEC_PROFILE_H264_CONSTRAINED_BASELINE")] H264ConstrainedBaseline = 10,
    [pbr::OriginalName("VIDEO_CODEC_PROFILE_H264_BASELINE")] H264Baseline = 11,
    [pbr::OriginalName("VIDEO_CODEC_PROFILE_H264_EXTENDED_PROFILE")] H264ExtendedProfile = 12,
    [pbr::OriginalName("VIDEO_CODEC_PROFILE_H264_MAIN")] H264Main = 13,
    [pbr::OriginalName("VIDEO_CODEC_PROFILE_H264_HIGH")] H264High = 14,
    [pbr::OriginalName("VIDEO_CODEC_PROFILE_H264_HIGH10")] H264High10 = 15,
    [pbr::OriginalName("VIDEO_CODEC_PROFILE_H264_HIGH422")] H264High422 = 16,
    [pbr::OriginalName("VIDEO_CODEC_PROFILE_H264_HIGH444")] H264High444 = 17,
    [pbr::OriginalName("VIDEO_CODEC_PROFILE_H264_CONSTRAINED_HIGH")] H264ConstrainedHigh = 18,
    [pbr::OriginalName("VIDEO_CODEC_PROFILE_AV1_MAIN")] Av1Main = 20,
    [pbr::OriginalName("VIDEO_CODEC_PROFILE_AV1_HIGH")] Av1High = 21,
    [pbr::OriginalName("VIDEO_CODEC_PROFILE_AV1_PROFESSIONAL")] Av1Professional = 22,
  }

  public enum ProxyType {
    [pbr::OriginalName("PROXY_TYPE_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("PROXY_TYPE_HTTP")] Http = 1,
    [pbr::OriginalName("PROXY_TYPE_HTTPS")] Https = 2,
  }

  public enum DrmSubtype {
    [pbr::OriginalName("DRM_SUBTYPE_WIDEVINE_L1")] WidevineL1 = 0,
    [pbr::OriginalName("DRM_SUBTYPE_WIDEVINE_L3")] WidevineL3 = 1,
  }

  /// <summary>
  /// This enum is used to determine what action to take from the return of provideKeyResponse
  /// </summary>
  public enum DrmKeyResponseType {
    [pbr::OriginalName("KEY_RESPONSE_ERROR")] KeyResponseError = 0,
    [pbr::OriginalName("KEY_RESPONSE_SUCCESS")] KeyResponseSuccess = 1,
    [pbr::OriginalName("KEY_RESPONSE_RETRY")] KeyResponseRetry = 2,
  }

  public enum CallCoreRequestType {
    [pbr::OriginalName("POLL_SYNC_STATUS")] PollSyncStatus = 0,
    [pbr::OriginalName("ENABLE_SYNC")] EnableSync = 1,
    [pbr::OriginalName("DISABLE_SYNC")] DisableSync = 2,
    [pbr::OriginalName("CHANGE_PLAYBACK_RATE")] ChangePlaybackRate = 3,
    /// <summary>
    /// Allows external control of ABR-level. Note that whatever value is set here may be
    /// </summary>
    [pbr::OriginalName("SWITCH_ABR_LEVEL")] SwitchAbrLevel = 4,
    /// <summary>
    /// overruled if 'advanced.abr.enable' is enabled. For full control over ABR,
    /// 'advanced.abr.enable' should therefore be disabled.
    /// </summary>
    [pbr::OriginalName("SET_FEED_LAYOUT")] SetFeedLayout = 5,
    [pbr::OriginalName("CONTENT_INFO")] ContentInfo = 6,
    [pbr::OriginalName("FORCE_CORE_CRASH")] ForceCoreCrash = 7,
    [pbr::OriginalName("CONTENT_LIST")] ContentList = 8,
    [pbr::OriginalName("SAVE_STATE")] SaveState = 9,
    [pbr::OriginalName("LOAD_STATE")] LoadState = 10,
    [pbr::OriginalName("UPLOAD_LOGS")] UploadLogs = 11,
    [pbr::OriginalName("INIT_LOGGING")] InitLogging = 12,
    [pbr::OriginalName("DOWNLOAD_CONTENT")] DownloadContent = 13,
    [pbr::OriginalName("TELEMETRY_UPDATE_CUSTOM_DATA")] TelemetryUpdateCustomData = 14,
  }

  public enum TelemetryTargetType {
    [pbr::OriginalName("TELEMETRY_TARGET_NEW_RELIC")] TelemetryTargetNewRelic = 0,
  }

  public enum TelemetryIPSignallingType {
    [pbr::OriginalName("TELEMETRY_IP_SIGNALLING_DISABLED")] TelemetryIpSignallingDisabled = 0,
    [pbr::OriginalName("TELEMETRY_IP_SIGNALLING_MASKED")] TelemetryIpSignallingMasked = 1,
    [pbr::OriginalName("TELEMETRY_IP_SIGNALLING_FULL")] TelemetryIpSignallingFull = 2,
  }

  public enum SyncMode {
    /// <summary>
    /// The sync algorithm wil try to reach the sync target by changing the playback rate.
    /// </summary>
    [pbr::OriginalName("PLAYBACK_RATE")] PlaybackRate = 0,
    /// <summary>
    /// The sync algorithm wil try to reach the sync target by seeking inside the buffer.
    /// </summary>
    [pbr::OriginalName("SEEK")] Seek = 1,
  }

  public enum SyncState {
    /// <summary>
    /// Sync is currently disabled.
    /// </summary>
    [pbr::OriginalName("DISABLED")] Disabled = 0,
    /// <summary>
    /// The sync algorithm is taking steps to get the user in sync.
    /// </summary>
    [pbr::OriginalName("SYNCING")] Syncing = 1,
    /// <summary>
    /// The user is currently in sync.
    /// </summary>
    [pbr::OriginalName("IN_SYNC")] InSync = 2,
  }

  public enum CallAppMessageType {
    [pbr::OriginalName("SYNC_STATUS")] SyncStatus = 0,
  }

  public enum VideoCodecType {
    [pbr::OriginalName("VIDEO_CODEC_TYPE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("VIDEO_CODEC_TYPE_H264")] H264 = 1,
    [pbr::OriginalName("VIDEO_CODEC_TYPE_H265")] H265 = 2,
    [pbr::OriginalName("VIDEO_CODEC_TYPE_AV1")] Av1 = 3,
  }

  public enum AudioCodecType {
    [pbr::OriginalName("AUDIO_CODEC_TYPE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("AUDIO_CODEC_TYPE_AAC_LC")] AacLc = 1,
  }

  public enum DRMType {
    [pbr::OriginalName("DRM_TYPE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("DRM_TYPE_TBD")] Tbd = 1,
    [pbr::OriginalName("DRM_TYPE_NONE")] None = 2,
    [pbr::OriginalName("DRM_TYPE_HLS_AES_128")] HlsAes128 = 3,
    [pbr::OriginalName("DRM_TYPE_HLS_SAMPLE_AES")] HlsSampleAes = 4,
    [pbr::OriginalName("DRM_TYPE_PLAYREADY")] Playready = 5,
    [pbr::OriginalName("DRM_TYPE_WIDEVINE")] Widevine = 6,
    [pbr::OriginalName("DRM_TYPE_FAIRPLAY")] Fairplay = 7,
  }

  public enum LogLevel {
    [pbr::OriginalName("LOG_LEVEL_WARN")] Warn = 0,
    [pbr::OriginalName("LOG_LEVEL_INFO")] Info = 1,
    [pbr::OriginalName("LOG_LEVEL_DEBUG")] Debug = 2,
    [pbr::OriginalName("LOG_LEVEL_ERROR")] Error = -1,
    [pbr::OriginalName("LOG_LEVEL_FATAL")] Fatal = -2,
  }

  public enum LogComponent {
    [pbr::OriginalName("LOG_COMPONENT_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("LOG_COMPONENT_TM_CORE")] TmCore = 1,
    [pbr::OriginalName("LOG_COMPONENT_NRP")] Nrp = 2,
    [pbr::OriginalName("LOG_COMPONENT_MEDIA_FLOW")] MediaFlow = 3,
    [pbr::OriginalName("LOG_COMPONENT_SDK")] Sdk = 4,
    [pbr::OriginalName("LOG_COMPONENT_SIGMA_AUDIO")] SigmaAudio = 5,
  }

  public enum SDKType {
    [pbr::OriginalName("SDK_TYPE_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("SDK_TYPE_UNITY")] Unity = 1,
    [pbr::OriginalName("SDK_TYPE_NATIVE")] Native = 2,
    [pbr::OriginalName("SDK_TYPE_WEB")] Web = 3,
  }

  public enum InteractionRecordType {
    [pbr::OriginalName("ZERO_TIME_EVENT")] ZeroTimeEvent = 0,
    [pbr::OriginalName("CALL_CORE_EVENT")] CallCoreEvent = 1,
    [pbr::OriginalName("SEEK_EVENT")] SeekEvent = 2,
    [pbr::OriginalName("PAUSE_EVENT")] PauseEvent = 3,
    [pbr::OriginalName("UNPAUSE_EVENT")] UnpauseEvent = 4,
    [pbr::OriginalName("QUIT_EVENT")] QuitEvent = 5,
    [pbr::OriginalName("SWITCH_CONTENT_EVENT")] SwitchContentEvent = 6,
    [pbr::OriginalName("CREATE_CONTEXT_EVENT")] CreateContextEvent = 7,
    [pbr::OriginalName("INITIALIZE_EVENT")] InitializeEvent = 8,
    [pbr::OriginalName("POPULATE_MEDIA_INFO_EVENT")] PopulateMediaInfoEvent = 9,
    [pbr::OriginalName("REG_CRASH_HANDLER_EVENT")] RegCrashHandlerEvent = 10,
    [pbr::OriginalName("RUN_AND_BLOCK_EVENT")] RunAndBlockEvent = 11,
    [pbr::OriginalName("GET_CONTENT_PARAM_EVENT")] GetContentParamEvent = 12,
    [pbr::OriginalName("SET_CONTENT_PARAM_EVENT")] SetContentParamEvent = 13,
    [pbr::OriginalName("GET_CONTENT_ARRAY_PARAM_EVENT")] GetContentArrayParamEvent = 14,
    [pbr::OriginalName("SET_CONTENT_ARRAY_PARAM_EVENT")] SetContentArrayParamEvent = 15,
    [pbr::OriginalName("GET_PARAM_EVENT")] GetParamEvent = 16,
    [pbr::OriginalName("GET_ARRAY_PARAM_EVENT")] GetArrayParamEvent = 17,
    [pbr::OriginalName("SET_PARAM_EVENT")] SetParamEvent = 18,
    [pbr::OriginalName("DESTROY_CONTEXT_EVENT")] DestroyContextEvent = 19,
    [pbr::OriginalName("REG_CB_HANDLER_EVENT")] RegCbHandlerEvent = 20,
    [pbr::OriginalName("REG_NRP_VOID_EVENT")] RegNrpVoidEvent = 21,
    [pbr::OriginalName("REG_NRP_EVENT")] RegNrpEvent = 22,
    [pbr::OriginalName("PREWARM_CACHE_EVENT")] PrewarmCacheEvent = 23,
    [pbr::OriginalName("TIMING_EVENT")] TimingEvent = 24,
    [pbr::OriginalName("CURRENT_CONTENT_TIME_EVENT")] CurrentContentTimeEvent = 25,
    [pbr::OriginalName("CURRENT_WC_TIME_EVENT")] CurrentWcTimeEvent = 26,
    [pbr::OriginalName("NET_RUNNING_TIME_EVENT")] NetRunningTimeEvent = 27,
    [pbr::OriginalName("NET_RT_INCL_PAUSED_EVENT")] NetRtInclPausedEvent = 28,
    [pbr::OriginalName("SIGNAL_SDK_EVENT")] SignalSdkEvent = 29,
    [pbr::OriginalName("GEN_DEC_TEST_FRAME_EVENT")] GenDecTestFrameEvent = 30,
    [pbr::OriginalName("LOAD_MF_PERSISTENCE_EVENT")] LoadMfPersistenceEvent = 31,
    [pbr::OriginalName("SAVE_MF_PERSISTENCE_EVENT")] SaveMfPersistenceEvent = 32,
    [pbr::OriginalName("CHECK_IS_SUPPORTED_EVENT")] CheckIsSupportedEvent = 33,
    [pbr::OriginalName("SEND_SENSOR_POSE")] SendSensorPose = 34,
    [pbr::OriginalName("SEND_SENSOR_DATA")] SendSensorData = 35,
    [pbr::OriginalName("SEND_SENSOR_DATAPOSE")] SendSensorDatapose = 36,
  }

  #endregion

  #region Messages
  public sealed partial class CreateContextParams : pb::IMessage<CreateContextParams> {
    private static readonly pb::MessageParser<CreateContextParams> _parser = new pb::MessageParser<CreateContextParams>(() => new CreateContextParams());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateContextParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateContextParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateContextParams(CreateContextParams other) : this() {
      persistenceFolderPath_ = other.persistenceFolderPath_;
      DeviceParams = other.deviceParams_ != null ? other.DeviceParams.Clone() : null;
      TelemetryConfig = other.telemetryConfig_ != null ? other.TelemetryConfig.Clone() : null;
      sDKType_ = other.sDKType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateContextParams Clone() {
      return new CreateContextParams(this);
    }

    /// <summary>Field number for the "PersistenceFolderPath" field.</summary>
    public const int PersistenceFolderPathFieldNumber = 1;
    private string persistenceFolderPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PersistenceFolderPath {
      get { return persistenceFolderPath_; }
      set {
        persistenceFolderPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DeviceParams" field.</summary>
    public const int DeviceParamsFieldNumber = 2;
    private global::com.tiledmedia.clearvr.cvrinterface.DeviceParams deviceParams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.DeviceParams DeviceParams {
      get { return deviceParams_; }
      set {
        deviceParams_ = value;
      }
    }

    /// <summary>Field number for the "TelemetryConfig" field.</summary>
    public const int TelemetryConfigFieldNumber = 5;
    private global::com.tiledmedia.clearvr.cvrinterface.TelemetryConfiguration telemetryConfig_;
    /// <summary>
    /// string SDKElementID = 4; // Removed in PR#6286
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.TelemetryConfiguration TelemetryConfig {
      get { return telemetryConfig_; }
      set {
        telemetryConfig_ = value;
      }
    }

    /// <summary>Field number for the "SDKType" field.</summary>
    public const int SDKTypeFieldNumber = 6;
    private global::com.tiledmedia.clearvr.cvrinterface.SDKType sDKType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.SDKType SDKType {
      get { return sDKType_; }
      set {
        sDKType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateContextParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateContextParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PersistenceFolderPath != other.PersistenceFolderPath) return false;
      if (!object.Equals(DeviceParams, other.DeviceParams)) return false;
      if (!object.Equals(TelemetryConfig, other.TelemetryConfig)) return false;
      if (SDKType != other.SDKType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PersistenceFolderPath.Length != 0) hash ^= PersistenceFolderPath.GetHashCode();
      if (deviceParams_ != null) hash ^= DeviceParams.GetHashCode();
      if (telemetryConfig_ != null) hash ^= TelemetryConfig.GetHashCode();
      if (SDKType != 0) hash ^= SDKType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PersistenceFolderPath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PersistenceFolderPath);
      }
      if (deviceParams_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DeviceParams);
      }
      if (telemetryConfig_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TelemetryConfig);
      }
      if (SDKType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) SDKType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PersistenceFolderPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PersistenceFolderPath);
      }
      if (deviceParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceParams);
      }
      if (telemetryConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TelemetryConfig);
      }
      if (SDKType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SDKType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateContextParams other) {
      if (other == null) {
        return;
      }
      if (other.PersistenceFolderPath.Length != 0) {
        PersistenceFolderPath = other.PersistenceFolderPath;
      }
      if (other.deviceParams_ != null) {
        if (deviceParams_ == null) {
          deviceParams_ = new global::com.tiledmedia.clearvr.cvrinterface.DeviceParams();
        }
        DeviceParams.MergeFrom(other.DeviceParams);
      }
      if (other.telemetryConfig_ != null) {
        if (telemetryConfig_ == null) {
          telemetryConfig_ = new global::com.tiledmedia.clearvr.cvrinterface.TelemetryConfiguration();
        }
        TelemetryConfig.MergeFrom(other.TelemetryConfig);
      }
      if (other.SDKType != 0) {
        SDKType = other.SDKType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PersistenceFolderPath = input.ReadString();
            break;
          }
          case 18: {
            if (deviceParams_ == null) {
              deviceParams_ = new global::com.tiledmedia.clearvr.cvrinterface.DeviceParams();
            }
            input.ReadMessage(deviceParams_);
            break;
          }
          case 42: {
            if (telemetryConfig_ == null) {
              telemetryConfig_ = new global::com.tiledmedia.clearvr.cvrinterface.TelemetryConfiguration();
            }
            input.ReadMessage(telemetryConfig_);
            break;
          }
          case 48: {
            sDKType_ = (global::com.tiledmedia.clearvr.cvrinterface.SDKType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitializeParamsHeader : pb::IMessage<InitializeParamsHeader> {
    private static readonly pb::MessageParser<InitializeParamsHeader> _parser = new pb::MessageParser<InitializeParamsHeader>(() => new InitializeParamsHeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeParamsHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeParamsHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeParamsHeader(InitializeParamsHeader other) : this() {
      license_ = other.license_;
      deviceAppID_ = other.deviceAppID_;
      disableCachePrewarming_ = other.disableCachePrewarming_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeParamsHeader Clone() {
      return new InitializeParamsHeader(this);
    }

    /// <summary>Field number for the "License" field.</summary>
    public const int LicenseFieldNumber = 1;
    private pb::ByteString license_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString License {
      get { return license_; }
      set {
        license_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DeviceAppID" field.</summary>
    public const int DeviceAppIDFieldNumber = 2;
    private string deviceAppID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceAppID {
      get { return deviceAppID_; }
      set {
        deviceAppID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DisableCachePrewarming" field.</summary>
    public const int DisableCachePrewarmingFieldNumber = 6;
    private bool disableCachePrewarming_;
    /// <summary>
    /// Disable requests to prewarm the CDN cache
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableCachePrewarming {
      get { return disableCachePrewarming_; }
      set {
        disableCachePrewarming_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeParamsHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeParamsHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (License != other.License) return false;
      if (DeviceAppID != other.DeviceAppID) return false;
      if (DisableCachePrewarming != other.DisableCachePrewarming) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (License.Length != 0) hash ^= License.GetHashCode();
      if (DeviceAppID.Length != 0) hash ^= DeviceAppID.GetHashCode();
      if (DisableCachePrewarming != false) hash ^= DisableCachePrewarming.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (License.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(License);
      }
      if (DeviceAppID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceAppID);
      }
      if (DisableCachePrewarming != false) {
        output.WriteRawTag(48);
        output.WriteBool(DisableCachePrewarming);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (License.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(License);
      }
      if (DeviceAppID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceAppID);
      }
      if (DisableCachePrewarming != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeParamsHeader other) {
      if (other == null) {
        return;
      }
      if (other.License.Length != 0) {
        License = other.License;
      }
      if (other.DeviceAppID.Length != 0) {
        DeviceAppID = other.DeviceAppID;
      }
      if (other.DisableCachePrewarming != false) {
        DisableCachePrewarming = other.DisableCachePrewarming;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            License = input.ReadBytes();
            break;
          }
          case 18: {
            DeviceAppID = input.ReadString();
            break;
          }
          case 48: {
            DisableCachePrewarming = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitializeParams : pb::IMessage<InitializeParams> {
    private static readonly pb::MessageParser<InitializeParams> _parser = new pb::MessageParser<InitializeParams>(() => new InitializeParams());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeParams(InitializeParams other) : this() {
      InitializeParamsHeader = other.initializeParamsHeader_ != null ? other.InitializeParamsHeader.Clone() : null;
      ContentItem = other.contentItem_ != null ? other.ContentItem.Clone() : null;
      StartPositionParams = other.startPositionParams_ != null ? other.StartPositionParams.Clone() : null;
      ViewportAndDisplayObjectPose = other.viewportAndDisplayObjectPose_ != null ? other.ViewportAndDisplayObjectPose.Clone() : null;
      syncEnabled_ = other.syncEnabled_;
      SyncSettings = other.syncSettings_ != null ? other.SyncSettings.Clone() : null;
      approxDistanceFromLiveEdge_ = other.approxDistanceFromLiveEdge_;
      FeedConfiguration = other.feedConfiguration_ != null ? other.FeedConfiguration.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeParams Clone() {
      return new InitializeParams(this);
    }

    /// <summary>Field number for the "InitializeParamsHeader" field.</summary>
    public const int InitializeParamsHeaderFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.InitializeParamsHeader initializeParamsHeader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InitializeParamsHeader InitializeParamsHeader {
      get { return initializeParamsHeader_; }
      set {
        initializeParamsHeader_ = value;
      }
    }

    /// <summary>Field number for the "ContentItem" field.</summary>
    public const int ContentItemFieldNumber = 2;
    private global::com.tiledmedia.clearvr.cvrinterface.ContentItem contentItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ContentItem ContentItem {
      get { return contentItem_; }
      set {
        contentItem_ = value;
      }
    }

    /// <summary>Field number for the "StartPositionParams" field.</summary>
    public const int StartPositionParamsFieldNumber = 3;
    private global::com.tiledmedia.clearvr.cvrinterface.TimingParams startPositionParams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.TimingParams StartPositionParams {
      get { return startPositionParams_; }
      set {
        startPositionParams_ = value;
      }
    }

    /// <summary>Field number for the "ViewportAndDisplayObjectPose" field.</summary>
    public const int ViewportAndDisplayObjectPoseFieldNumber = 4;
    private global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose viewportAndDisplayObjectPose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose ViewportAndDisplayObjectPose {
      get { return viewportAndDisplayObjectPose_; }
      set {
        viewportAndDisplayObjectPose_ = value;
      }
    }

    /// <summary>Field number for the "SyncEnabled" field.</summary>
    public const int SyncEnabledFieldNumber = 5;
    private bool syncEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SyncEnabled {
      get { return syncEnabled_; }
      set {
        syncEnabled_ = value;
      }
    }

    /// <summary>Field number for the "SyncSettings" field.</summary>
    public const int SyncSettingsFieldNumber = 6;
    private global::com.tiledmedia.clearvr.cvrinterface.SyncSettings syncSettings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.SyncSettings SyncSettings {
      get { return syncSettings_; }
      set {
        syncSettings_ = value;
      }
    }

    /// <summary>Field number for the "ApproxDistanceFromLiveEdge" field.</summary>
    public const int ApproxDistanceFromLiveEdgeFieldNumber = 7;
    private long approxDistanceFromLiveEdge_;
    /// <summary>
    /// Approximate offset from live edge (in milliseconds). Ignored for non-live content. Note that the Core may enforce a minimum value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ApproxDistanceFromLiveEdge {
      get { return approxDistanceFromLiveEdge_; }
      set {
        approxDistanceFromLiveEdge_ = value;
      }
    }

    /// <summary>Field number for the "FeedConfiguration" field.</summary>
    public const int FeedConfigurationFieldNumber = 8;
    private global::com.tiledmedia.clearvr.cvrinterface.SetFeedLayoutParams feedConfiguration_;
    /// <summary>
    /// If null -> fully automatic (event manifest driven)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.SetFeedLayoutParams FeedConfiguration {
      get { return feedConfiguration_; }
      set {
        feedConfiguration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InitializeParamsHeader, other.InitializeParamsHeader)) return false;
      if (!object.Equals(ContentItem, other.ContentItem)) return false;
      if (!object.Equals(StartPositionParams, other.StartPositionParams)) return false;
      if (!object.Equals(ViewportAndDisplayObjectPose, other.ViewportAndDisplayObjectPose)) return false;
      if (SyncEnabled != other.SyncEnabled) return false;
      if (!object.Equals(SyncSettings, other.SyncSettings)) return false;
      if (ApproxDistanceFromLiveEdge != other.ApproxDistanceFromLiveEdge) return false;
      if (!object.Equals(FeedConfiguration, other.FeedConfiguration)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (initializeParamsHeader_ != null) hash ^= InitializeParamsHeader.GetHashCode();
      if (contentItem_ != null) hash ^= ContentItem.GetHashCode();
      if (startPositionParams_ != null) hash ^= StartPositionParams.GetHashCode();
      if (viewportAndDisplayObjectPose_ != null) hash ^= ViewportAndDisplayObjectPose.GetHashCode();
      if (SyncEnabled != false) hash ^= SyncEnabled.GetHashCode();
      if (syncSettings_ != null) hash ^= SyncSettings.GetHashCode();
      if (ApproxDistanceFromLiveEdge != 0L) hash ^= ApproxDistanceFromLiveEdge.GetHashCode();
      if (feedConfiguration_ != null) hash ^= FeedConfiguration.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (initializeParamsHeader_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InitializeParamsHeader);
      }
      if (contentItem_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ContentItem);
      }
      if (startPositionParams_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StartPositionParams);
      }
      if (viewportAndDisplayObjectPose_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ViewportAndDisplayObjectPose);
      }
      if (SyncEnabled != false) {
        output.WriteRawTag(40);
        output.WriteBool(SyncEnabled);
      }
      if (syncSettings_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SyncSettings);
      }
      if (ApproxDistanceFromLiveEdge != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ApproxDistanceFromLiveEdge);
      }
      if (feedConfiguration_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(FeedConfiguration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (initializeParamsHeader_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitializeParamsHeader);
      }
      if (contentItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContentItem);
      }
      if (startPositionParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartPositionParams);
      }
      if (viewportAndDisplayObjectPose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ViewportAndDisplayObjectPose);
      }
      if (SyncEnabled != false) {
        size += 1 + 1;
      }
      if (syncSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyncSettings);
      }
      if (ApproxDistanceFromLiveEdge != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ApproxDistanceFromLiveEdge);
      }
      if (feedConfiguration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeedConfiguration);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeParams other) {
      if (other == null) {
        return;
      }
      if (other.initializeParamsHeader_ != null) {
        if (initializeParamsHeader_ == null) {
          initializeParamsHeader_ = new global::com.tiledmedia.clearvr.cvrinterface.InitializeParamsHeader();
        }
        InitializeParamsHeader.MergeFrom(other.InitializeParamsHeader);
      }
      if (other.contentItem_ != null) {
        if (contentItem_ == null) {
          contentItem_ = new global::com.tiledmedia.clearvr.cvrinterface.ContentItem();
        }
        ContentItem.MergeFrom(other.ContentItem);
      }
      if (other.startPositionParams_ != null) {
        if (startPositionParams_ == null) {
          startPositionParams_ = new global::com.tiledmedia.clearvr.cvrinterface.TimingParams();
        }
        StartPositionParams.MergeFrom(other.StartPositionParams);
      }
      if (other.viewportAndDisplayObjectPose_ != null) {
        if (viewportAndDisplayObjectPose_ == null) {
          viewportAndDisplayObjectPose_ = new global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose();
        }
        ViewportAndDisplayObjectPose.MergeFrom(other.ViewportAndDisplayObjectPose);
      }
      if (other.SyncEnabled != false) {
        SyncEnabled = other.SyncEnabled;
      }
      if (other.syncSettings_ != null) {
        if (syncSettings_ == null) {
          syncSettings_ = new global::com.tiledmedia.clearvr.cvrinterface.SyncSettings();
        }
        SyncSettings.MergeFrom(other.SyncSettings);
      }
      if (other.ApproxDistanceFromLiveEdge != 0L) {
        ApproxDistanceFromLiveEdge = other.ApproxDistanceFromLiveEdge;
      }
      if (other.feedConfiguration_ != null) {
        if (feedConfiguration_ == null) {
          feedConfiguration_ = new global::com.tiledmedia.clearvr.cvrinterface.SetFeedLayoutParams();
        }
        FeedConfiguration.MergeFrom(other.FeedConfiguration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (initializeParamsHeader_ == null) {
              initializeParamsHeader_ = new global::com.tiledmedia.clearvr.cvrinterface.InitializeParamsHeader();
            }
            input.ReadMessage(initializeParamsHeader_);
            break;
          }
          case 18: {
            if (contentItem_ == null) {
              contentItem_ = new global::com.tiledmedia.clearvr.cvrinterface.ContentItem();
            }
            input.ReadMessage(contentItem_);
            break;
          }
          case 26: {
            if (startPositionParams_ == null) {
              startPositionParams_ = new global::com.tiledmedia.clearvr.cvrinterface.TimingParams();
            }
            input.ReadMessage(startPositionParams_);
            break;
          }
          case 34: {
            if (viewportAndDisplayObjectPose_ == null) {
              viewportAndDisplayObjectPose_ = new global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose();
            }
            input.ReadMessage(viewportAndDisplayObjectPose_);
            break;
          }
          case 40: {
            SyncEnabled = input.ReadBool();
            break;
          }
          case 50: {
            if (syncSettings_ == null) {
              syncSettings_ = new global::com.tiledmedia.clearvr.cvrinterface.SyncSettings();
            }
            input.ReadMessage(syncSettings_);
            break;
          }
          case 56: {
            ApproxDistanceFromLiveEdge = input.ReadInt64();
            break;
          }
          case 66: {
            if (feedConfiguration_ == null) {
              feedConfiguration_ = new global::com.tiledmedia.clearvr.cvrinterface.SetFeedLayoutParams();
            }
            input.ReadMessage(feedConfiguration_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Used as top level message for Seek call, aswell as sub level timing message
  /// </summary>
  public sealed partial class TimingParams : pb::IMessage<TimingParams> {
    private static readonly pb::MessageParser<TimingParams> _parser = new pb::MessageParser<TimingParams>(() => new TimingParams());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimingParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimingParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimingParams(TimingParams other) : this() {
      target_ = other.target_;
      timingType_ = other.timingType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimingParams Clone() {
      return new TimingParams(this);
    }

    /// <summary>Field number for the "Target" field.</summary>
    public const int TargetFieldNumber = 2;
    private long target_;
    /// <summary>
    /// Target to seek to in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "TimingType" field.</summary>
    public const int TimingTypeFieldNumber = 3;
    private global::com.tiledmedia.clearvr.cvrinterface.TimingType timingType_ = 0;
    /// <summary>
    /// Timing type describing interpretation of the Target
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.TimingType TimingType {
      get { return timingType_; }
      set {
        timingType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimingParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimingParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Target != other.Target) return false;
      if (TimingType != other.TimingType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Target != 0L) hash ^= Target.GetHashCode();
      if (TimingType != 0) hash ^= TimingType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Target != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Target);
      }
      if (TimingType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) TimingType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Target != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Target);
      }
      if (TimingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimingType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimingParams other) {
      if (other == null) {
        return;
      }
      if (other.Target != 0L) {
        Target = other.Target;
      }
      if (other.TimingType != 0) {
        TimingType = other.TimingType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Target = input.ReadInt64();
            break;
          }
          case 24: {
            timingType_ = (global::com.tiledmedia.clearvr.cvrinterface.TimingType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeviceParams : pb::IMessage<DeviceParams> {
    private static readonly pb::MessageParser<DeviceParams> _parser = new pb::MessageParser<DeviceParams>(() => new DeviceParams());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceParams(DeviceParams other) : this() {
      deviceType_ = other.deviceType_;
      screenWidth_ = other.screenWidth_;
      screenHeight_ = other.screenHeight_;
      deviceName_ = other.deviceName_;
      oSVersion_ = other.oSVersion_;
      chipset_ = other.chipset_;
      DecodingCaps = other.decodingCaps_ != null ? other.DecodingCaps.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceParams Clone() {
      return new DeviceParams(this);
    }

    /// <summary>Field number for the "DeviceType" field.</summary>
    public const int DeviceTypeFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.DeviceType deviceType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.DeviceType DeviceType {
      get { return deviceType_; }
      set {
        deviceType_ = value;
      }
    }

    /// <summary>Field number for the "ScreenWidth" field.</summary>
    public const int ScreenWidthFieldNumber = 2;
    private uint screenWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScreenWidth {
      get { return screenWidth_; }
      set {
        screenWidth_ = value;
      }
    }

    /// <summary>Field number for the "ScreenHeight" field.</summary>
    public const int ScreenHeightFieldNumber = 3;
    private uint screenHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScreenHeight {
      get { return screenHeight_; }
      set {
        screenHeight_ = value;
      }
    }

    /// <summary>Field number for the "DeviceName" field.</summary>
    public const int DeviceNameFieldNumber = 4;
    private string deviceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OSVersion" field.</summary>
    public const int OSVersionFieldNumber = 5;
    private double oSVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OSVersion {
      get { return oSVersion_; }
      set {
        oSVersion_ = value;
      }
    }

    /// <summary>Field number for the "Chipset" field.</summary>
    public const int ChipsetFieldNumber = 6;
    private string chipset_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Chipset {
      get { return chipset_; }
      set {
        chipset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DecodingCaps" field.</summary>
    public const int DecodingCapsFieldNumber = 7;
    private global::com.tiledmedia.clearvr.cvrinterface.DeviceDecodingCapabilities decodingCaps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.DeviceDecodingCapabilities DecodingCaps {
      get { return decodingCaps_; }
      set {
        decodingCaps_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceType != other.DeviceType) return false;
      if (ScreenWidth != other.ScreenWidth) return false;
      if (ScreenHeight != other.ScreenHeight) return false;
      if (DeviceName != other.DeviceName) return false;
      if (OSVersion != other.OSVersion) return false;
      if (Chipset != other.Chipset) return false;
      if (!object.Equals(DecodingCaps, other.DecodingCaps)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceType != 0) hash ^= DeviceType.GetHashCode();
      if (ScreenWidth != 0) hash ^= ScreenWidth.GetHashCode();
      if (ScreenHeight != 0) hash ^= ScreenHeight.GetHashCode();
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      if (OSVersion != 0D) hash ^= OSVersion.GetHashCode();
      if (Chipset.Length != 0) hash ^= Chipset.GetHashCode();
      if (decodingCaps_ != null) hash ^= DecodingCaps.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DeviceType);
      }
      if (ScreenWidth != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ScreenWidth);
      }
      if (ScreenHeight != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ScreenHeight);
      }
      if (DeviceName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DeviceName);
      }
      if (OSVersion != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(OSVersion);
      }
      if (Chipset.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Chipset);
      }
      if (decodingCaps_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DecodingCaps);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeviceType);
      }
      if (ScreenWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScreenWidth);
      }
      if (ScreenHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScreenHeight);
      }
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (OSVersion != 0D) {
        size += 1 + 8;
      }
      if (Chipset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Chipset);
      }
      if (decodingCaps_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DecodingCaps);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceParams other) {
      if (other == null) {
        return;
      }
      if (other.DeviceType != 0) {
        DeviceType = other.DeviceType;
      }
      if (other.ScreenWidth != 0) {
        ScreenWidth = other.ScreenWidth;
      }
      if (other.ScreenHeight != 0) {
        ScreenHeight = other.ScreenHeight;
      }
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      if (other.OSVersion != 0D) {
        OSVersion = other.OSVersion;
      }
      if (other.Chipset.Length != 0) {
        Chipset = other.Chipset;
      }
      if (other.decodingCaps_ != null) {
        if (decodingCaps_ == null) {
          decodingCaps_ = new global::com.tiledmedia.clearvr.cvrinterface.DeviceDecodingCapabilities();
        }
        DecodingCaps.MergeFrom(other.DecodingCaps);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            deviceType_ = (global::com.tiledmedia.clearvr.cvrinterface.DeviceType) input.ReadEnum();
            break;
          }
          case 16: {
            ScreenWidth = input.ReadUInt32();
            break;
          }
          case 24: {
            ScreenHeight = input.ReadUInt32();
            break;
          }
          case 34: {
            DeviceName = input.ReadString();
            break;
          }
          case 41: {
            OSVersion = input.ReadDouble();
            break;
          }
          case 50: {
            Chipset = input.ReadString();
            break;
          }
          case 58: {
            if (decodingCaps_ == null) {
              decodingCaps_ = new global::com.tiledmedia.clearvr.cvrinterface.DeviceDecodingCapabilities();
            }
            input.ReadMessage(decodingCaps_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeviceDecodingCapabilities : pb::IMessage<DeviceDecodingCapabilities> {
    private static readonly pb::MessageParser<DeviceDecodingCapabilities> _parser = new pb::MessageParser<DeviceDecodingCapabilities>(() => new DeviceDecodingCapabilities());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceDecodingCapabilities> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceDecodingCapabilities() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceDecodingCapabilities(DeviceDecodingCapabilities other) : this() {
      AVC = other.aVC_ != null ? other.AVC.Clone() : null;
      HEVC = other.hEVC_ != null ? other.HEVC.Clone() : null;
      AV1 = other.aV1_ != null ? other.AV1.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceDecodingCapabilities Clone() {
      return new DeviceDecodingCapabilities(this);
    }

    /// <summary>Field number for the "AVC" field.</summary>
    public const int AVCFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.CodecSpecificDecodingCapabilities aVC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.CodecSpecificDecodingCapabilities AVC {
      get { return aVC_; }
      set {
        aVC_ = value;
      }
    }

    /// <summary>Field number for the "HEVC" field.</summary>
    public const int HEVCFieldNumber = 2;
    private global::com.tiledmedia.clearvr.cvrinterface.CodecSpecificDecodingCapabilities hEVC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.CodecSpecificDecodingCapabilities HEVC {
      get { return hEVC_; }
      set {
        hEVC_ = value;
      }
    }

    /// <summary>Field number for the "AV1" field.</summary>
    public const int AV1FieldNumber = 3;
    private global::com.tiledmedia.clearvr.cvrinterface.CodecSpecificDecodingCapabilities aV1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.CodecSpecificDecodingCapabilities AV1 {
      get { return aV1_; }
      set {
        aV1_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceDecodingCapabilities);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceDecodingCapabilities other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AVC, other.AVC)) return false;
      if (!object.Equals(HEVC, other.HEVC)) return false;
      if (!object.Equals(AV1, other.AV1)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (aVC_ != null) hash ^= AVC.GetHashCode();
      if (hEVC_ != null) hash ^= HEVC.GetHashCode();
      if (aV1_ != null) hash ^= AV1.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (aVC_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AVC);
      }
      if (hEVC_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HEVC);
      }
      if (aV1_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AV1);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (aVC_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AVC);
      }
      if (hEVC_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HEVC);
      }
      if (aV1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AV1);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceDecodingCapabilities other) {
      if (other == null) {
        return;
      }
      if (other.aVC_ != null) {
        if (aVC_ == null) {
          aVC_ = new global::com.tiledmedia.clearvr.cvrinterface.CodecSpecificDecodingCapabilities();
        }
        AVC.MergeFrom(other.AVC);
      }
      if (other.hEVC_ != null) {
        if (hEVC_ == null) {
          hEVC_ = new global::com.tiledmedia.clearvr.cvrinterface.CodecSpecificDecodingCapabilities();
        }
        HEVC.MergeFrom(other.HEVC);
      }
      if (other.aV1_ != null) {
        if (aV1_ == null) {
          aV1_ = new global::com.tiledmedia.clearvr.cvrinterface.CodecSpecificDecodingCapabilities();
        }
        AV1.MergeFrom(other.AV1);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (aVC_ == null) {
              aVC_ = new global::com.tiledmedia.clearvr.cvrinterface.CodecSpecificDecodingCapabilities();
            }
            input.ReadMessage(aVC_);
            break;
          }
          case 18: {
            if (hEVC_ == null) {
              hEVC_ = new global::com.tiledmedia.clearvr.cvrinterface.CodecSpecificDecodingCapabilities();
            }
            input.ReadMessage(hEVC_);
            break;
          }
          case 26: {
            if (aV1_ == null) {
              aV1_ = new global::com.tiledmedia.clearvr.cvrinterface.CodecSpecificDecodingCapabilities();
            }
            input.ReadMessage(aV1_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CodecSpecificDecodingCapabilities : pb::IMessage<CodecSpecificDecodingCapabilities> {
    private static readonly pb::MessageParser<CodecSpecificDecodingCapabilities> _parser = new pb::MessageParser<CodecSpecificDecodingCapabilities>(() => new CodecSpecificDecodingCapabilities());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CodecSpecificDecodingCapabilities> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CodecSpecificDecodingCapabilities() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CodecSpecificDecodingCapabilities(CodecSpecificDecodingCapabilities other) : this() {
      decoders_ = other.decoders_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CodecSpecificDecodingCapabilities Clone() {
      return new CodecSpecificDecodingCapabilities(this);
    }

    /// <summary>Field number for the "Decoders" field.</summary>
    public const int DecodersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.tiledmedia.clearvr.cvrinterface.Decoder> _repeated_decoders_codec
        = pb::FieldCodec.ForMessage(10, global::com.tiledmedia.clearvr.cvrinterface.Decoder.Parser);
    private readonly pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.Decoder> decoders_ = new pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.Decoder>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.Decoder> Decoders {
      get { return decoders_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CodecSpecificDecodingCapabilities);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CodecSpecificDecodingCapabilities other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!decoders_.Equals(other.decoders_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= decoders_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      decoders_.WriteTo(output, _repeated_decoders_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += decoders_.CalculateSize(_repeated_decoders_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CodecSpecificDecodingCapabilities other) {
      if (other == null) {
        return;
      }
      decoders_.Add(other.decoders_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            decoders_.AddEntriesFrom(input, _repeated_decoders_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Decoder : pb::IMessage<Decoder> {
    private static readonly pb::MessageParser<Decoder> _parser = new pb::MessageParser<Decoder>(() => new Decoder());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Decoder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decoder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decoder(Decoder other) : this() {
      decoderName_ = other.decoderName_;
      decoderFlags_ = other.decoderFlags_;
      profileCapabilities_ = other.profileCapabilities_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decoder Clone() {
      return new Decoder(this);
    }

    /// <summary>Field number for the "DecoderName" field.</summary>
    public const int DecoderNameFieldNumber = 1;
    private string decoderName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DecoderName {
      get { return decoderName_; }
      set {
        decoderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DecoderFlags" field.</summary>
    public const int DecoderFlagsFieldNumber = 2;
    private uint decoderFlags_;
    /// <summary>
    /// Set using DecoderFlags
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DecoderFlags {
      get { return decoderFlags_; }
      set {
        decoderFlags_ = value;
      }
    }

    /// <summary>Field number for the "ProfileCapabilities" field.</summary>
    public const int ProfileCapabilitiesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::com.tiledmedia.clearvr.cvrinterface.DecoderProfileCapabilities> _repeated_profileCapabilities_codec
        = pb::FieldCodec.ForMessage(26, global::com.tiledmedia.clearvr.cvrinterface.DecoderProfileCapabilities.Parser);
    private readonly pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.DecoderProfileCapabilities> profileCapabilities_ = new pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.DecoderProfileCapabilities>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.DecoderProfileCapabilities> ProfileCapabilities {
      get { return profileCapabilities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Decoder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Decoder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DecoderName != other.DecoderName) return false;
      if (DecoderFlags != other.DecoderFlags) return false;
      if(!profileCapabilities_.Equals(other.profileCapabilities_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DecoderName.Length != 0) hash ^= DecoderName.GetHashCode();
      if (DecoderFlags != 0) hash ^= DecoderFlags.GetHashCode();
      hash ^= profileCapabilities_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DecoderName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DecoderName);
      }
      if (DecoderFlags != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DecoderFlags);
      }
      profileCapabilities_.WriteTo(output, _repeated_profileCapabilities_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DecoderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DecoderName);
      }
      if (DecoderFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DecoderFlags);
      }
      size += profileCapabilities_.CalculateSize(_repeated_profileCapabilities_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Decoder other) {
      if (other == null) {
        return;
      }
      if (other.DecoderName.Length != 0) {
        DecoderName = other.DecoderName;
      }
      if (other.DecoderFlags != 0) {
        DecoderFlags = other.DecoderFlags;
      }
      profileCapabilities_.Add(other.profileCapabilities_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DecoderName = input.ReadString();
            break;
          }
          case 16: {
            DecoderFlags = input.ReadUInt32();
            break;
          }
          case 26: {
            profileCapabilities_.AddEntriesFrom(input, _repeated_profileCapabilities_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DecoderProfileCapabilities : pb::IMessage<DecoderProfileCapabilities> {
    private static readonly pb::MessageParser<DecoderProfileCapabilities> _parser = new pb::MessageParser<DecoderProfileCapabilities>(() => new DecoderProfileCapabilities());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecoderProfileCapabilities> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecoderProfileCapabilities() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecoderProfileCapabilities(DecoderProfileCapabilities other) : this() {
      profile_ = other.profile_;
      AbsoluteResolutionLimit = other.absoluteResolutionLimit_ != null ? other.AbsoluteResolutionLimit.Clone() : null;
      level_ = other.level_;
      secureDecoderMaximumTileSlotCount_ = other.secureDecoderMaximumTileSlotCount_;
      maximumNumberOfInstances_ = other.maximumNumberOfInstances_;
      decoderLimits_ = other.decoderLimits_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecoderProfileCapabilities Clone() {
      return new DecoderProfileCapabilities(this);
    }

    /// <summary>Field number for the "Profile" field.</summary>
    public const int ProfileFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.VideoCodecProfile profile_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.VideoCodecProfile Profile {
      get { return profile_; }
      set {
        profile_ = value;
      }
    }

    /// <summary>Field number for the "AbsoluteResolutionLimit" field.</summary>
    public const int AbsoluteResolutionLimitFieldNumber = 2;
    private global::com.tiledmedia.clearvr.cvrinterface.Resolution absoluteResolutionLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.Resolution AbsoluteResolutionLimit {
      get { return absoluteResolutionLimit_; }
      set {
        absoluteResolutionLimit_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 4;
    private string level_ = "";
    /// <summary>
    /// E.g. "5.1"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Level {
      get { return level_; }
      set {
        level_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecureDecoderMaximumTileSlotCount" field.</summary>
    public const int SecureDecoderMaximumTileSlotCountFieldNumber = 5;
    private uint secureDecoderMaximumTileSlotCount_;
    /// <summary>
    /// Not used in the core as of yet. Previously known as 'config.max_secure_tiles'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecureDecoderMaximumTileSlotCount {
      get { return secureDecoderMaximumTileSlotCount_; }
      set {
        secureDecoderMaximumTileSlotCount_ = value;
      }
    }

    /// <summary>Field number for the "MaximumNumberOfInstances" field.</summary>
    public const int MaximumNumberOfInstancesFieldNumber = 6;
    private uint maximumNumberOfInstances_;
    /// <summary>
    /// The maximum number of concurrent instances the device can support.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaximumNumberOfInstances {
      get { return maximumNumberOfInstances_; }
      set {
        maximumNumberOfInstances_ = value;
      }
    }

    /// <summary>Field number for the "DecoderLimits" field.</summary>
    public const int DecoderLimitsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::com.tiledmedia.clearvr.cvrinterface.DecoderLimit> _repeated_decoderLimits_codec
        = pb::FieldCodec.ForMessage(58, global::com.tiledmedia.clearvr.cvrinterface.DecoderLimit.Parser);
    private readonly pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.DecoderLimit> decoderLimits_ = new pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.DecoderLimit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.DecoderLimit> DecoderLimits {
      get { return decoderLimits_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecoderProfileCapabilities);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecoderProfileCapabilities other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Profile != other.Profile) return false;
      if (!object.Equals(AbsoluteResolutionLimit, other.AbsoluteResolutionLimit)) return false;
      if (Level != other.Level) return false;
      if (SecureDecoderMaximumTileSlotCount != other.SecureDecoderMaximumTileSlotCount) return false;
      if (MaximumNumberOfInstances != other.MaximumNumberOfInstances) return false;
      if(!decoderLimits_.Equals(other.decoderLimits_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Profile != 0) hash ^= Profile.GetHashCode();
      if (absoluteResolutionLimit_ != null) hash ^= AbsoluteResolutionLimit.GetHashCode();
      if (Level.Length != 0) hash ^= Level.GetHashCode();
      if (SecureDecoderMaximumTileSlotCount != 0) hash ^= SecureDecoderMaximumTileSlotCount.GetHashCode();
      if (MaximumNumberOfInstances != 0) hash ^= MaximumNumberOfInstances.GetHashCode();
      hash ^= decoderLimits_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Profile != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Profile);
      }
      if (absoluteResolutionLimit_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AbsoluteResolutionLimit);
      }
      if (Level.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Level);
      }
      if (SecureDecoderMaximumTileSlotCount != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SecureDecoderMaximumTileSlotCount);
      }
      if (MaximumNumberOfInstances != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MaximumNumberOfInstances);
      }
      decoderLimits_.WriteTo(output, _repeated_decoderLimits_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Profile != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Profile);
      }
      if (absoluteResolutionLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AbsoluteResolutionLimit);
      }
      if (Level.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Level);
      }
      if (SecureDecoderMaximumTileSlotCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecureDecoderMaximumTileSlotCount);
      }
      if (MaximumNumberOfInstances != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaximumNumberOfInstances);
      }
      size += decoderLimits_.CalculateSize(_repeated_decoderLimits_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecoderProfileCapabilities other) {
      if (other == null) {
        return;
      }
      if (other.Profile != 0) {
        Profile = other.Profile;
      }
      if (other.absoluteResolutionLimit_ != null) {
        if (absoluteResolutionLimit_ == null) {
          absoluteResolutionLimit_ = new global::com.tiledmedia.clearvr.cvrinterface.Resolution();
        }
        AbsoluteResolutionLimit.MergeFrom(other.AbsoluteResolutionLimit);
      }
      if (other.Level.Length != 0) {
        Level = other.Level;
      }
      if (other.SecureDecoderMaximumTileSlotCount != 0) {
        SecureDecoderMaximumTileSlotCount = other.SecureDecoderMaximumTileSlotCount;
      }
      if (other.MaximumNumberOfInstances != 0) {
        MaximumNumberOfInstances = other.MaximumNumberOfInstances;
      }
      decoderLimits_.Add(other.decoderLimits_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            profile_ = (global::com.tiledmedia.clearvr.cvrinterface.VideoCodecProfile) input.ReadEnum();
            break;
          }
          case 18: {
            if (absoluteResolutionLimit_ == null) {
              absoluteResolutionLimit_ = new global::com.tiledmedia.clearvr.cvrinterface.Resolution();
            }
            input.ReadMessage(absoluteResolutionLimit_);
            break;
          }
          case 34: {
            Level = input.ReadString();
            break;
          }
          case 40: {
            SecureDecoderMaximumTileSlotCount = input.ReadUInt32();
            break;
          }
          case 48: {
            MaximumNumberOfInstances = input.ReadUInt32();
            break;
          }
          case 58: {
            decoderLimits_.AddEntriesFrom(input, _repeated_decoderLimits_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DecoderLimit : pb::IMessage<DecoderLimit> {
    private static readonly pb::MessageParser<DecoderLimit> _parser = new pb::MessageParser<DecoderLimit>(() => new DecoderLimit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecoderLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecoderLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecoderLimit(DecoderLimit other) : this() {
      Resolution = other.resolution_ != null ? other.Resolution.Clone() : null;
      framerate_ = other.framerate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecoderLimit Clone() {
      return new DecoderLimit(this);
    }

    /// <summary>Field number for the "Resolution" field.</summary>
    public const int ResolutionFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.Resolution resolution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.Resolution Resolution {
      get { return resolution_; }
      set {
        resolution_ = value;
      }
    }

    /// <summary>Field number for the "Framerate" field.</summary>
    public const int FramerateFieldNumber = 2;
    private float framerate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Framerate {
      get { return framerate_; }
      set {
        framerate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecoderLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecoderLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Resolution, other.Resolution)) return false;
      if (Framerate != other.Framerate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resolution_ != null) hash ^= Resolution.GetHashCode();
      if (Framerate != 0F) hash ^= Framerate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resolution_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Resolution);
      }
      if (Framerate != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Framerate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resolution_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resolution);
      }
      if (Framerate != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecoderLimit other) {
      if (other == null) {
        return;
      }
      if (other.resolution_ != null) {
        if (resolution_ == null) {
          resolution_ = new global::com.tiledmedia.clearvr.cvrinterface.Resolution();
        }
        Resolution.MergeFrom(other.Resolution);
      }
      if (other.Framerate != 0F) {
        Framerate = other.Framerate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (resolution_ == null) {
              resolution_ = new global::com.tiledmedia.clearvr.cvrinterface.Resolution();
            }
            input.ReadMessage(resolution_);
            break;
          }
          case 21: {
            Framerate = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Resolution : pb::IMessage<Resolution> {
    private static readonly pb::MessageParser<Resolution> _parser = new pb::MessageParser<Resolution>(() => new Resolution());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Resolution> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resolution() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resolution(Resolution other) : this() {
      width_ = other.width_;
      height_ = other.height_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resolution Clone() {
      return new Resolution(this);
    }

    /// <summary>Field number for the "Width" field.</summary>
    public const int WidthFieldNumber = 1;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "Height" field.</summary>
    public const int HeightFieldNumber = 2;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Resolution);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Resolution other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Height);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Resolution other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Width = input.ReadUInt32();
            break;
          }
          case 16: {
            Height = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PopulateMediaInfoParams : pb::IMessage<PopulateMediaInfoParams> {
    private static readonly pb::MessageParser<PopulateMediaInfoParams> _parser = new pb::MessageParser<PopulateMediaInfoParams>(() => new PopulateMediaInfoParams());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PopulateMediaInfoParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopulateMediaInfoParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopulateMediaInfoParams(PopulateMediaInfoParams other) : this() {
      ContentItem = other.contentItem_ != null ? other.ContentItem.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopulateMediaInfoParams Clone() {
      return new PopulateMediaInfoParams(this);
    }

    /// <summary>Field number for the "ContentItem" field.</summary>
    public const int ContentItemFieldNumber = 2;
    private global::com.tiledmedia.clearvr.cvrinterface.ContentItem contentItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ContentItem ContentItem {
      get { return contentItem_; }
      set {
        contentItem_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PopulateMediaInfoParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PopulateMediaInfoParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ContentItem, other.ContentItem)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contentItem_ != null) hash ^= ContentItem.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contentItem_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ContentItem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contentItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContentItem);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PopulateMediaInfoParams other) {
      if (other == null) {
        return;
      }
      if (other.contentItem_ != null) {
        if (contentItem_ == null) {
          contentItem_ = new global::com.tiledmedia.clearvr.cvrinterface.ContentItem();
        }
        ContentItem.MergeFrom(other.ContentItem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (contentItem_ == null) {
              contentItem_ = new global::com.tiledmedia.clearvr.cvrinterface.ContentItem();
            }
            input.ReadMessage(contentItem_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CheckIsSupportedParams : pb::IMessage<CheckIsSupportedParams> {
    private static readonly pb::MessageParser<CheckIsSupportedParams> _parser = new pb::MessageParser<CheckIsSupportedParams>(() => new CheckIsSupportedParams());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckIsSupportedParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckIsSupportedParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckIsSupportedParams(CheckIsSupportedParams other) : this() {
      contentItems_ = other.contentItems_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckIsSupportedParams Clone() {
      return new CheckIsSupportedParams(this);
    }

    /// <summary>Field number for the "ContentItems" field.</summary>
    public const int ContentItemsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::com.tiledmedia.clearvr.cvrinterface.ContentItem> _repeated_contentItems_codec
        = pb::FieldCodec.ForMessage(82, global::com.tiledmedia.clearvr.cvrinterface.ContentItem.Parser);
    private readonly pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.ContentItem> contentItems_ = new pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.ContentItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.ContentItem> ContentItems {
      get { return contentItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckIsSupportedParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckIsSupportedParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!contentItems_.Equals(other.contentItems_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= contentItems_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      contentItems_.WriteTo(output, _repeated_contentItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += contentItems_.CalculateSize(_repeated_contentItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckIsSupportedParams other) {
      if (other == null) {
        return;
      }
      contentItems_.Add(other.contentItems_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 82: {
            contentItems_.AddEntriesFrom(input, _repeated_contentItems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CheckIsSupportedReport : pb::IMessage<CheckIsSupportedReport> {
    private static readonly pb::MessageParser<CheckIsSupportedReport> _parser = new pb::MessageParser<CheckIsSupportedReport>(() => new CheckIsSupportedReport());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckIsSupportedReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckIsSupportedReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckIsSupportedReport(CheckIsSupportedReport other) : this() {
      errorCode_ = other.errorCode_;
      errorMessage_ = other.errorMessage_;
      isSupported_ = other.isSupported_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckIsSupportedReport Clone() {
      return new CheckIsSupportedReport(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private int errorCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "ErrorMessage" field.</summary>
    public const int ErrorMessageFieldNumber = 2;
    private string errorMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsSupported" field.</summary>
    public const int IsSupportedFieldNumber = 3;
    private static readonly pb::FieldCodec<global::com.tiledmedia.clearvr.cvrinterface.IsSupportedResult> _repeated_isSupported_codec
        = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::com.tiledmedia.clearvr.cvrinterface.IsSupportedResult) x);
    private readonly pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.IsSupportedResult> isSupported_ = new pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.IsSupportedResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.IsSupportedResult> IsSupported {
      get { return isSupported_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckIsSupportedReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckIsSupportedReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if(!isSupported_.Equals(other.isSupported_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      hash ^= isSupported_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrorCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorMessage);
      }
      isSupported_.WriteTo(output, _repeated_isSupported_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      size += isSupported_.CalculateSize(_repeated_isSupported_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckIsSupportedReport other) {
      if (other == null) {
        return;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      isSupported_.Add(other.isSupported_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 18: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            isSupported_.AddEntriesFrom(input, _repeated_isSupported_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// To be renamed to FeedConfiguration
  /// </summary>
  public sealed partial class SetFeedLayoutParams : pb::IMessage<SetFeedLayoutParams> {
    private static readonly pb::MessageParser<SetFeedLayoutParams> _parser = new pb::MessageParser<SetFeedLayoutParams>(() => new SetFeedLayoutParams());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetFeedLayoutParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFeedLayoutParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFeedLayoutParams(SetFeedLayoutParams other) : this() {
      displayObjectMapping_ = other.displayObjectMapping_.Clone();
      audioFeedId_ = other.audioFeedId_;
      audioTrackIdx_ = other.audioTrackIdx_;
      subtitleFeedId_ = other.subtitleFeedId_;
      subtitleTrackIdx_ = other.subtitleTrackIdx_;
      preferredAudioLanguage_ = other.preferredAudioLanguage_;
      preferredSubtitlesLanguage_ = other.preferredSubtitlesLanguage_;
      disableFallbackSwitch_ = other.disableFallbackSwitch_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFeedLayoutParams Clone() {
      return new SetFeedLayoutParams(this);
    }

    /// <summary>Field number for the "DisplayObjectMapping" field.</summary>
    public const int DisplayObjectMappingFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.tiledmedia.clearvr.cvrinterface.DisplayObjectFeedTriple> _repeated_displayObjectMapping_codec
        = pb::FieldCodec.ForMessage(10, global::com.tiledmedia.clearvr.cvrinterface.DisplayObjectFeedTriple.Parser);
    private readonly pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.DisplayObjectFeedTriple> displayObjectMapping_ = new pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.DisplayObjectFeedTriple>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.DisplayObjectFeedTriple> DisplayObjectMapping {
      get { return displayObjectMapping_; }
    }

    /// <summary>Field number for the "AudioFeedId" field.</summary>
    public const int AudioFeedIdFieldNumber = 2;
    private int audioFeedId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AudioFeedId {
      get { return audioFeedId_; }
      set {
        audioFeedId_ = value;
      }
    }

    /// <summary>Field number for the "AudioTrackIdx" field.</summary>
    public const int AudioTrackIdxFieldNumber = 3;
    private int audioTrackIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AudioTrackIdx {
      get { return audioTrackIdx_; }
      set {
        audioTrackIdx_ = value;
      }
    }

    /// <summary>Field number for the "SubtitleFeedId" field.</summary>
    public const int SubtitleFeedIdFieldNumber = 4;
    private int subtitleFeedId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubtitleFeedId {
      get { return subtitleFeedId_; }
      set {
        subtitleFeedId_ = value;
      }
    }

    /// <summary>Field number for the "SubtitleTrackIdx" field.</summary>
    public const int SubtitleTrackIdxFieldNumber = 5;
    private int subtitleTrackIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubtitleTrackIdx {
      get { return subtitleTrackIdx_; }
      set {
        subtitleTrackIdx_ = value;
      }
    }

    /// <summary>Field number for the "PreferredAudioLanguage" field.</summary>
    public const int PreferredAudioLanguageFieldNumber = 6;
    private string preferredAudioLanguage_ = "";
    /// <summary>
    /// Will only be considered if AudioTrackIdx is set to -2 (automatic)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreferredAudioLanguage {
      get { return preferredAudioLanguage_; }
      set {
        preferredAudioLanguage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PreferredSubtitlesLanguage" field.</summary>
    public const int PreferredSubtitlesLanguageFieldNumber = 7;
    private string preferredSubtitlesLanguage_ = "";
    /// <summary>
    /// Will only be considered if SubtitleTrackIdx is set to -2 (automatic)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreferredSubtitlesLanguage {
      get { return preferredSubtitlesLanguage_; }
      set {
        preferredSubtitlesLanguage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DisableFallbackSwitch" field.</summary>
    public const int DisableFallbackSwitchFieldNumber = 8;
    private bool disableFallbackSwitch_;
    /// <summary>
    /// When set, layout switches will not (temporarily) use composite feeds (when possible)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableFallbackSwitch {
      get { return disableFallbackSwitch_; }
      set {
        disableFallbackSwitch_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 9;
    private string name_ = "";
    /// <summary>
    /// Used by the SDK layer, not by the core
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetFeedLayoutParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetFeedLayoutParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!displayObjectMapping_.Equals(other.displayObjectMapping_)) return false;
      if (AudioFeedId != other.AudioFeedId) return false;
      if (AudioTrackIdx != other.AudioTrackIdx) return false;
      if (SubtitleFeedId != other.SubtitleFeedId) return false;
      if (SubtitleTrackIdx != other.SubtitleTrackIdx) return false;
      if (PreferredAudioLanguage != other.PreferredAudioLanguage) return false;
      if (PreferredSubtitlesLanguage != other.PreferredSubtitlesLanguage) return false;
      if (DisableFallbackSwitch != other.DisableFallbackSwitch) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= displayObjectMapping_.GetHashCode();
      if (AudioFeedId != 0) hash ^= AudioFeedId.GetHashCode();
      if (AudioTrackIdx != 0) hash ^= AudioTrackIdx.GetHashCode();
      if (SubtitleFeedId != 0) hash ^= SubtitleFeedId.GetHashCode();
      if (SubtitleTrackIdx != 0) hash ^= SubtitleTrackIdx.GetHashCode();
      if (PreferredAudioLanguage.Length != 0) hash ^= PreferredAudioLanguage.GetHashCode();
      if (PreferredSubtitlesLanguage.Length != 0) hash ^= PreferredSubtitlesLanguage.GetHashCode();
      if (DisableFallbackSwitch != false) hash ^= DisableFallbackSwitch.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      displayObjectMapping_.WriteTo(output, _repeated_displayObjectMapping_codec);
      if (AudioFeedId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AudioFeedId);
      }
      if (AudioTrackIdx != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AudioTrackIdx);
      }
      if (SubtitleFeedId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SubtitleFeedId);
      }
      if (SubtitleTrackIdx != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SubtitleTrackIdx);
      }
      if (PreferredAudioLanguage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PreferredAudioLanguage);
      }
      if (PreferredSubtitlesLanguage.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PreferredSubtitlesLanguage);
      }
      if (DisableFallbackSwitch != false) {
        output.WriteRawTag(64);
        output.WriteBool(DisableFallbackSwitch);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += displayObjectMapping_.CalculateSize(_repeated_displayObjectMapping_codec);
      if (AudioFeedId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AudioFeedId);
      }
      if (AudioTrackIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AudioTrackIdx);
      }
      if (SubtitleFeedId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubtitleFeedId);
      }
      if (SubtitleTrackIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubtitleTrackIdx);
      }
      if (PreferredAudioLanguage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PreferredAudioLanguage);
      }
      if (PreferredSubtitlesLanguage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PreferredSubtitlesLanguage);
      }
      if (DisableFallbackSwitch != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetFeedLayoutParams other) {
      if (other == null) {
        return;
      }
      displayObjectMapping_.Add(other.displayObjectMapping_);
      if (other.AudioFeedId != 0) {
        AudioFeedId = other.AudioFeedId;
      }
      if (other.AudioTrackIdx != 0) {
        AudioTrackIdx = other.AudioTrackIdx;
      }
      if (other.SubtitleFeedId != 0) {
        SubtitleFeedId = other.SubtitleFeedId;
      }
      if (other.SubtitleTrackIdx != 0) {
        SubtitleTrackIdx = other.SubtitleTrackIdx;
      }
      if (other.PreferredAudioLanguage.Length != 0) {
        PreferredAudioLanguage = other.PreferredAudioLanguage;
      }
      if (other.PreferredSubtitlesLanguage.Length != 0) {
        PreferredSubtitlesLanguage = other.PreferredSubtitlesLanguage;
      }
      if (other.DisableFallbackSwitch != false) {
        DisableFallbackSwitch = other.DisableFallbackSwitch;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            displayObjectMapping_.AddEntriesFrom(input, _repeated_displayObjectMapping_codec);
            break;
          }
          case 16: {
            AudioFeedId = input.ReadInt32();
            break;
          }
          case 24: {
            AudioTrackIdx = input.ReadInt32();
            break;
          }
          case 32: {
            SubtitleFeedId = input.ReadInt32();
            break;
          }
          case 40: {
            SubtitleTrackIdx = input.ReadInt32();
            break;
          }
          case 50: {
            PreferredAudioLanguage = input.ReadString();
            break;
          }
          case 58: {
            PreferredSubtitlesLanguage = input.ReadString();
            break;
          }
          case 64: {
            DisableFallbackSwitch = input.ReadBool();
            break;
          }
          case 74: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DisplayObjectFeedTriple : pb::IMessage<DisplayObjectFeedTriple> {
    private static readonly pb::MessageParser<DisplayObjectFeedTriple> _parser = new pb::MessageParser<DisplayObjectFeedTriple>(() => new DisplayObjectFeedTriple());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisplayObjectFeedTriple> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayObjectFeedTriple() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayObjectFeedTriple(DisplayObjectFeedTriple other) : this() {
      displayObjectId_ = other.displayObjectId_;
      feedId_ = other.feedId_;
      displayObjectClass_ = other.displayObjectClass_;
      forceBundle_ = other.forceBundle_;
      forceBundleIdx_ = other.forceBundleIdx_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayObjectFeedTriple Clone() {
      return new DisplayObjectFeedTriple(this);
    }

    /// <summary>Field number for the "DisplayObjectId" field.</summary>
    public const int DisplayObjectIdFieldNumber = 1;
    private int displayObjectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DisplayObjectId {
      get { return displayObjectId_; }
      set {
        displayObjectId_ = value;
      }
    }

    /// <summary>Field number for the "FeedId" field.</summary>
    public const int FeedIdFieldNumber = 2;
    private int feedId_;
    /// <summary>
    /// Negative value means automatic
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FeedId {
      get { return feedId_; }
      set {
        feedId_ = value;
      }
    }

    /// <summary>Field number for the "DisplayObjectClass" field.</summary>
    public const int DisplayObjectClassFieldNumber = 3;
    private global::com.tiledmedia.clearvr.cvrinterface.DisplayObjectClass displayObjectClass_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.DisplayObjectClass DisplayObjectClass {
      get { return displayObjectClass_; }
      set {
        displayObjectClass_ = value;
      }
    }

    /// <summary>Field number for the "ForceBundle" field.</summary>
    public const int ForceBundleFieldNumber = 4;
    private bool forceBundle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForceBundle {
      get { return forceBundle_; }
      set {
        forceBundle_ = value;
      }
    }

    /// <summary>Field number for the "ForceBundleIdx" field.</summary>
    public const int ForceBundleIdxFieldNumber = 5;
    private int forceBundleIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ForceBundleIdx {
      get { return forceBundleIdx_; }
      set {
        forceBundleIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisplayObjectFeedTriple);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisplayObjectFeedTriple other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DisplayObjectId != other.DisplayObjectId) return false;
      if (FeedId != other.FeedId) return false;
      if (DisplayObjectClass != other.DisplayObjectClass) return false;
      if (ForceBundle != other.ForceBundle) return false;
      if (ForceBundleIdx != other.ForceBundleIdx) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DisplayObjectId != 0) hash ^= DisplayObjectId.GetHashCode();
      if (FeedId != 0) hash ^= FeedId.GetHashCode();
      if (DisplayObjectClass != 0) hash ^= DisplayObjectClass.GetHashCode();
      if (ForceBundle != false) hash ^= ForceBundle.GetHashCode();
      if (ForceBundleIdx != 0) hash ^= ForceBundleIdx.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DisplayObjectId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DisplayObjectId);
      }
      if (FeedId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FeedId);
      }
      if (DisplayObjectClass != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) DisplayObjectClass);
      }
      if (ForceBundle != false) {
        output.WriteRawTag(32);
        output.WriteBool(ForceBundle);
      }
      if (ForceBundleIdx != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ForceBundleIdx);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DisplayObjectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DisplayObjectId);
      }
      if (FeedId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FeedId);
      }
      if (DisplayObjectClass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DisplayObjectClass);
      }
      if (ForceBundle != false) {
        size += 1 + 1;
      }
      if (ForceBundleIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ForceBundleIdx);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisplayObjectFeedTriple other) {
      if (other == null) {
        return;
      }
      if (other.DisplayObjectId != 0) {
        DisplayObjectId = other.DisplayObjectId;
      }
      if (other.FeedId != 0) {
        FeedId = other.FeedId;
      }
      if (other.DisplayObjectClass != 0) {
        DisplayObjectClass = other.DisplayObjectClass;
      }
      if (other.ForceBundle != false) {
        ForceBundle = other.ForceBundle;
      }
      if (other.ForceBundleIdx != 0) {
        ForceBundleIdx = other.ForceBundleIdx;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DisplayObjectId = input.ReadInt32();
            break;
          }
          case 16: {
            FeedId = input.ReadInt32();
            break;
          }
          case 24: {
            displayObjectClass_ = (global::com.tiledmedia.clearvr.cvrinterface.DisplayObjectClass) input.ReadEnum();
            break;
          }
          case 32: {
            ForceBundle = input.ReadBool();
            break;
          }
          case 40: {
            ForceBundleIdx = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimingReport : pb::IMessage<TimingReport> {
    private static readonly pb::MessageParser<TimingReport> _parser = new pb::MessageParser<TimingReport>(() => new TimingReport());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimingReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimingReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimingReport(TimingReport other) : this() {
      errorCode_ = other.errorCode_;
      errorMessage_ = other.errorMessage_;
      timingType_ = other.timingType_;
      currentPosition_ = other.currentPosition_;
      seekLowerBound_ = other.seekLowerBound_;
      seekUpperBound_ = other.seekUpperBound_;
      contentDuration_ = other.contentDuration_;
      eventType_ = other.eventType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimingReport Clone() {
      return new TimingReport(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private int errorCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "ErrorMessage" field.</summary>
    public const int ErrorMessageFieldNumber = 2;
    private string errorMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TimingType" field.</summary>
    public const int TimingTypeFieldNumber = 3;
    private global::com.tiledmedia.clearvr.cvrinterface.TimingType timingType_ = 0;
    /// <summary>
    /// Timing type describing interpretation of the subsequent fields. For VoD/Live ContentTime is supported, and for
    /// Live also wallclock time is supported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.TimingType TimingType {
      get { return timingType_; }
      set {
        timingType_ = value;
      }
    }

    /// <summary>Field number for the "CurrentPosition" field.</summary>
    public const int CurrentPositionFieldNumber = 4;
    private long currentPosition_;
    /// <summary>
    /// Target to seek to (in milliseconds).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentPosition {
      get { return currentPosition_; }
      set {
        currentPosition_ = value;
      }
    }

    /// <summary>Field number for the "SeekLowerBound" field.</summary>
    public const int SeekLowerBoundFieldNumber = 5;
    private long seekLowerBound_;
    /// <summary>
    /// Earliest (lowest) possible position that can be seeked to (in milliseconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SeekLowerBound {
      get { return seekLowerBound_; }
      set {
        seekLowerBound_ = value;
      }
    }

    /// <summary>Field number for the "SeekUpperBound" field.</summary>
    public const int SeekUpperBoundFieldNumber = 6;
    private long seekUpperBound_;
    /// <summary>
    /// Latest (highest) possible position that can be seeked to (in milliseconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SeekUpperBound {
      get { return seekUpperBound_; }
      set {
        seekUpperBound_ = value;
      }
    }

    /// <summary>Field number for the "ContentDuration" field.</summary>
    public const int ContentDurationFieldNumber = 7;
    private long contentDuration_;
    /// <summary>
    /// Duration of the context (in millliseconds). For VoD it equals the seekable range (SeekUpperBound -
    /// SeekLowerBound), whereas for live it is slightly larger than the seekable range due to the client buffer needed
    /// for playback.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ContentDuration {
      get { return contentDuration_; }
      set {
        contentDuration_ = value;
      }
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 8;
    private global::com.tiledmedia.clearvr.cvrinterface.EventType eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.EventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimingReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimingReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if (TimingType != other.TimingType) return false;
      if (CurrentPosition != other.CurrentPosition) return false;
      if (SeekLowerBound != other.SeekLowerBound) return false;
      if (SeekUpperBound != other.SeekUpperBound) return false;
      if (ContentDuration != other.ContentDuration) return false;
      if (EventType != other.EventType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (TimingType != 0) hash ^= TimingType.GetHashCode();
      if (CurrentPosition != 0L) hash ^= CurrentPosition.GetHashCode();
      if (SeekLowerBound != 0L) hash ^= SeekLowerBound.GetHashCode();
      if (SeekUpperBound != 0L) hash ^= SeekUpperBound.GetHashCode();
      if (ContentDuration != 0L) hash ^= ContentDuration.GetHashCode();
      if (EventType != 0) hash ^= EventType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrorCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorMessage);
      }
      if (TimingType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) TimingType);
      }
      if (CurrentPosition != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CurrentPosition);
      }
      if (SeekLowerBound != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SeekLowerBound);
      }
      if (SeekUpperBound != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(SeekUpperBound);
      }
      if (ContentDuration != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ContentDuration);
      }
      if (EventType != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) EventType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (TimingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimingType);
      }
      if (CurrentPosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentPosition);
      }
      if (SeekLowerBound != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SeekLowerBound);
      }
      if (SeekUpperBound != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SeekUpperBound);
      }
      if (ContentDuration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ContentDuration);
      }
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimingReport other) {
      if (other == null) {
        return;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      if (other.TimingType != 0) {
        TimingType = other.TimingType;
      }
      if (other.CurrentPosition != 0L) {
        CurrentPosition = other.CurrentPosition;
      }
      if (other.SeekLowerBound != 0L) {
        SeekLowerBound = other.SeekLowerBound;
      }
      if (other.SeekUpperBound != 0L) {
        SeekUpperBound = other.SeekUpperBound;
      }
      if (other.ContentDuration != 0L) {
        ContentDuration = other.ContentDuration;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 18: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 24: {
            timingType_ = (global::com.tiledmedia.clearvr.cvrinterface.TimingType) input.ReadEnum();
            break;
          }
          case 32: {
            CurrentPosition = input.ReadInt64();
            break;
          }
          case 40: {
            SeekLowerBound = input.ReadInt64();
            break;
          }
          case 48: {
            SeekUpperBound = input.ReadInt64();
            break;
          }
          case 56: {
            ContentDuration = input.ReadInt64();
            break;
          }
          case 64: {
            eventType_ = (global::com.tiledmedia.clearvr.cvrinterface.EventType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SwitchContentParams : pb::IMessage<SwitchContentParams> {
    private static readonly pb::MessageParser<SwitchContentParams> _parser = new pb::MessageParser<SwitchContentParams>(() => new SwitchContentParams());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwitchContentParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwitchContentParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwitchContentParams(SwitchContentParams other) : this() {
      ContentItem = other.contentItem_ != null ? other.ContentItem.Clone() : null;
      StartPositionParams = other.startPositionParams_ != null ? other.StartPositionParams.Clone() : null;
      ViewportAndDisplayObjectPose = other.viewportAndDisplayObjectPose_ != null ? other.ViewportAndDisplayObjectPose.Clone() : null;
      transition_ = other.transition_;
      syncEnabled_ = other.syncEnabled_;
      SyncSettings = other.syncSettings_ != null ? other.SyncSettings.Clone() : null;
      approxDistanceFromLiveEdge_ = other.approxDistanceFromLiveEdge_;
      FeedConfiguration = other.feedConfiguration_ != null ? other.FeedConfiguration.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwitchContentParams Clone() {
      return new SwitchContentParams(this);
    }

    /// <summary>Field number for the "ContentItem" field.</summary>
    public const int ContentItemFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.ContentItem contentItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ContentItem ContentItem {
      get { return contentItem_; }
      set {
        contentItem_ = value;
      }
    }

    /// <summary>Field number for the "StartPositionParams" field.</summary>
    public const int StartPositionParamsFieldNumber = 2;
    private global::com.tiledmedia.clearvr.cvrinterface.TimingParams startPositionParams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.TimingParams StartPositionParams {
      get { return startPositionParams_; }
      set {
        startPositionParams_ = value;
      }
    }

    /// <summary>Field number for the "ViewportAndDisplayObjectPose" field.</summary>
    public const int ViewportAndDisplayObjectPoseFieldNumber = 3;
    private global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose viewportAndDisplayObjectPose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose ViewportAndDisplayObjectPose {
      get { return viewportAndDisplayObjectPose_; }
      set {
        viewportAndDisplayObjectPose_ = value;
      }
    }

    /// <summary>Field number for the "Transition" field.</summary>
    public const int TransitionFieldNumber = 4;
    private global::com.tiledmedia.clearvr.cvrinterface.TransitionType transition_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.TransitionType Transition {
      get { return transition_; }
      set {
        transition_ = value;
      }
    }

    /// <summary>Field number for the "SyncEnabled" field.</summary>
    public const int SyncEnabledFieldNumber = 5;
    private bool syncEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SyncEnabled {
      get { return syncEnabled_; }
      set {
        syncEnabled_ = value;
      }
    }

    /// <summary>Field number for the "SyncSettings" field.</summary>
    public const int SyncSettingsFieldNumber = 6;
    private global::com.tiledmedia.clearvr.cvrinterface.SyncSettings syncSettings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.SyncSettings SyncSettings {
      get { return syncSettings_; }
      set {
        syncSettings_ = value;
      }
    }

    /// <summary>Field number for the "ApproxDistanceFromLiveEdge" field.</summary>
    public const int ApproxDistanceFromLiveEdgeFieldNumber = 7;
    private long approxDistanceFromLiveEdge_;
    /// <summary>
    /// Approximate offset from live edge (in milliseconds). Ignored for non-live
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ApproxDistanceFromLiveEdge {
      get { return approxDistanceFromLiveEdge_; }
      set {
        approxDistanceFromLiveEdge_ = value;
      }
    }

    /// <summary>Field number for the "FeedConfiguration" field.</summary>
    public const int FeedConfigurationFieldNumber = 8;
    private global::com.tiledmedia.clearvr.cvrinterface.SetFeedLayoutParams feedConfiguration_;
    /// <summary>
    /// content. Note that the Core may enforce a minimum value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.SetFeedLayoutParams FeedConfiguration {
      get { return feedConfiguration_; }
      set {
        feedConfiguration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwitchContentParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwitchContentParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ContentItem, other.ContentItem)) return false;
      if (!object.Equals(StartPositionParams, other.StartPositionParams)) return false;
      if (!object.Equals(ViewportAndDisplayObjectPose, other.ViewportAndDisplayObjectPose)) return false;
      if (Transition != other.Transition) return false;
      if (SyncEnabled != other.SyncEnabled) return false;
      if (!object.Equals(SyncSettings, other.SyncSettings)) return false;
      if (ApproxDistanceFromLiveEdge != other.ApproxDistanceFromLiveEdge) return false;
      if (!object.Equals(FeedConfiguration, other.FeedConfiguration)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contentItem_ != null) hash ^= ContentItem.GetHashCode();
      if (startPositionParams_ != null) hash ^= StartPositionParams.GetHashCode();
      if (viewportAndDisplayObjectPose_ != null) hash ^= ViewportAndDisplayObjectPose.GetHashCode();
      if (Transition != 0) hash ^= Transition.GetHashCode();
      if (SyncEnabled != false) hash ^= SyncEnabled.GetHashCode();
      if (syncSettings_ != null) hash ^= SyncSettings.GetHashCode();
      if (ApproxDistanceFromLiveEdge != 0L) hash ^= ApproxDistanceFromLiveEdge.GetHashCode();
      if (feedConfiguration_ != null) hash ^= FeedConfiguration.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contentItem_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContentItem);
      }
      if (startPositionParams_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StartPositionParams);
      }
      if (viewportAndDisplayObjectPose_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ViewportAndDisplayObjectPose);
      }
      if (Transition != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Transition);
      }
      if (SyncEnabled != false) {
        output.WriteRawTag(40);
        output.WriteBool(SyncEnabled);
      }
      if (syncSettings_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SyncSettings);
      }
      if (ApproxDistanceFromLiveEdge != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ApproxDistanceFromLiveEdge);
      }
      if (feedConfiguration_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(FeedConfiguration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contentItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContentItem);
      }
      if (startPositionParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartPositionParams);
      }
      if (viewportAndDisplayObjectPose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ViewportAndDisplayObjectPose);
      }
      if (Transition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Transition);
      }
      if (SyncEnabled != false) {
        size += 1 + 1;
      }
      if (syncSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyncSettings);
      }
      if (ApproxDistanceFromLiveEdge != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ApproxDistanceFromLiveEdge);
      }
      if (feedConfiguration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeedConfiguration);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwitchContentParams other) {
      if (other == null) {
        return;
      }
      if (other.contentItem_ != null) {
        if (contentItem_ == null) {
          contentItem_ = new global::com.tiledmedia.clearvr.cvrinterface.ContentItem();
        }
        ContentItem.MergeFrom(other.ContentItem);
      }
      if (other.startPositionParams_ != null) {
        if (startPositionParams_ == null) {
          startPositionParams_ = new global::com.tiledmedia.clearvr.cvrinterface.TimingParams();
        }
        StartPositionParams.MergeFrom(other.StartPositionParams);
      }
      if (other.viewportAndDisplayObjectPose_ != null) {
        if (viewportAndDisplayObjectPose_ == null) {
          viewportAndDisplayObjectPose_ = new global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose();
        }
        ViewportAndDisplayObjectPose.MergeFrom(other.ViewportAndDisplayObjectPose);
      }
      if (other.Transition != 0) {
        Transition = other.Transition;
      }
      if (other.SyncEnabled != false) {
        SyncEnabled = other.SyncEnabled;
      }
      if (other.syncSettings_ != null) {
        if (syncSettings_ == null) {
          syncSettings_ = new global::com.tiledmedia.clearvr.cvrinterface.SyncSettings();
        }
        SyncSettings.MergeFrom(other.SyncSettings);
      }
      if (other.ApproxDistanceFromLiveEdge != 0L) {
        ApproxDistanceFromLiveEdge = other.ApproxDistanceFromLiveEdge;
      }
      if (other.feedConfiguration_ != null) {
        if (feedConfiguration_ == null) {
          feedConfiguration_ = new global::com.tiledmedia.clearvr.cvrinterface.SetFeedLayoutParams();
        }
        FeedConfiguration.MergeFrom(other.FeedConfiguration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (contentItem_ == null) {
              contentItem_ = new global::com.tiledmedia.clearvr.cvrinterface.ContentItem();
            }
            input.ReadMessage(contentItem_);
            break;
          }
          case 18: {
            if (startPositionParams_ == null) {
              startPositionParams_ = new global::com.tiledmedia.clearvr.cvrinterface.TimingParams();
            }
            input.ReadMessage(startPositionParams_);
            break;
          }
          case 26: {
            if (viewportAndDisplayObjectPose_ == null) {
              viewportAndDisplayObjectPose_ = new global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose();
            }
            input.ReadMessage(viewportAndDisplayObjectPose_);
            break;
          }
          case 32: {
            transition_ = (global::com.tiledmedia.clearvr.cvrinterface.TransitionType) input.ReadEnum();
            break;
          }
          case 40: {
            SyncEnabled = input.ReadBool();
            break;
          }
          case 50: {
            if (syncSettings_ == null) {
              syncSettings_ = new global::com.tiledmedia.clearvr.cvrinterface.SyncSettings();
            }
            input.ReadMessage(syncSettings_);
            break;
          }
          case 56: {
            ApproxDistanceFromLiveEdge = input.ReadInt64();
            break;
          }
          case 66: {
            if (feedConfiguration_ == null) {
              feedConfiguration_ = new global::com.tiledmedia.clearvr.cvrinterface.SetFeedLayoutParams();
            }
            input.ReadMessage(feedConfiguration_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitializeParametersMediaFlow : pb::IMessage<InitializeParametersMediaFlow> {
    private static readonly pb::MessageParser<InitializeParametersMediaFlow> _parser = new pb::MessageParser<InitializeParametersMediaFlow>(() => new InitializeParametersMediaFlow());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeParametersMediaFlow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeParametersMediaFlow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeParametersMediaFlow(InitializeParametersMediaFlow other) : this() {
      CreateContextParams = other.createContextParams_ != null ? other.CreateContextParams.Clone() : null;
      HttpProxyParamsMediaFlow = other.httpProxyParamsMediaFlow_ != null ? other.HttpProxyParamsMediaFlow.Clone() : null;
      HttpsProxyParamsMediaFlow = other.httpsProxyParamsMediaFlow_ != null ? other.HttpsProxyParamsMediaFlow.Clone() : null;
      muteState_ = other.muteState_;
      allowDecoderContraintsInducedStereoToMono_ = other.allowDecoderContraintsInducedStereoToMono_;
      overrideUserAgent_ = other.overrideUserAgent_;
      contentProtectionRobustnessLevel_ = other.contentProtectionRobustnessLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeParametersMediaFlow Clone() {
      return new InitializeParametersMediaFlow(this);
    }

    /// <summary>Field number for the "CreateContextParams" field.</summary>
    public const int CreateContextParamsFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.CreateContextParams createContextParams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.CreateContextParams CreateContextParams {
      get { return createContextParams_; }
      set {
        createContextParams_ = value;
      }
    }

    /// <summary>Field number for the "HttpProxyParamsMediaFlow" field.</summary>
    public const int HttpProxyParamsMediaFlowFieldNumber = 2;
    private global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow httpProxyParamsMediaFlow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow HttpProxyParamsMediaFlow {
      get { return httpProxyParamsMediaFlow_; }
      set {
        httpProxyParamsMediaFlow_ = value;
      }
    }

    /// <summary>Field number for the "HttpsProxyParamsMediaFlow" field.</summary>
    public const int HttpsProxyParamsMediaFlowFieldNumber = 3;
    private global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow httpsProxyParamsMediaFlow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow HttpsProxyParamsMediaFlow {
      get { return httpsProxyParamsMediaFlow_; }
      set {
        httpsProxyParamsMediaFlow_ = value;
      }
    }

    /// <summary>Field number for the "MuteState" field.</summary>
    public const int MuteStateFieldNumber = 4;
    private float muteState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MuteState {
      get { return muteState_; }
      set {
        muteState_ = value;
      }
    }

    /// <summary>Field number for the "AllowDecoderContraintsInducedStereoToMono" field.</summary>
    public const int AllowDecoderContraintsInducedStereoToMonoFieldNumber = 5;
    private bool allowDecoderContraintsInducedStereoToMono_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowDecoderContraintsInducedStereoToMono {
      get { return allowDecoderContraintsInducedStereoToMono_; }
      set {
        allowDecoderContraintsInducedStereoToMono_ = value;
      }
    }

    /// <summary>Field number for the "OverrideUserAgent" field.</summary>
    public const int OverrideUserAgentFieldNumber = 6;
    private string overrideUserAgent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OverrideUserAgent {
      get { return overrideUserAgent_; }
      set {
        overrideUserAgent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ContentProtectionRobustnessLevel" field.</summary>
    public const int ContentProtectionRobustnessLevelFieldNumber = 7;
    private global::com.tiledmedia.clearvr.cvrinterface.ContentProtectionRobustnessLevel contentProtectionRobustnessLevel_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ContentProtectionRobustnessLevel ContentProtectionRobustnessLevel {
      get { return contentProtectionRobustnessLevel_; }
      set {
        contentProtectionRobustnessLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeParametersMediaFlow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeParametersMediaFlow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreateContextParams, other.CreateContextParams)) return false;
      if (!object.Equals(HttpProxyParamsMediaFlow, other.HttpProxyParamsMediaFlow)) return false;
      if (!object.Equals(HttpsProxyParamsMediaFlow, other.HttpsProxyParamsMediaFlow)) return false;
      if (MuteState != other.MuteState) return false;
      if (AllowDecoderContraintsInducedStereoToMono != other.AllowDecoderContraintsInducedStereoToMono) return false;
      if (OverrideUserAgent != other.OverrideUserAgent) return false;
      if (ContentProtectionRobustnessLevel != other.ContentProtectionRobustnessLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (createContextParams_ != null) hash ^= CreateContextParams.GetHashCode();
      if (httpProxyParamsMediaFlow_ != null) hash ^= HttpProxyParamsMediaFlow.GetHashCode();
      if (httpsProxyParamsMediaFlow_ != null) hash ^= HttpsProxyParamsMediaFlow.GetHashCode();
      if (MuteState != 0F) hash ^= MuteState.GetHashCode();
      if (AllowDecoderContraintsInducedStereoToMono != false) hash ^= AllowDecoderContraintsInducedStereoToMono.GetHashCode();
      if (OverrideUserAgent.Length != 0) hash ^= OverrideUserAgent.GetHashCode();
      if (ContentProtectionRobustnessLevel != 0) hash ^= ContentProtectionRobustnessLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (createContextParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CreateContextParams);
      }
      if (httpProxyParamsMediaFlow_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HttpProxyParamsMediaFlow);
      }
      if (httpsProxyParamsMediaFlow_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(HttpsProxyParamsMediaFlow);
      }
      if (MuteState != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MuteState);
      }
      if (AllowDecoderContraintsInducedStereoToMono != false) {
        output.WriteRawTag(40);
        output.WriteBool(AllowDecoderContraintsInducedStereoToMono);
      }
      if (OverrideUserAgent.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OverrideUserAgent);
      }
      if (ContentProtectionRobustnessLevel != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ContentProtectionRobustnessLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (createContextParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateContextParams);
      }
      if (httpProxyParamsMediaFlow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpProxyParamsMediaFlow);
      }
      if (httpsProxyParamsMediaFlow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpsProxyParamsMediaFlow);
      }
      if (MuteState != 0F) {
        size += 1 + 4;
      }
      if (AllowDecoderContraintsInducedStereoToMono != false) {
        size += 1 + 1;
      }
      if (OverrideUserAgent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OverrideUserAgent);
      }
      if (ContentProtectionRobustnessLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ContentProtectionRobustnessLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeParametersMediaFlow other) {
      if (other == null) {
        return;
      }
      if (other.createContextParams_ != null) {
        if (createContextParams_ == null) {
          createContextParams_ = new global::com.tiledmedia.clearvr.cvrinterface.CreateContextParams();
        }
        CreateContextParams.MergeFrom(other.CreateContextParams);
      }
      if (other.httpProxyParamsMediaFlow_ != null) {
        if (httpProxyParamsMediaFlow_ == null) {
          httpProxyParamsMediaFlow_ = new global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow();
        }
        HttpProxyParamsMediaFlow.MergeFrom(other.HttpProxyParamsMediaFlow);
      }
      if (other.httpsProxyParamsMediaFlow_ != null) {
        if (httpsProxyParamsMediaFlow_ == null) {
          httpsProxyParamsMediaFlow_ = new global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow();
        }
        HttpsProxyParamsMediaFlow.MergeFrom(other.HttpsProxyParamsMediaFlow);
      }
      if (other.MuteState != 0F) {
        MuteState = other.MuteState;
      }
      if (other.AllowDecoderContraintsInducedStereoToMono != false) {
        AllowDecoderContraintsInducedStereoToMono = other.AllowDecoderContraintsInducedStereoToMono;
      }
      if (other.OverrideUserAgent.Length != 0) {
        OverrideUserAgent = other.OverrideUserAgent;
      }
      if (other.ContentProtectionRobustnessLevel != 0) {
        ContentProtectionRobustnessLevel = other.ContentProtectionRobustnessLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (createContextParams_ == null) {
              createContextParams_ = new global::com.tiledmedia.clearvr.cvrinterface.CreateContextParams();
            }
            input.ReadMessage(createContextParams_);
            break;
          }
          case 18: {
            if (httpProxyParamsMediaFlow_ == null) {
              httpProxyParamsMediaFlow_ = new global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow();
            }
            input.ReadMessage(httpProxyParamsMediaFlow_);
            break;
          }
          case 26: {
            if (httpsProxyParamsMediaFlow_ == null) {
              httpsProxyParamsMediaFlow_ = new global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow();
            }
            input.ReadMessage(httpsProxyParamsMediaFlow_);
            break;
          }
          case 37: {
            MuteState = input.ReadFloat();
            break;
          }
          case 40: {
            AllowDecoderContraintsInducedStereoToMono = input.ReadBool();
            break;
          }
          case 50: {
            OverrideUserAgent = input.ReadString();
            break;
          }
          case 56: {
            contentProtectionRobustnessLevel_ = (global::com.tiledmedia.clearvr.cvrinterface.ContentProtectionRobustnessLevel) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PrepareContentParametersMediaflow : pb::IMessage<PrepareContentParametersMediaflow> {
    private static readonly pb::MessageParser<PrepareContentParametersMediaflow> _parser = new pb::MessageParser<PrepareContentParametersMediaflow>(() => new PrepareContentParametersMediaflow());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrepareContentParametersMediaflow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrepareContentParametersMediaflow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrepareContentParametersMediaflow(PrepareContentParametersMediaflow other) : this() {
      InitializeParams = other.initializeParams_ != null ? other.InitializeParams.Clone() : null;
      AudioTrackAndPlaybackParametersMediaFlow = other.audioTrackAndPlaybackParametersMediaFlow_ != null ? other.AudioTrackAndPlaybackParametersMediaFlow.Clone() : null;
      startClearVRCoreTimeoutInMilliseconds_ = other.startClearVRCoreTimeoutInMilliseconds_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrepareContentParametersMediaflow Clone() {
      return new PrepareContentParametersMediaflow(this);
    }

    /// <summary>Field number for the "InitializeParams" field.</summary>
    public const int InitializeParamsFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.InitializeParams initializeParams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InitializeParams InitializeParams {
      get { return initializeParams_; }
      set {
        initializeParams_ = value;
      }
    }

    /// <summary>Field number for the "AudioTrackAndPlaybackParametersMediaFlow" field.</summary>
    public const int AudioTrackAndPlaybackParametersMediaFlowFieldNumber = 2;
    private global::com.tiledmedia.clearvr.cvrinterface.AudioTrackAndPlaybackParametersMediaFlow audioTrackAndPlaybackParametersMediaFlow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.AudioTrackAndPlaybackParametersMediaFlow AudioTrackAndPlaybackParametersMediaFlow {
      get { return audioTrackAndPlaybackParametersMediaFlow_; }
      set {
        audioTrackAndPlaybackParametersMediaFlow_ = value;
      }
    }

    /// <summary>Field number for the "StartClearVRCoreTimeoutInMilliseconds" field.</summary>
    public const int StartClearVRCoreTimeoutInMillisecondsFieldNumber = 3;
    private int startClearVRCoreTimeoutInMilliseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartClearVRCoreTimeoutInMilliseconds {
      get { return startClearVRCoreTimeoutInMilliseconds_; }
      set {
        startClearVRCoreTimeoutInMilliseconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrepareContentParametersMediaflow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrepareContentParametersMediaflow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InitializeParams, other.InitializeParams)) return false;
      if (!object.Equals(AudioTrackAndPlaybackParametersMediaFlow, other.AudioTrackAndPlaybackParametersMediaFlow)) return false;
      if (StartClearVRCoreTimeoutInMilliseconds != other.StartClearVRCoreTimeoutInMilliseconds) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (initializeParams_ != null) hash ^= InitializeParams.GetHashCode();
      if (audioTrackAndPlaybackParametersMediaFlow_ != null) hash ^= AudioTrackAndPlaybackParametersMediaFlow.GetHashCode();
      if (StartClearVRCoreTimeoutInMilliseconds != 0) hash ^= StartClearVRCoreTimeoutInMilliseconds.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (initializeParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InitializeParams);
      }
      if (audioTrackAndPlaybackParametersMediaFlow_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AudioTrackAndPlaybackParametersMediaFlow);
      }
      if (StartClearVRCoreTimeoutInMilliseconds != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StartClearVRCoreTimeoutInMilliseconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (initializeParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitializeParams);
      }
      if (audioTrackAndPlaybackParametersMediaFlow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AudioTrackAndPlaybackParametersMediaFlow);
      }
      if (StartClearVRCoreTimeoutInMilliseconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartClearVRCoreTimeoutInMilliseconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrepareContentParametersMediaflow other) {
      if (other == null) {
        return;
      }
      if (other.initializeParams_ != null) {
        if (initializeParams_ == null) {
          initializeParams_ = new global::com.tiledmedia.clearvr.cvrinterface.InitializeParams();
        }
        InitializeParams.MergeFrom(other.InitializeParams);
      }
      if (other.audioTrackAndPlaybackParametersMediaFlow_ != null) {
        if (audioTrackAndPlaybackParametersMediaFlow_ == null) {
          audioTrackAndPlaybackParametersMediaFlow_ = new global::com.tiledmedia.clearvr.cvrinterface.AudioTrackAndPlaybackParametersMediaFlow();
        }
        AudioTrackAndPlaybackParametersMediaFlow.MergeFrom(other.AudioTrackAndPlaybackParametersMediaFlow);
      }
      if (other.StartClearVRCoreTimeoutInMilliseconds != 0) {
        StartClearVRCoreTimeoutInMilliseconds = other.StartClearVRCoreTimeoutInMilliseconds;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (initializeParams_ == null) {
              initializeParams_ = new global::com.tiledmedia.clearvr.cvrinterface.InitializeParams();
            }
            input.ReadMessage(initializeParams_);
            break;
          }
          case 18: {
            if (audioTrackAndPlaybackParametersMediaFlow_ == null) {
              audioTrackAndPlaybackParametersMediaFlow_ = new global::com.tiledmedia.clearvr.cvrinterface.AudioTrackAndPlaybackParametersMediaFlow();
            }
            input.ReadMessage(audioTrackAndPlaybackParametersMediaFlow_);
            break;
          }
          case 24: {
            StartClearVRCoreTimeoutInMilliseconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SwitchContentParamsMediaFlow : pb::IMessage<SwitchContentParamsMediaFlow> {
    private static readonly pb::MessageParser<SwitchContentParamsMediaFlow> _parser = new pb::MessageParser<SwitchContentParamsMediaFlow>(() => new SwitchContentParamsMediaFlow());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwitchContentParamsMediaFlow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwitchContentParamsMediaFlow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwitchContentParamsMediaFlow(SwitchContentParamsMediaFlow other) : this() {
      SwitchContentParams = other.switchContentParams_ != null ? other.SwitchContentParams.Clone() : null;
      AudioTrackAndPlaybackParametersMediaFlow = other.audioTrackAndPlaybackParametersMediaFlow_ != null ? other.AudioTrackAndPlaybackParametersMediaFlow.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwitchContentParamsMediaFlow Clone() {
      return new SwitchContentParamsMediaFlow(this);
    }

    /// <summary>Field number for the "SwitchContentParams" field.</summary>
    public const int SwitchContentParamsFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.SwitchContentParams switchContentParams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.SwitchContentParams SwitchContentParams {
      get { return switchContentParams_; }
      set {
        switchContentParams_ = value;
      }
    }

    /// <summary>Field number for the "AudioTrackAndPlaybackParametersMediaFlow" field.</summary>
    public const int AudioTrackAndPlaybackParametersMediaFlowFieldNumber = 2;
    private global::com.tiledmedia.clearvr.cvrinterface.AudioTrackAndPlaybackParametersMediaFlow audioTrackAndPlaybackParametersMediaFlow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.AudioTrackAndPlaybackParametersMediaFlow AudioTrackAndPlaybackParametersMediaFlow {
      get { return audioTrackAndPlaybackParametersMediaFlow_; }
      set {
        audioTrackAndPlaybackParametersMediaFlow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwitchContentParamsMediaFlow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwitchContentParamsMediaFlow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SwitchContentParams, other.SwitchContentParams)) return false;
      if (!object.Equals(AudioTrackAndPlaybackParametersMediaFlow, other.AudioTrackAndPlaybackParametersMediaFlow)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (switchContentParams_ != null) hash ^= SwitchContentParams.GetHashCode();
      if (audioTrackAndPlaybackParametersMediaFlow_ != null) hash ^= AudioTrackAndPlaybackParametersMediaFlow.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (switchContentParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SwitchContentParams);
      }
      if (audioTrackAndPlaybackParametersMediaFlow_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AudioTrackAndPlaybackParametersMediaFlow);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (switchContentParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwitchContentParams);
      }
      if (audioTrackAndPlaybackParametersMediaFlow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AudioTrackAndPlaybackParametersMediaFlow);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwitchContentParamsMediaFlow other) {
      if (other == null) {
        return;
      }
      if (other.switchContentParams_ != null) {
        if (switchContentParams_ == null) {
          switchContentParams_ = new global::com.tiledmedia.clearvr.cvrinterface.SwitchContentParams();
        }
        SwitchContentParams.MergeFrom(other.SwitchContentParams);
      }
      if (other.audioTrackAndPlaybackParametersMediaFlow_ != null) {
        if (audioTrackAndPlaybackParametersMediaFlow_ == null) {
          audioTrackAndPlaybackParametersMediaFlow_ = new global::com.tiledmedia.clearvr.cvrinterface.AudioTrackAndPlaybackParametersMediaFlow();
        }
        AudioTrackAndPlaybackParametersMediaFlow.MergeFrom(other.AudioTrackAndPlaybackParametersMediaFlow);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (switchContentParams_ == null) {
              switchContentParams_ = new global::com.tiledmedia.clearvr.cvrinterface.SwitchContentParams();
            }
            input.ReadMessage(switchContentParams_);
            break;
          }
          case 18: {
            if (audioTrackAndPlaybackParametersMediaFlow_ == null) {
              audioTrackAndPlaybackParametersMediaFlow_ = new global::com.tiledmedia.clearvr.cvrinterface.AudioTrackAndPlaybackParametersMediaFlow();
            }
            input.ReadMessage(audioTrackAndPlaybackParametersMediaFlow_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContentSupportedTesterParametersMediaFlow : pb::IMessage<ContentSupportedTesterParametersMediaFlow> {
    private static readonly pb::MessageParser<ContentSupportedTesterParametersMediaFlow> _parser = new pb::MessageParser<ContentSupportedTesterParametersMediaFlow>(() => new ContentSupportedTesterParametersMediaFlow());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContentSupportedTesterParametersMediaFlow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentSupportedTesterParametersMediaFlow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentSupportedTesterParametersMediaFlow(ContentSupportedTesterParametersMediaFlow other) : this() {
      CreateContextParams = other.createContextParams_ != null ? other.CreateContextParams.Clone() : null;
      CheckIsSupportedParams = other.checkIsSupportedParams_ != null ? other.CheckIsSupportedParams.Clone() : null;
      HttpProxyParamsMediaFlow = other.httpProxyParamsMediaFlow_ != null ? other.HttpProxyParamsMediaFlow.Clone() : null;
      HttpsProxyParamsMediaFlow = other.httpsProxyParamsMediaFlow_ != null ? other.HttpsProxyParamsMediaFlow.Clone() : null;
      overrideUserAgent_ = other.overrideUserAgent_;
      allowDecoderContraintsInducedStereoToMono_ = other.allowDecoderContraintsInducedStereoToMono_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentSupportedTesterParametersMediaFlow Clone() {
      return new ContentSupportedTesterParametersMediaFlow(this);
    }

    /// <summary>Field number for the "CreateContextParams" field.</summary>
    public const int CreateContextParamsFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.CreateContextParams createContextParams_;
    /// <summary>
    /// We must specifythe core context parameters as a core context might not yet be active.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.CreateContextParams CreateContextParams {
      get { return createContextParams_; }
      set {
        createContextParams_ = value;
      }
    }

    /// <summary>Field number for the "checkIsSupportedParams" field.</summary>
    public const int CheckIsSupportedParamsFieldNumber = 2;
    private global::com.tiledmedia.clearvr.cvrinterface.CheckIsSupportedParams checkIsSupportedParams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.CheckIsSupportedParams CheckIsSupportedParams {
      get { return checkIsSupportedParams_; }
      set {
        checkIsSupportedParams_ = value;
      }
    }

    /// <summary>Field number for the "HttpProxyParamsMediaFlow" field.</summary>
    public const int HttpProxyParamsMediaFlowFieldNumber = 3;
    private global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow httpProxyParamsMediaFlow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow HttpProxyParamsMediaFlow {
      get { return httpProxyParamsMediaFlow_; }
      set {
        httpProxyParamsMediaFlow_ = value;
      }
    }

    /// <summary>Field number for the "HttpsProxyParamsMediaFlow" field.</summary>
    public const int HttpsProxyParamsMediaFlowFieldNumber = 4;
    private global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow httpsProxyParamsMediaFlow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow HttpsProxyParamsMediaFlow {
      get { return httpsProxyParamsMediaFlow_; }
      set {
        httpsProxyParamsMediaFlow_ = value;
      }
    }

    /// <summary>Field number for the "OverrideUserAgent" field.</summary>
    public const int OverrideUserAgentFieldNumber = 5;
    private string overrideUserAgent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OverrideUserAgent {
      get { return overrideUserAgent_; }
      set {
        overrideUserAgent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AllowDecoderContraintsInducedStereoToMono" field.</summary>
    public const int AllowDecoderContraintsInducedStereoToMonoFieldNumber = 6;
    private bool allowDecoderContraintsInducedStereoToMono_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowDecoderContraintsInducedStereoToMono {
      get { return allowDecoderContraintsInducedStereoToMono_; }
      set {
        allowDecoderContraintsInducedStereoToMono_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContentSupportedTesterParametersMediaFlow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContentSupportedTesterParametersMediaFlow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreateContextParams, other.CreateContextParams)) return false;
      if (!object.Equals(CheckIsSupportedParams, other.CheckIsSupportedParams)) return false;
      if (!object.Equals(HttpProxyParamsMediaFlow, other.HttpProxyParamsMediaFlow)) return false;
      if (!object.Equals(HttpsProxyParamsMediaFlow, other.HttpsProxyParamsMediaFlow)) return false;
      if (OverrideUserAgent != other.OverrideUserAgent) return false;
      if (AllowDecoderContraintsInducedStereoToMono != other.AllowDecoderContraintsInducedStereoToMono) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (createContextParams_ != null) hash ^= CreateContextParams.GetHashCode();
      if (checkIsSupportedParams_ != null) hash ^= CheckIsSupportedParams.GetHashCode();
      if (httpProxyParamsMediaFlow_ != null) hash ^= HttpProxyParamsMediaFlow.GetHashCode();
      if (httpsProxyParamsMediaFlow_ != null) hash ^= HttpsProxyParamsMediaFlow.GetHashCode();
      if (OverrideUserAgent.Length != 0) hash ^= OverrideUserAgent.GetHashCode();
      if (AllowDecoderContraintsInducedStereoToMono != false) hash ^= AllowDecoderContraintsInducedStereoToMono.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (createContextParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CreateContextParams);
      }
      if (checkIsSupportedParams_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CheckIsSupportedParams);
      }
      if (httpProxyParamsMediaFlow_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(HttpProxyParamsMediaFlow);
      }
      if (httpsProxyParamsMediaFlow_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(HttpsProxyParamsMediaFlow);
      }
      if (OverrideUserAgent.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OverrideUserAgent);
      }
      if (AllowDecoderContraintsInducedStereoToMono != false) {
        output.WriteRawTag(48);
        output.WriteBool(AllowDecoderContraintsInducedStereoToMono);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (createContextParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateContextParams);
      }
      if (checkIsSupportedParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CheckIsSupportedParams);
      }
      if (httpProxyParamsMediaFlow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpProxyParamsMediaFlow);
      }
      if (httpsProxyParamsMediaFlow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpsProxyParamsMediaFlow);
      }
      if (OverrideUserAgent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OverrideUserAgent);
      }
      if (AllowDecoderContraintsInducedStereoToMono != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContentSupportedTesterParametersMediaFlow other) {
      if (other == null) {
        return;
      }
      if (other.createContextParams_ != null) {
        if (createContextParams_ == null) {
          createContextParams_ = new global::com.tiledmedia.clearvr.cvrinterface.CreateContextParams();
        }
        CreateContextParams.MergeFrom(other.CreateContextParams);
      }
      if (other.checkIsSupportedParams_ != null) {
        if (checkIsSupportedParams_ == null) {
          checkIsSupportedParams_ = new global::com.tiledmedia.clearvr.cvrinterface.CheckIsSupportedParams();
        }
        CheckIsSupportedParams.MergeFrom(other.CheckIsSupportedParams);
      }
      if (other.httpProxyParamsMediaFlow_ != null) {
        if (httpProxyParamsMediaFlow_ == null) {
          httpProxyParamsMediaFlow_ = new global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow();
        }
        HttpProxyParamsMediaFlow.MergeFrom(other.HttpProxyParamsMediaFlow);
      }
      if (other.httpsProxyParamsMediaFlow_ != null) {
        if (httpsProxyParamsMediaFlow_ == null) {
          httpsProxyParamsMediaFlow_ = new global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow();
        }
        HttpsProxyParamsMediaFlow.MergeFrom(other.HttpsProxyParamsMediaFlow);
      }
      if (other.OverrideUserAgent.Length != 0) {
        OverrideUserAgent = other.OverrideUserAgent;
      }
      if (other.AllowDecoderContraintsInducedStereoToMono != false) {
        AllowDecoderContraintsInducedStereoToMono = other.AllowDecoderContraintsInducedStereoToMono;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (createContextParams_ == null) {
              createContextParams_ = new global::com.tiledmedia.clearvr.cvrinterface.CreateContextParams();
            }
            input.ReadMessage(createContextParams_);
            break;
          }
          case 18: {
            if (checkIsSupportedParams_ == null) {
              checkIsSupportedParams_ = new global::com.tiledmedia.clearvr.cvrinterface.CheckIsSupportedParams();
            }
            input.ReadMessage(checkIsSupportedParams_);
            break;
          }
          case 26: {
            if (httpProxyParamsMediaFlow_ == null) {
              httpProxyParamsMediaFlow_ = new global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow();
            }
            input.ReadMessage(httpProxyParamsMediaFlow_);
            break;
          }
          case 34: {
            if (httpsProxyParamsMediaFlow_ == null) {
              httpsProxyParamsMediaFlow_ = new global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow();
            }
            input.ReadMessage(httpsProxyParamsMediaFlow_);
            break;
          }
          case 42: {
            OverrideUserAgent = input.ReadString();
            break;
          }
          case 48: {
            AllowDecoderContraintsInducedStereoToMono = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProxyParamsMediaFlow : pb::IMessage<ProxyParamsMediaFlow> {
    private static readonly pb::MessageParser<ProxyParamsMediaFlow> _parser = new pb::MessageParser<ProxyParamsMediaFlow>(() => new ProxyParamsMediaFlow());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProxyParamsMediaFlow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProxyParamsMediaFlow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProxyParamsMediaFlow(ProxyParamsMediaFlow other) : this() {
      host_ = other.host_;
      port_ = other.port_;
      username_ = other.username_;
      password_ = other.password_;
      proxyType_ = other.proxyType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProxyParamsMediaFlow Clone() {
      return new ProxyParamsMediaFlow(this);
    }

    /// <summary>Field number for the "Host" field.</summary>
    public const int HostFieldNumber = 1;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "Username" field.</summary>
    public const int UsernameFieldNumber = 3;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 4;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ProxyType" field.</summary>
    public const int ProxyTypeFieldNumber = 5;
    private global::com.tiledmedia.clearvr.cvrinterface.ProxyType proxyType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ProxyType ProxyType {
      get { return proxyType_; }
      set {
        proxyType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProxyParamsMediaFlow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProxyParamsMediaFlow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      if (ProxyType != other.ProxyType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (ProxyType != 0) hash ^= ProxyType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Password);
      }
      if (ProxyType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ProxyType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (ProxyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ProxyType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProxyParamsMediaFlow other) {
      if (other == null) {
        return;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.ProxyType != 0) {
        ProxyType = other.ProxyType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
          case 34: {
            Password = input.ReadString();
            break;
          }
          case 40: {
            proxyType_ = (global::com.tiledmedia.clearvr.cvrinterface.ProxyType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrackID : pb::IMessage<TrackID> {
    private static readonly pb::MessageParser<TrackID> _parser = new pb::MessageParser<TrackID>(() => new TrackID());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrackID> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackID() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackID(TrackID other) : this() {
      feedIdx_ = other.feedIdx_;
      trackIdx_ = other.trackIdx_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackID Clone() {
      return new TrackID(this);
    }

    /// <summary>Field number for the "FeedIdx" field.</summary>
    public const int FeedIdxFieldNumber = 1;
    private int feedIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FeedIdx {
      get { return feedIdx_; }
      set {
        feedIdx_ = value;
      }
    }

    /// <summary>Field number for the "TrackIdx" field.</summary>
    public const int TrackIdxFieldNumber = 2;
    private int trackIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrackIdx {
      get { return trackIdx_; }
      set {
        trackIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrackID);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrackID other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FeedIdx != other.FeedIdx) return false;
      if (TrackIdx != other.TrackIdx) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FeedIdx != 0) hash ^= FeedIdx.GetHashCode();
      if (TrackIdx != 0) hash ^= TrackIdx.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FeedIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FeedIdx);
      }
      if (TrackIdx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TrackIdx);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FeedIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FeedIdx);
      }
      if (TrackIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrackIdx);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrackID other) {
      if (other == null) {
        return;
      }
      if (other.FeedIdx != 0) {
        FeedIdx = other.FeedIdx;
      }
      if (other.TrackIdx != 0) {
        TrackIdx = other.TrackIdx;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FeedIdx = input.ReadInt32();
            break;
          }
          case 16: {
            TrackIdx = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContentItem : pb::IMessage<ContentItem> {
    private static readonly pb::MessageParser<ContentItem> _parser = new pb::MessageParser<ContentItem>(() => new ContentItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContentItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentItem(ContentItem other) : this() {
      uRL_ = other.uRL_;
      DRM = other.dRM_ != null ? other.DRM.Clone() : null;
      ProjectionOverride = other.projectionOverride_ != null ? other.ProjectionOverride.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentItem Clone() {
      return new ContentItem(this);
    }

    /// <summary>Field number for the "URL" field.</summary>
    public const int URLFieldNumber = 1;
    private string uRL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string URL {
      get { return uRL_; }
      set {
        uRL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DRM" field.</summary>
    public const int DRMFieldNumber = 10;
    private global::com.tiledmedia.clearvr.cvrinterface.DRM dRM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.DRM DRM {
      get { return dRM_; }
      set {
        dRM_ = value;
      }
    }

    /// <summary>Field number for the "ProjectionOverride" field.</summary>
    public const int ProjectionOverrideFieldNumber = 20;
    private global::com.tiledmedia.clearvr.cvrinterface.Projection projectionOverride_;
    /// <summary>
    /// Only valid for non-ClearVR content. Ignored otherwise
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.Projection ProjectionOverride {
      get { return projectionOverride_; }
      set {
        projectionOverride_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContentItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContentItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (URL != other.URL) return false;
      if (!object.Equals(DRM, other.DRM)) return false;
      if (!object.Equals(ProjectionOverride, other.ProjectionOverride)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (URL.Length != 0) hash ^= URL.GetHashCode();
      if (dRM_ != null) hash ^= DRM.GetHashCode();
      if (projectionOverride_ != null) hash ^= ProjectionOverride.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (URL.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(URL);
      }
      if (dRM_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(DRM);
      }
      if (projectionOverride_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(ProjectionOverride);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (URL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(URL);
      }
      if (dRM_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DRM);
      }
      if (projectionOverride_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProjectionOverride);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContentItem other) {
      if (other == null) {
        return;
      }
      if (other.URL.Length != 0) {
        URL = other.URL;
      }
      if (other.dRM_ != null) {
        if (dRM_ == null) {
          dRM_ = new global::com.tiledmedia.clearvr.cvrinterface.DRM();
        }
        DRM.MergeFrom(other.DRM);
      }
      if (other.projectionOverride_ != null) {
        if (projectionOverride_ == null) {
          projectionOverride_ = new global::com.tiledmedia.clearvr.cvrinterface.Projection();
        }
        ProjectionOverride.MergeFrom(other.ProjectionOverride);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            URL = input.ReadString();
            break;
          }
          case 82: {
            if (dRM_ == null) {
              dRM_ = new global::com.tiledmedia.clearvr.cvrinterface.DRM();
            }
            input.ReadMessage(dRM_);
            break;
          }
          case 162: {
            if (projectionOverride_ == null) {
              projectionOverride_ = new global::com.tiledmedia.clearvr.cvrinterface.Projection();
            }
            input.ReadMessage(projectionOverride_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Projection : pb::IMessage<Projection> {
    private static readonly pb::MessageParser<Projection> _parser = new pb::MessageParser<Projection>(() => new Projection());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Projection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Projection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Projection(Projection other) : this() {
      projectionType_ = other.projectionType_;
      deprecatedProjectionType_ = other.deprecatedProjectionType_;
      FishEyeSettings = other.fishEyeSettings_ != null ? other.FishEyeSettings.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Projection Clone() {
      return new Projection(this);
    }

    /// <summary>Field number for the "ProjectionType" field.</summary>
    public const int ProjectionTypeFieldNumber = 1;
    private string projectionType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectionType {
      get { return projectionType_; }
      set {
        projectionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DeprecatedProjectionType" field.</summary>
    public const int DeprecatedProjectionTypeFieldNumber = 2;
    private global::com.tiledmedia.clearvr.cvrinterface.ProjectionType deprecatedProjectionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ProjectionType DeprecatedProjectionType {
      get { return deprecatedProjectionType_; }
      set {
        deprecatedProjectionType_ = value;
      }
    }

    /// <summary>Field number for the "FishEyeSettings" field.</summary>
    public const int FishEyeSettingsFieldNumber = 3;
    private global::com.tiledmedia.clearvr.cvrinterface.FishEyeSettings fishEyeSettings_;
    /// <summary>
    /// Configuration for fisheye projection. Ignored unless the ProjectionType is a fisheye.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.FishEyeSettings FishEyeSettings {
      get { return fishEyeSettings_; }
      set {
        fishEyeSettings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Projection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Projection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectionType != other.ProjectionType) return false;
      if (DeprecatedProjectionType != other.DeprecatedProjectionType) return false;
      if (!object.Equals(FishEyeSettings, other.FishEyeSettings)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectionType.Length != 0) hash ^= ProjectionType.GetHashCode();
      if (DeprecatedProjectionType != 0) hash ^= DeprecatedProjectionType.GetHashCode();
      if (fishEyeSettings_ != null) hash ^= FishEyeSettings.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectionType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectionType);
      }
      if (DeprecatedProjectionType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DeprecatedProjectionType);
      }
      if (fishEyeSettings_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FishEyeSettings);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectionType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectionType);
      }
      if (DeprecatedProjectionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeprecatedProjectionType);
      }
      if (fishEyeSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FishEyeSettings);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Projection other) {
      if (other == null) {
        return;
      }
      if (other.ProjectionType.Length != 0) {
        ProjectionType = other.ProjectionType;
      }
      if (other.DeprecatedProjectionType != 0) {
        DeprecatedProjectionType = other.DeprecatedProjectionType;
      }
      if (other.fishEyeSettings_ != null) {
        if (fishEyeSettings_ == null) {
          fishEyeSettings_ = new global::com.tiledmedia.clearvr.cvrinterface.FishEyeSettings();
        }
        FishEyeSettings.MergeFrom(other.FishEyeSettings);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectionType = input.ReadString();
            break;
          }
          case 16: {
            deprecatedProjectionType_ = (global::com.tiledmedia.clearvr.cvrinterface.ProjectionType) input.ReadEnum();
            break;
          }
          case 26: {
            if (fishEyeSettings_ == null) {
              fishEyeSettings_ = new global::com.tiledmedia.clearvr.cvrinterface.FishEyeSettings();
            }
            input.ReadMessage(fishEyeSettings_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DRM : pb::IMessage<DRM> {
    private static readonly pb::MessageParser<DRM> _parser = new pb::MessageParser<DRM>(() => new DRM());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DRM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DRM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DRM(DRM other) : this() {
      licenseServerURL_ = other.licenseServerURL_;
      licenseServerType_ = other.licenseServerType_;
      certificatePEMAsBase64_ = other.certificatePEMAsBase64_;
      keyPEMAsBase64_ = other.keyPEMAsBase64_;
      cAChainPEMAsBase64_ = other.cAChainPEMAsBase64_;
      pEMPassword_ = other.pEMPassword_;
      token_ = other.token_;
      licenseAuthHeaderKey_ = other.licenseAuthHeaderKey_.Clone();
      licenseAuthHeaderValue_ = other.licenseAuthHeaderValue_.Clone();
      licenseAuthQueryStringKey_ = other.licenseAuthQueryStringKey_.Clone();
      licenseAuthQueryStringValue_ = other.licenseAuthQueryStringValue_.Clone();
      tokenizationHeaderKey_ = other.tokenizationHeaderKey_.Clone();
      tokenizationHeaderValue_ = other.tokenizationHeaderValue_.Clone();
      tokenizationQueryStringKey_ = other.tokenizationQueryStringKey_.Clone();
      tokenizationQueryStringValue_ = other.tokenizationQueryStringValue_.Clone();
      keyOverrideBase64_ = other.keyOverrideBase64_;
      iVOverrideBase64_ = other.iVOverrideBase64_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DRM Clone() {
      return new DRM(this);
    }

    /// <summary>Field number for the "LicenseServerURL" field.</summary>
    public const int LicenseServerURLFieldNumber = 1;
    private string licenseServerURL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LicenseServerURL {
      get { return licenseServerURL_; }
      set {
        licenseServerURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LicenseServerType" field.</summary>
    public const int LicenseServerTypeFieldNumber = 2;
    private string licenseServerType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LicenseServerType {
      get { return licenseServerType_; }
      set {
        licenseServerType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CertificatePEMAsBase64" field.</summary>
    public const int CertificatePEMAsBase64FieldNumber = 10;
    private string certificatePEMAsBase64_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CertificatePEMAsBase64 {
      get { return certificatePEMAsBase64_; }
      set {
        certificatePEMAsBase64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "KeyPEMAsBase64" field.</summary>
    public const int KeyPEMAsBase64FieldNumber = 11;
    private string keyPEMAsBase64_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyPEMAsBase64 {
      get { return keyPEMAsBase64_; }
      set {
        keyPEMAsBase64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CAChainPEMAsBase64" field.</summary>
    public const int CAChainPEMAsBase64FieldNumber = 12;
    private string cAChainPEMAsBase64_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CAChainPEMAsBase64 {
      get { return cAChainPEMAsBase64_; }
      set {
        cAChainPEMAsBase64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PEMPassword" field.</summary>
    public const int PEMPasswordFieldNumber = 13;
    private string pEMPassword_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PEMPassword {
      get { return pEMPassword_; }
      set {
        pEMPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 15;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LicenseAuthHeaderKey" field.</summary>
    public const int LicenseAuthHeaderKeyFieldNumber = 20;
    private static readonly pb::FieldCodec<string> _repeated_licenseAuthHeaderKey_codec
        = pb::FieldCodec.ForString(162);
    private readonly pbc::RepeatedField<string> licenseAuthHeaderKey_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LicenseAuthHeaderKey {
      get { return licenseAuthHeaderKey_; }
    }

    /// <summary>Field number for the "LicenseAuthHeaderValue" field.</summary>
    public const int LicenseAuthHeaderValueFieldNumber = 21;
    private static readonly pb::FieldCodec<string> _repeated_licenseAuthHeaderValue_codec
        = pb::FieldCodec.ForString(170);
    private readonly pbc::RepeatedField<string> licenseAuthHeaderValue_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LicenseAuthHeaderValue {
      get { return licenseAuthHeaderValue_; }
    }

    /// <summary>Field number for the "LicenseAuthQueryStringKey" field.</summary>
    public const int LicenseAuthQueryStringKeyFieldNumber = 22;
    private static readonly pb::FieldCodec<string> _repeated_licenseAuthQueryStringKey_codec
        = pb::FieldCodec.ForString(178);
    private readonly pbc::RepeatedField<string> licenseAuthQueryStringKey_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LicenseAuthQueryStringKey {
      get { return licenseAuthQueryStringKey_; }
    }

    /// <summary>Field number for the "LicenseAuthQueryStringValue" field.</summary>
    public const int LicenseAuthQueryStringValueFieldNumber = 23;
    private static readonly pb::FieldCodec<string> _repeated_licenseAuthQueryStringValue_codec
        = pb::FieldCodec.ForString(186);
    private readonly pbc::RepeatedField<string> licenseAuthQueryStringValue_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LicenseAuthQueryStringValue {
      get { return licenseAuthQueryStringValue_; }
    }

    /// <summary>Field number for the "TokenizationHeaderKey" field.</summary>
    public const int TokenizationHeaderKeyFieldNumber = 24;
    private static readonly pb::FieldCodec<string> _repeated_tokenizationHeaderKey_codec
        = pb::FieldCodec.ForString(194);
    private readonly pbc::RepeatedField<string> tokenizationHeaderKey_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TokenizationHeaderKey {
      get { return tokenizationHeaderKey_; }
    }

    /// <summary>Field number for the "TokenizationHeaderValue" field.</summary>
    public const int TokenizationHeaderValueFieldNumber = 25;
    private static readonly pb::FieldCodec<string> _repeated_tokenizationHeaderValue_codec
        = pb::FieldCodec.ForString(202);
    private readonly pbc::RepeatedField<string> tokenizationHeaderValue_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TokenizationHeaderValue {
      get { return tokenizationHeaderValue_; }
    }

    /// <summary>Field number for the "TokenizationQueryStringKey" field.</summary>
    public const int TokenizationQueryStringKeyFieldNumber = 26;
    private static readonly pb::FieldCodec<string> _repeated_tokenizationQueryStringKey_codec
        = pb::FieldCodec.ForString(210);
    private readonly pbc::RepeatedField<string> tokenizationQueryStringKey_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TokenizationQueryStringKey {
      get { return tokenizationQueryStringKey_; }
    }

    /// <summary>Field number for the "TokenizationQueryStringValue" field.</summary>
    public const int TokenizationQueryStringValueFieldNumber = 27;
    private static readonly pb::FieldCodec<string> _repeated_tokenizationQueryStringValue_codec
        = pb::FieldCodec.ForString(218);
    private readonly pbc::RepeatedField<string> tokenizationQueryStringValue_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TokenizationQueryStringValue {
      get { return tokenizationQueryStringValue_; }
    }

    /// <summary>Field number for the "KeyOverrideBase64" field.</summary>
    public const int KeyOverrideBase64FieldNumber = 40;
    private string keyOverrideBase64_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyOverrideBase64 {
      get { return keyOverrideBase64_; }
      set {
        keyOverrideBase64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IVOverrideBase64" field.</summary>
    public const int IVOverrideBase64FieldNumber = 41;
    private string iVOverrideBase64_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IVOverrideBase64 {
      get { return iVOverrideBase64_; }
      set {
        iVOverrideBase64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DRM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DRM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LicenseServerURL != other.LicenseServerURL) return false;
      if (LicenseServerType != other.LicenseServerType) return false;
      if (CertificatePEMAsBase64 != other.CertificatePEMAsBase64) return false;
      if (KeyPEMAsBase64 != other.KeyPEMAsBase64) return false;
      if (CAChainPEMAsBase64 != other.CAChainPEMAsBase64) return false;
      if (PEMPassword != other.PEMPassword) return false;
      if (Token != other.Token) return false;
      if(!licenseAuthHeaderKey_.Equals(other.licenseAuthHeaderKey_)) return false;
      if(!licenseAuthHeaderValue_.Equals(other.licenseAuthHeaderValue_)) return false;
      if(!licenseAuthQueryStringKey_.Equals(other.licenseAuthQueryStringKey_)) return false;
      if(!licenseAuthQueryStringValue_.Equals(other.licenseAuthQueryStringValue_)) return false;
      if(!tokenizationHeaderKey_.Equals(other.tokenizationHeaderKey_)) return false;
      if(!tokenizationHeaderValue_.Equals(other.tokenizationHeaderValue_)) return false;
      if(!tokenizationQueryStringKey_.Equals(other.tokenizationQueryStringKey_)) return false;
      if(!tokenizationQueryStringValue_.Equals(other.tokenizationQueryStringValue_)) return false;
      if (KeyOverrideBase64 != other.KeyOverrideBase64) return false;
      if (IVOverrideBase64 != other.IVOverrideBase64) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LicenseServerURL.Length != 0) hash ^= LicenseServerURL.GetHashCode();
      if (LicenseServerType.Length != 0) hash ^= LicenseServerType.GetHashCode();
      if (CertificatePEMAsBase64.Length != 0) hash ^= CertificatePEMAsBase64.GetHashCode();
      if (KeyPEMAsBase64.Length != 0) hash ^= KeyPEMAsBase64.GetHashCode();
      if (CAChainPEMAsBase64.Length != 0) hash ^= CAChainPEMAsBase64.GetHashCode();
      if (PEMPassword.Length != 0) hash ^= PEMPassword.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      hash ^= licenseAuthHeaderKey_.GetHashCode();
      hash ^= licenseAuthHeaderValue_.GetHashCode();
      hash ^= licenseAuthQueryStringKey_.GetHashCode();
      hash ^= licenseAuthQueryStringValue_.GetHashCode();
      hash ^= tokenizationHeaderKey_.GetHashCode();
      hash ^= tokenizationHeaderValue_.GetHashCode();
      hash ^= tokenizationQueryStringKey_.GetHashCode();
      hash ^= tokenizationQueryStringValue_.GetHashCode();
      if (KeyOverrideBase64.Length != 0) hash ^= KeyOverrideBase64.GetHashCode();
      if (IVOverrideBase64.Length != 0) hash ^= IVOverrideBase64.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LicenseServerURL.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LicenseServerURL);
      }
      if (LicenseServerType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LicenseServerType);
      }
      if (CertificatePEMAsBase64.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CertificatePEMAsBase64);
      }
      if (KeyPEMAsBase64.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(KeyPEMAsBase64);
      }
      if (CAChainPEMAsBase64.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CAChainPEMAsBase64);
      }
      if (PEMPassword.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(PEMPassword);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Token);
      }
      licenseAuthHeaderKey_.WriteTo(output, _repeated_licenseAuthHeaderKey_codec);
      licenseAuthHeaderValue_.WriteTo(output, _repeated_licenseAuthHeaderValue_codec);
      licenseAuthQueryStringKey_.WriteTo(output, _repeated_licenseAuthQueryStringKey_codec);
      licenseAuthQueryStringValue_.WriteTo(output, _repeated_licenseAuthQueryStringValue_codec);
      tokenizationHeaderKey_.WriteTo(output, _repeated_tokenizationHeaderKey_codec);
      tokenizationHeaderValue_.WriteTo(output, _repeated_tokenizationHeaderValue_codec);
      tokenizationQueryStringKey_.WriteTo(output, _repeated_tokenizationQueryStringKey_codec);
      tokenizationQueryStringValue_.WriteTo(output, _repeated_tokenizationQueryStringValue_codec);
      if (KeyOverrideBase64.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(KeyOverrideBase64);
      }
      if (IVOverrideBase64.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(IVOverrideBase64);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LicenseServerURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LicenseServerURL);
      }
      if (LicenseServerType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LicenseServerType);
      }
      if (CertificatePEMAsBase64.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CertificatePEMAsBase64);
      }
      if (KeyPEMAsBase64.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyPEMAsBase64);
      }
      if (CAChainPEMAsBase64.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CAChainPEMAsBase64);
      }
      if (PEMPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PEMPassword);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      size += licenseAuthHeaderKey_.CalculateSize(_repeated_licenseAuthHeaderKey_codec);
      size += licenseAuthHeaderValue_.CalculateSize(_repeated_licenseAuthHeaderValue_codec);
      size += licenseAuthQueryStringKey_.CalculateSize(_repeated_licenseAuthQueryStringKey_codec);
      size += licenseAuthQueryStringValue_.CalculateSize(_repeated_licenseAuthQueryStringValue_codec);
      size += tokenizationHeaderKey_.CalculateSize(_repeated_tokenizationHeaderKey_codec);
      size += tokenizationHeaderValue_.CalculateSize(_repeated_tokenizationHeaderValue_codec);
      size += tokenizationQueryStringKey_.CalculateSize(_repeated_tokenizationQueryStringKey_codec);
      size += tokenizationQueryStringValue_.CalculateSize(_repeated_tokenizationQueryStringValue_codec);
      if (KeyOverrideBase64.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(KeyOverrideBase64);
      }
      if (IVOverrideBase64.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IVOverrideBase64);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DRM other) {
      if (other == null) {
        return;
      }
      if (other.LicenseServerURL.Length != 0) {
        LicenseServerURL = other.LicenseServerURL;
      }
      if (other.LicenseServerType.Length != 0) {
        LicenseServerType = other.LicenseServerType;
      }
      if (other.CertificatePEMAsBase64.Length != 0) {
        CertificatePEMAsBase64 = other.CertificatePEMAsBase64;
      }
      if (other.KeyPEMAsBase64.Length != 0) {
        KeyPEMAsBase64 = other.KeyPEMAsBase64;
      }
      if (other.CAChainPEMAsBase64.Length != 0) {
        CAChainPEMAsBase64 = other.CAChainPEMAsBase64;
      }
      if (other.PEMPassword.Length != 0) {
        PEMPassword = other.PEMPassword;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      licenseAuthHeaderKey_.Add(other.licenseAuthHeaderKey_);
      licenseAuthHeaderValue_.Add(other.licenseAuthHeaderValue_);
      licenseAuthQueryStringKey_.Add(other.licenseAuthQueryStringKey_);
      licenseAuthQueryStringValue_.Add(other.licenseAuthQueryStringValue_);
      tokenizationHeaderKey_.Add(other.tokenizationHeaderKey_);
      tokenizationHeaderValue_.Add(other.tokenizationHeaderValue_);
      tokenizationQueryStringKey_.Add(other.tokenizationQueryStringKey_);
      tokenizationQueryStringValue_.Add(other.tokenizationQueryStringValue_);
      if (other.KeyOverrideBase64.Length != 0) {
        KeyOverrideBase64 = other.KeyOverrideBase64;
      }
      if (other.IVOverrideBase64.Length != 0) {
        IVOverrideBase64 = other.IVOverrideBase64;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LicenseServerURL = input.ReadString();
            break;
          }
          case 18: {
            LicenseServerType = input.ReadString();
            break;
          }
          case 82: {
            CertificatePEMAsBase64 = input.ReadString();
            break;
          }
          case 90: {
            KeyPEMAsBase64 = input.ReadString();
            break;
          }
          case 98: {
            CAChainPEMAsBase64 = input.ReadString();
            break;
          }
          case 106: {
            PEMPassword = input.ReadString();
            break;
          }
          case 122: {
            Token = input.ReadString();
            break;
          }
          case 162: {
            licenseAuthHeaderKey_.AddEntriesFrom(input, _repeated_licenseAuthHeaderKey_codec);
            break;
          }
          case 170: {
            licenseAuthHeaderValue_.AddEntriesFrom(input, _repeated_licenseAuthHeaderValue_codec);
            break;
          }
          case 178: {
            licenseAuthQueryStringKey_.AddEntriesFrom(input, _repeated_licenseAuthQueryStringKey_codec);
            break;
          }
          case 186: {
            licenseAuthQueryStringValue_.AddEntriesFrom(input, _repeated_licenseAuthQueryStringValue_codec);
            break;
          }
          case 194: {
            tokenizationHeaderKey_.AddEntriesFrom(input, _repeated_tokenizationHeaderKey_codec);
            break;
          }
          case 202: {
            tokenizationHeaderValue_.AddEntriesFrom(input, _repeated_tokenizationHeaderValue_codec);
            break;
          }
          case 210: {
            tokenizationQueryStringKey_.AddEntriesFrom(input, _repeated_tokenizationQueryStringKey_codec);
            break;
          }
          case 218: {
            tokenizationQueryStringValue_.AddEntriesFrom(input, _repeated_tokenizationQueryStringValue_codec);
            break;
          }
          case 322: {
            KeyOverrideBase64 = input.ReadString();
            break;
          }
          case 330: {
            IVOverrideBase64 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PolynomialSettings : pb::IMessage<PolynomialSettings> {
    private static readonly pb::MessageParser<PolynomialSettings> _parser = new pb::MessageParser<PolynomialSettings>(() => new PolynomialSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PolynomialSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolynomialSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolynomialSettings(PolynomialSettings other) : this() {
      centerU_ = other.centerU_;
      centerV_ = other.centerV_;
      affineParameterC_ = other.affineParameterC_;
      affineParameterD_ = other.affineParameterD_;
      affineParameterE_ = other.affineParameterE_;
      sphereToPlanPolynome_ = other.sphereToPlanPolynome_.Clone();
      planToSpherePolynome_ = other.planToSpherePolynome_.Clone();
      referenceWidth_ = other.referenceWidth_;
      referenceHeight_ = other.referenceHeight_;
      circularRadiusInDegrees_ = other.circularRadiusInDegrees_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolynomialSettings Clone() {
      return new PolynomialSettings(this);
    }

    /// <summary>Field number for the "CenterU" field.</summary>
    public const int CenterUFieldNumber = 1;
    private float centerU_;
    /// <summary>
    /// Optical center of the lens in the reference picture coordinates (used for LensType == POLYNOMIAL)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CenterU {
      get { return centerU_; }
      set {
        centerU_ = value;
      }
    }

    /// <summary>Field number for the "CenterV" field.</summary>
    public const int CenterVFieldNumber = 2;
    private float centerV_;
    /// <summary>
    /// Optical center of the lens in the reference picture coordinates (used for LensType == POLYNOMIAL)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CenterV {
      get { return centerV_; }
      set {
        centerV_ = value;
      }
    }

    /// <summary>Field number for the "AffineParameterC" field.</summary>
    public const int AffineParameterCFieldNumber = 3;
    private float affineParameterC_;
    /// <summary>
    /// Affine Parameter C of the lens (used for LensType == POLYNOMIAL)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AffineParameterC {
      get { return affineParameterC_; }
      set {
        affineParameterC_ = value;
      }
    }

    /// <summary>Field number for the "AffineParameterD" field.</summary>
    public const int AffineParameterDFieldNumber = 4;
    private float affineParameterD_;
    /// <summary>
    /// Affine Parameter D of the lens (used for LensType == POLYNOMIAL)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AffineParameterD {
      get { return affineParameterD_; }
      set {
        affineParameterD_ = value;
      }
    }

    /// <summary>Field number for the "AffineParameterE" field.</summary>
    public const int AffineParameterEFieldNumber = 5;
    private float affineParameterE_;
    /// <summary>
    /// Affine Parameter E of the lens (used for LensType == POLYNOMIAL)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AffineParameterE {
      get { return affineParameterE_; }
      set {
        affineParameterE_ = value;
      }
    }

    /// <summary>Field number for the "SphereToPlanPolynome" field.</summary>
    public const int SphereToPlanPolynomeFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_sphereToPlanPolynome_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> sphereToPlanPolynome_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Polynome describing the lens projection from the sphere (the world) to the picture (used for LensType ==
    /// POLYNOMIAL)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> SphereToPlanPolynome {
      get { return sphereToPlanPolynome_; }
    }

    /// <summary>Field number for the "PlanToSpherePolynome" field.</summary>
    public const int PlanToSpherePolynomeFieldNumber = 7;
    private static readonly pb::FieldCodec<float> _repeated_planToSpherePolynome_codec
        = pb::FieldCodec.ForFloat(58);
    private readonly pbc::RepeatedField<float> planToSpherePolynome_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Polynome describing the lens projection from the picture to the sphere (the world) (used for LensType ==
    /// POLYNOMIAL)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> PlanToSpherePolynome {
      get { return planToSpherePolynome_; }
    }

    /// <summary>Field number for the "ReferenceWidth" field.</summary>
    public const int ReferenceWidthFieldNumber = 8;
    private int referenceWidth_;
    /// <summary>
    /// Reference width and height for which density parameter is correct. Defaults to the available pixels, but might be
    /// unequal if a zoom is applied
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReferenceWidth {
      get { return referenceWidth_; }
      set {
        referenceWidth_ = value;
      }
    }

    /// <summary>Field number for the "ReferenceHeight" field.</summary>
    public const int ReferenceHeightFieldNumber = 9;
    private int referenceHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReferenceHeight {
      get { return referenceHeight_; }
      set {
        referenceHeight_ = value;
      }
    }

    /// <summary>Field number for the "CircularRadiusInDegrees" field.</summary>
    public const int CircularRadiusInDegreesFieldNumber = 10;
    private float circularRadiusInDegrees_;
    /// <summary>
    /// Angular radius of the fish-eye circle (in angular distance in degrees) Optional. Shall be zero if not set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CircularRadiusInDegrees {
      get { return circularRadiusInDegrees_; }
      set {
        circularRadiusInDegrees_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PolynomialSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PolynomialSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CenterU != other.CenterU) return false;
      if (CenterV != other.CenterV) return false;
      if (AffineParameterC != other.AffineParameterC) return false;
      if (AffineParameterD != other.AffineParameterD) return false;
      if (AffineParameterE != other.AffineParameterE) return false;
      if(!sphereToPlanPolynome_.Equals(other.sphereToPlanPolynome_)) return false;
      if(!planToSpherePolynome_.Equals(other.planToSpherePolynome_)) return false;
      if (ReferenceWidth != other.ReferenceWidth) return false;
      if (ReferenceHeight != other.ReferenceHeight) return false;
      if (CircularRadiusInDegrees != other.CircularRadiusInDegrees) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CenterU != 0F) hash ^= CenterU.GetHashCode();
      if (CenterV != 0F) hash ^= CenterV.GetHashCode();
      if (AffineParameterC != 0F) hash ^= AffineParameterC.GetHashCode();
      if (AffineParameterD != 0F) hash ^= AffineParameterD.GetHashCode();
      if (AffineParameterE != 0F) hash ^= AffineParameterE.GetHashCode();
      hash ^= sphereToPlanPolynome_.GetHashCode();
      hash ^= planToSpherePolynome_.GetHashCode();
      if (ReferenceWidth != 0) hash ^= ReferenceWidth.GetHashCode();
      if (ReferenceHeight != 0) hash ^= ReferenceHeight.GetHashCode();
      if (CircularRadiusInDegrees != 0F) hash ^= CircularRadiusInDegrees.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CenterU != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(CenterU);
      }
      if (CenterV != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(CenterV);
      }
      if (AffineParameterC != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(AffineParameterC);
      }
      if (AffineParameterD != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(AffineParameterD);
      }
      if (AffineParameterE != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(AffineParameterE);
      }
      sphereToPlanPolynome_.WriteTo(output, _repeated_sphereToPlanPolynome_codec);
      planToSpherePolynome_.WriteTo(output, _repeated_planToSpherePolynome_codec);
      if (ReferenceWidth != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ReferenceWidth);
      }
      if (ReferenceHeight != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ReferenceHeight);
      }
      if (CircularRadiusInDegrees != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(CircularRadiusInDegrees);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CenterU != 0F) {
        size += 1 + 4;
      }
      if (CenterV != 0F) {
        size += 1 + 4;
      }
      if (AffineParameterC != 0F) {
        size += 1 + 4;
      }
      if (AffineParameterD != 0F) {
        size += 1 + 4;
      }
      if (AffineParameterE != 0F) {
        size += 1 + 4;
      }
      size += sphereToPlanPolynome_.CalculateSize(_repeated_sphereToPlanPolynome_codec);
      size += planToSpherePolynome_.CalculateSize(_repeated_planToSpherePolynome_codec);
      if (ReferenceWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReferenceWidth);
      }
      if (ReferenceHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReferenceHeight);
      }
      if (CircularRadiusInDegrees != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PolynomialSettings other) {
      if (other == null) {
        return;
      }
      if (other.CenterU != 0F) {
        CenterU = other.CenterU;
      }
      if (other.CenterV != 0F) {
        CenterV = other.CenterV;
      }
      if (other.AffineParameterC != 0F) {
        AffineParameterC = other.AffineParameterC;
      }
      if (other.AffineParameterD != 0F) {
        AffineParameterD = other.AffineParameterD;
      }
      if (other.AffineParameterE != 0F) {
        AffineParameterE = other.AffineParameterE;
      }
      sphereToPlanPolynome_.Add(other.sphereToPlanPolynome_);
      planToSpherePolynome_.Add(other.planToSpherePolynome_);
      if (other.ReferenceWidth != 0) {
        ReferenceWidth = other.ReferenceWidth;
      }
      if (other.ReferenceHeight != 0) {
        ReferenceHeight = other.ReferenceHeight;
      }
      if (other.CircularRadiusInDegrees != 0F) {
        CircularRadiusInDegrees = other.CircularRadiusInDegrees;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            CenterU = input.ReadFloat();
            break;
          }
          case 21: {
            CenterV = input.ReadFloat();
            break;
          }
          case 29: {
            AffineParameterC = input.ReadFloat();
            break;
          }
          case 37: {
            AffineParameterD = input.ReadFloat();
            break;
          }
          case 45: {
            AffineParameterE = input.ReadFloat();
            break;
          }
          case 50:
          case 53: {
            sphereToPlanPolynome_.AddEntriesFrom(input, _repeated_sphereToPlanPolynome_codec);
            break;
          }
          case 58:
          case 61: {
            planToSpherePolynome_.AddEntriesFrom(input, _repeated_planToSpherePolynome_codec);
            break;
          }
          case 64: {
            ReferenceWidth = input.ReadInt32();
            break;
          }
          case 72: {
            ReferenceHeight = input.ReadInt32();
            break;
          }
          case 85: {
            CircularRadiusInDegrees = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IdealLensModelSettings : pb::IMessage<IdealLensModelSettings> {
    private static readonly pb::MessageParser<IdealLensModelSettings> _parser = new pb::MessageParser<IdealLensModelSettings>(() => new IdealLensModelSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdealLensModelSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdealLensModelSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdealLensModelSettings(IdealLensModelSettings other) : this() {
      focalLength_ = other.focalLength_;
      sensorPixelDensity_ = other.sensorPixelDensity_;
      referenceWidth_ = other.referenceWidth_;
      referenceHeight_ = other.referenceHeight_;
      circularRadiusInDegrees_ = other.circularRadiusInDegrees_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdealLensModelSettings Clone() {
      return new IdealLensModelSettings(this);
    }

    /// <summary>Field number for the "FocalLength" field.</summary>
    public const int FocalLengthFieldNumber = 1;
    private float focalLength_;
    /// <summary>
    /// Effective focal length for the lens in millimeters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FocalLength {
      get { return focalLength_; }
      set {
        focalLength_ = value;
      }
    }

    /// <summary>Field number for the "SensorPixelDensity" field.</summary>
    public const int SensorPixelDensityFieldNumber = 2;
    private float sensorPixelDensity_;
    /// <summary>
    /// Pixel density for the sensor in 1/(mm^2).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SensorPixelDensity {
      get { return sensorPixelDensity_; }
      set {
        sensorPixelDensity_ = value;
      }
    }

    /// <summary>Field number for the "ReferenceWidth" field.</summary>
    public const int ReferenceWidthFieldNumber = 3;
    private int referenceWidth_;
    /// <summary>
    /// Reference width and height for which density parameter is correct. Defaults to the available pixels, but might be
    /// unequal if a zoom is applied
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReferenceWidth {
      get { return referenceWidth_; }
      set {
        referenceWidth_ = value;
      }
    }

    /// <summary>Field number for the "ReferenceHeight" field.</summary>
    public const int ReferenceHeightFieldNumber = 4;
    private int referenceHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReferenceHeight {
      get { return referenceHeight_; }
      set {
        referenceHeight_ = value;
      }
    }

    /// <summary>Field number for the "CircularRadiusInDegrees" field.</summary>
    public const int CircularRadiusInDegreesFieldNumber = 5;
    private float circularRadiusInDegrees_;
    /// <summary>
    /// Angular radius of the fish-eye circle (in angular distance in degrees). Shall be zero if not set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CircularRadiusInDegrees {
      get { return circularRadiusInDegrees_; }
      set {
        circularRadiusInDegrees_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdealLensModelSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdealLensModelSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FocalLength != other.FocalLength) return false;
      if (SensorPixelDensity != other.SensorPixelDensity) return false;
      if (ReferenceWidth != other.ReferenceWidth) return false;
      if (ReferenceHeight != other.ReferenceHeight) return false;
      if (CircularRadiusInDegrees != other.CircularRadiusInDegrees) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FocalLength != 0F) hash ^= FocalLength.GetHashCode();
      if (SensorPixelDensity != 0F) hash ^= SensorPixelDensity.GetHashCode();
      if (ReferenceWidth != 0) hash ^= ReferenceWidth.GetHashCode();
      if (ReferenceHeight != 0) hash ^= ReferenceHeight.GetHashCode();
      if (CircularRadiusInDegrees != 0F) hash ^= CircularRadiusInDegrees.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FocalLength != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(FocalLength);
      }
      if (SensorPixelDensity != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(SensorPixelDensity);
      }
      if (ReferenceWidth != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ReferenceWidth);
      }
      if (ReferenceHeight != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ReferenceHeight);
      }
      if (CircularRadiusInDegrees != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(CircularRadiusInDegrees);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FocalLength != 0F) {
        size += 1 + 4;
      }
      if (SensorPixelDensity != 0F) {
        size += 1 + 4;
      }
      if (ReferenceWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReferenceWidth);
      }
      if (ReferenceHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReferenceHeight);
      }
      if (CircularRadiusInDegrees != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdealLensModelSettings other) {
      if (other == null) {
        return;
      }
      if (other.FocalLength != 0F) {
        FocalLength = other.FocalLength;
      }
      if (other.SensorPixelDensity != 0F) {
        SensorPixelDensity = other.SensorPixelDensity;
      }
      if (other.ReferenceWidth != 0) {
        ReferenceWidth = other.ReferenceWidth;
      }
      if (other.ReferenceHeight != 0) {
        ReferenceHeight = other.ReferenceHeight;
      }
      if (other.CircularRadiusInDegrees != 0F) {
        CircularRadiusInDegrees = other.CircularRadiusInDegrees;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            FocalLength = input.ReadFloat();
            break;
          }
          case 21: {
            SensorPixelDensity = input.ReadFloat();
            break;
          }
          case 24: {
            ReferenceWidth = input.ReadInt32();
            break;
          }
          case 32: {
            ReferenceHeight = input.ReadInt32();
            break;
          }
          case 45: {
            CircularRadiusInDegrees = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FishEyeSettings : pb::IMessage<FishEyeSettings> {
    private static readonly pb::MessageParser<FishEyeSettings> _parser = new pb::MessageParser<FishEyeSettings>(() => new FishEyeSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishEyeSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishEyeSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishEyeSettings(FishEyeSettings other) : this() {
      fisheyePreset_ = other.fisheyePreset_;
      deprecatedCameraAndLens_ = other.deprecatedCameraAndLens_;
      lensType_ = other.lensType_;
      IdealLensModelSettings = other.idealLensModelSettings_ != null ? other.IdealLensModelSettings.Clone() : null;
      PolynomialSettings = other.polynomialSettings_ != null ? other.PolynomialSettings.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishEyeSettings Clone() {
      return new FishEyeSettings(this);
    }

    /// <summary>Field number for the "FisheyePreset" field.</summary>
    public const int FisheyePresetFieldNumber = 1;
    private string fisheyePreset_ = "";
    /// <summary>
    /// Particular Camera and Lens combination that determine the default values for the rest of the fisheye settings.
    /// All other fisheye settings are optional and fallback to a default unless "CUSTOM_FISHEYE_CAMERA_AND_LENS" is
    /// selected, then defaults are not available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FisheyePreset {
      get { return fisheyePreset_; }
      set {
        fisheyePreset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DeprecatedCameraAndLens" field.</summary>
    public const int DeprecatedCameraAndLensFieldNumber = 2;
    private global::com.tiledmedia.clearvr.cvrinterface.FishEyeCameraAndLens deprecatedCameraAndLens_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.FishEyeCameraAndLens DeprecatedCameraAndLens {
      get { return deprecatedCameraAndLens_; }
      set {
        deprecatedCameraAndLens_ = value;
      }
    }

    /// <summary>Field number for the "LensType" field.</summary>
    public const int LensTypeFieldNumber = 3;
    private global::com.tiledmedia.clearvr.cvrinterface.FishEyeLensType lensType_ = 0;
    /// <summary>
    /// Shape of the fisheye lens.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.FishEyeLensType LensType {
      get { return lensType_; }
      set {
        lensType_ = value;
      }
    }

    /// <summary>Field number for the "IdealLensModelSettings" field.</summary>
    public const int IdealLensModelSettingsFieldNumber = 4;
    private global::com.tiledmedia.clearvr.cvrinterface.IdealLensModelSettings idealLensModelSettings_;
    /// <summary>
    /// IdealLensModelSettings is used to override lens setting of lens type equisolid and equidistant
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.IdealLensModelSettings IdealLensModelSettings {
      get { return idealLensModelSettings_; }
      set {
        idealLensModelSettings_ = value;
      }
    }

    /// <summary>Field number for the "PolynomialSettings" field.</summary>
    public const int PolynomialSettingsFieldNumber = 5;
    private global::com.tiledmedia.clearvr.cvrinterface.PolynomialSettings polynomialSettings_;
    /// <summary>
    /// PolynomialSettings is used to override lens setting of lens type polynomial
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.PolynomialSettings PolynomialSettings {
      get { return polynomialSettings_; }
      set {
        polynomialSettings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishEyeSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishEyeSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FisheyePreset != other.FisheyePreset) return false;
      if (DeprecatedCameraAndLens != other.DeprecatedCameraAndLens) return false;
      if (LensType != other.LensType) return false;
      if (!object.Equals(IdealLensModelSettings, other.IdealLensModelSettings)) return false;
      if (!object.Equals(PolynomialSettings, other.PolynomialSettings)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FisheyePreset.Length != 0) hash ^= FisheyePreset.GetHashCode();
      if (DeprecatedCameraAndLens != 0) hash ^= DeprecatedCameraAndLens.GetHashCode();
      if (LensType != 0) hash ^= LensType.GetHashCode();
      if (idealLensModelSettings_ != null) hash ^= IdealLensModelSettings.GetHashCode();
      if (polynomialSettings_ != null) hash ^= PolynomialSettings.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FisheyePreset.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FisheyePreset);
      }
      if (DeprecatedCameraAndLens != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DeprecatedCameraAndLens);
      }
      if (LensType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) LensType);
      }
      if (idealLensModelSettings_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(IdealLensModelSettings);
      }
      if (polynomialSettings_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PolynomialSettings);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FisheyePreset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FisheyePreset);
      }
      if (DeprecatedCameraAndLens != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeprecatedCameraAndLens);
      }
      if (LensType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LensType);
      }
      if (idealLensModelSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdealLensModelSettings);
      }
      if (polynomialSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PolynomialSettings);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishEyeSettings other) {
      if (other == null) {
        return;
      }
      if (other.FisheyePreset.Length != 0) {
        FisheyePreset = other.FisheyePreset;
      }
      if (other.DeprecatedCameraAndLens != 0) {
        DeprecatedCameraAndLens = other.DeprecatedCameraAndLens;
      }
      if (other.LensType != 0) {
        LensType = other.LensType;
      }
      if (other.idealLensModelSettings_ != null) {
        if (idealLensModelSettings_ == null) {
          idealLensModelSettings_ = new global::com.tiledmedia.clearvr.cvrinterface.IdealLensModelSettings();
        }
        IdealLensModelSettings.MergeFrom(other.IdealLensModelSettings);
      }
      if (other.polynomialSettings_ != null) {
        if (polynomialSettings_ == null) {
          polynomialSettings_ = new global::com.tiledmedia.clearvr.cvrinterface.PolynomialSettings();
        }
        PolynomialSettings.MergeFrom(other.PolynomialSettings);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FisheyePreset = input.ReadString();
            break;
          }
          case 16: {
            deprecatedCameraAndLens_ = (global::com.tiledmedia.clearvr.cvrinterface.FishEyeCameraAndLens) input.ReadEnum();
            break;
          }
          case 24: {
            lensType_ = (global::com.tiledmedia.clearvr.cvrinterface.FishEyeLensType) input.ReadEnum();
            break;
          }
          case 34: {
            if (idealLensModelSettings_ == null) {
              idealLensModelSettings_ = new global::com.tiledmedia.clearvr.cvrinterface.IdealLensModelSettings();
            }
            input.ReadMessage(idealLensModelSettings_);
            break;
          }
          case 42: {
            if (polynomialSettings_ == null) {
              polynomialSettings_ = new global::com.tiledmedia.clearvr.cvrinterface.PolynomialSettings();
            }
            input.ReadMessage(polynomialSettings_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AudioTrackAndPlaybackParametersMediaFlow : pb::IMessage<AudioTrackAndPlaybackParametersMediaFlow> {
    private static readonly pb::MessageParser<AudioTrackAndPlaybackParametersMediaFlow> _parser = new pb::MessageParser<AudioTrackAndPlaybackParametersMediaFlow>(() => new AudioTrackAndPlaybackParametersMediaFlow());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioTrackAndPlaybackParametersMediaFlow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioTrackAndPlaybackParametersMediaFlow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioTrackAndPlaybackParametersMediaFlow(AudioTrackAndPlaybackParametersMediaFlow other) : this() {
      audioTrackIndex_ = other.audioTrackIndex_;
      audioDecoderType_ = other.audioDecoderType_;
      audioPlaybackEngineType_ = other.audioPlaybackEngineType_;
      audioGain_ = other.audioGain_;
      contentID_ = other.contentID_;
      estimatedPlaybackLatencyInNanoseconds_ = other.estimatedPlaybackLatencyInNanoseconds_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioTrackAndPlaybackParametersMediaFlow Clone() {
      return new AudioTrackAndPlaybackParametersMediaFlow(this);
    }

    /// <summary>Field number for the "AudioTrackIndex" field.</summary>
    public const int AudioTrackIndexFieldNumber = 1;
    private int audioTrackIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AudioTrackIndex {
      get { return audioTrackIndex_; }
      set {
        audioTrackIndex_ = value;
      }
    }

    /// <summary>Field number for the "AudioDecoderType" field.</summary>
    public const int AudioDecoderTypeFieldNumber = 2;
    private int audioDecoderType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AudioDecoderType {
      get { return audioDecoderType_; }
      set {
        audioDecoderType_ = value;
      }
    }

    /// <summary>Field number for the "AudioPlaybackEngineType" field.</summary>
    public const int AudioPlaybackEngineTypeFieldNumber = 3;
    private int audioPlaybackEngineType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AudioPlaybackEngineType {
      get { return audioPlaybackEngineType_; }
      set {
        audioPlaybackEngineType_ = value;
      }
    }

    /// <summary>Field number for the "AudioGain" field.</summary>
    public const int AudioGainFieldNumber = 4;
    private float audioGain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AudioGain {
      get { return audioGain_; }
      set {
        audioGain_ = value;
      }
    }

    /// <summary>Field number for the "ContentID" field.</summary>
    public const int ContentIDFieldNumber = 5;
    private int contentID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContentID {
      get { return contentID_; }
      set {
        contentID_ = value;
      }
    }

    /// <summary>Field number for the "EstimatedPlaybackLatencyInNanoseconds" field.</summary>
    public const int EstimatedPlaybackLatencyInNanosecondsFieldNumber = 6;
    private long estimatedPlaybackLatencyInNanoseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EstimatedPlaybackLatencyInNanoseconds {
      get { return estimatedPlaybackLatencyInNanoseconds_; }
      set {
        estimatedPlaybackLatencyInNanoseconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioTrackAndPlaybackParametersMediaFlow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioTrackAndPlaybackParametersMediaFlow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AudioTrackIndex != other.AudioTrackIndex) return false;
      if (AudioDecoderType != other.AudioDecoderType) return false;
      if (AudioPlaybackEngineType != other.AudioPlaybackEngineType) return false;
      if (AudioGain != other.AudioGain) return false;
      if (ContentID != other.ContentID) return false;
      if (EstimatedPlaybackLatencyInNanoseconds != other.EstimatedPlaybackLatencyInNanoseconds) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AudioTrackIndex != 0) hash ^= AudioTrackIndex.GetHashCode();
      if (AudioDecoderType != 0) hash ^= AudioDecoderType.GetHashCode();
      if (AudioPlaybackEngineType != 0) hash ^= AudioPlaybackEngineType.GetHashCode();
      if (AudioGain != 0F) hash ^= AudioGain.GetHashCode();
      if (ContentID != 0) hash ^= ContentID.GetHashCode();
      if (EstimatedPlaybackLatencyInNanoseconds != 0L) hash ^= EstimatedPlaybackLatencyInNanoseconds.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AudioTrackIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AudioTrackIndex);
      }
      if (AudioDecoderType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AudioDecoderType);
      }
      if (AudioPlaybackEngineType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AudioPlaybackEngineType);
      }
      if (AudioGain != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(AudioGain);
      }
      if (ContentID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ContentID);
      }
      if (EstimatedPlaybackLatencyInNanoseconds != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(EstimatedPlaybackLatencyInNanoseconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AudioTrackIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AudioTrackIndex);
      }
      if (AudioDecoderType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AudioDecoderType);
      }
      if (AudioPlaybackEngineType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AudioPlaybackEngineType);
      }
      if (AudioGain != 0F) {
        size += 1 + 4;
      }
      if (ContentID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContentID);
      }
      if (EstimatedPlaybackLatencyInNanoseconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EstimatedPlaybackLatencyInNanoseconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioTrackAndPlaybackParametersMediaFlow other) {
      if (other == null) {
        return;
      }
      if (other.AudioTrackIndex != 0) {
        AudioTrackIndex = other.AudioTrackIndex;
      }
      if (other.AudioDecoderType != 0) {
        AudioDecoderType = other.AudioDecoderType;
      }
      if (other.AudioPlaybackEngineType != 0) {
        AudioPlaybackEngineType = other.AudioPlaybackEngineType;
      }
      if (other.AudioGain != 0F) {
        AudioGain = other.AudioGain;
      }
      if (other.ContentID != 0) {
        ContentID = other.ContentID;
      }
      if (other.EstimatedPlaybackLatencyInNanoseconds != 0L) {
        EstimatedPlaybackLatencyInNanoseconds = other.EstimatedPlaybackLatencyInNanoseconds;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AudioTrackIndex = input.ReadInt32();
            break;
          }
          case 16: {
            AudioDecoderType = input.ReadInt32();
            break;
          }
          case 24: {
            AudioPlaybackEngineType = input.ReadInt32();
            break;
          }
          case 37: {
            AudioGain = input.ReadFloat();
            break;
          }
          case 40: {
            ContentID = input.ReadInt32();
            break;
          }
          case 48: {
            EstimatedPlaybackLatencyInNanoseconds = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VideoDecoderCapabilitiesMediaFlow : pb::IMessage<VideoDecoderCapabilitiesMediaFlow> {
    private static readonly pb::MessageParser<VideoDecoderCapabilitiesMediaFlow> _parser = new pb::MessageParser<VideoDecoderCapabilitiesMediaFlow>(() => new VideoDecoderCapabilitiesMediaFlow());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoDecoderCapabilitiesMediaFlow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoDecoderCapabilitiesMediaFlow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoDecoderCapabilitiesMediaFlow(VideoDecoderCapabilitiesMediaFlow other) : this() {
      decoderName_ = other.decoderName_;
      maximumVideoLevelSupportedByDecoder_ = other.maximumVideoLevelSupportedByDecoder_;
      maximumVideoLevelSupportedBySdk_ = other.maximumVideoLevelSupportedBySdk_;
      maximumVideoLevelSupportedByDecoderAndSdk_ = other.maximumVideoLevelSupportedByDecoderAndSdk_;
      mimetype_ = other.mimetype_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoDecoderCapabilitiesMediaFlow Clone() {
      return new VideoDecoderCapabilitiesMediaFlow(this);
    }

    /// <summary>Field number for the "DecoderName" field.</summary>
    public const int DecoderNameFieldNumber = 1;
    private string decoderName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DecoderName {
      get { return decoderName_; }
      set {
        decoderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaximumVideoLevelSupportedByDecoder" field.</summary>
    public const int MaximumVideoLevelSupportedByDecoderFieldNumber = 2;
    private string maximumVideoLevelSupportedByDecoder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaximumVideoLevelSupportedByDecoder {
      get { return maximumVideoLevelSupportedByDecoder_; }
      set {
        maximumVideoLevelSupportedByDecoder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maximumVideoLevelSupportedBySdk" field.</summary>
    public const int MaximumVideoLevelSupportedBySdkFieldNumber = 3;
    private string maximumVideoLevelSupportedBySdk_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaximumVideoLevelSupportedBySdk {
      get { return maximumVideoLevelSupportedBySdk_; }
      set {
        maximumVideoLevelSupportedBySdk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maximumVideoLevelSupportedByDecoderAndSdk" field.</summary>
    public const int MaximumVideoLevelSupportedByDecoderAndSdkFieldNumber = 4;
    private string maximumVideoLevelSupportedByDecoderAndSdk_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaximumVideoLevelSupportedByDecoderAndSdk {
      get { return maximumVideoLevelSupportedByDecoderAndSdk_; }
      set {
        maximumVideoLevelSupportedByDecoderAndSdk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mimetype" field.</summary>
    public const int MimetypeFieldNumber = 5;
    private string mimetype_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mimetype {
      get { return mimetype_; }
      set {
        mimetype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VideoDecoderCapabilitiesMediaFlow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VideoDecoderCapabilitiesMediaFlow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DecoderName != other.DecoderName) return false;
      if (MaximumVideoLevelSupportedByDecoder != other.MaximumVideoLevelSupportedByDecoder) return false;
      if (MaximumVideoLevelSupportedBySdk != other.MaximumVideoLevelSupportedBySdk) return false;
      if (MaximumVideoLevelSupportedByDecoderAndSdk != other.MaximumVideoLevelSupportedByDecoderAndSdk) return false;
      if (Mimetype != other.Mimetype) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DecoderName.Length != 0) hash ^= DecoderName.GetHashCode();
      if (MaximumVideoLevelSupportedByDecoder.Length != 0) hash ^= MaximumVideoLevelSupportedByDecoder.GetHashCode();
      if (MaximumVideoLevelSupportedBySdk.Length != 0) hash ^= MaximumVideoLevelSupportedBySdk.GetHashCode();
      if (MaximumVideoLevelSupportedByDecoderAndSdk.Length != 0) hash ^= MaximumVideoLevelSupportedByDecoderAndSdk.GetHashCode();
      if (Mimetype.Length != 0) hash ^= Mimetype.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DecoderName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DecoderName);
      }
      if (MaximumVideoLevelSupportedByDecoder.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MaximumVideoLevelSupportedByDecoder);
      }
      if (MaximumVideoLevelSupportedBySdk.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MaximumVideoLevelSupportedBySdk);
      }
      if (MaximumVideoLevelSupportedByDecoderAndSdk.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MaximumVideoLevelSupportedByDecoderAndSdk);
      }
      if (Mimetype.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Mimetype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DecoderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DecoderName);
      }
      if (MaximumVideoLevelSupportedByDecoder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaximumVideoLevelSupportedByDecoder);
      }
      if (MaximumVideoLevelSupportedBySdk.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaximumVideoLevelSupportedBySdk);
      }
      if (MaximumVideoLevelSupportedByDecoderAndSdk.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaximumVideoLevelSupportedByDecoderAndSdk);
      }
      if (Mimetype.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mimetype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VideoDecoderCapabilitiesMediaFlow other) {
      if (other == null) {
        return;
      }
      if (other.DecoderName.Length != 0) {
        DecoderName = other.DecoderName;
      }
      if (other.MaximumVideoLevelSupportedByDecoder.Length != 0) {
        MaximumVideoLevelSupportedByDecoder = other.MaximumVideoLevelSupportedByDecoder;
      }
      if (other.MaximumVideoLevelSupportedBySdk.Length != 0) {
        MaximumVideoLevelSupportedBySdk = other.MaximumVideoLevelSupportedBySdk;
      }
      if (other.MaximumVideoLevelSupportedByDecoderAndSdk.Length != 0) {
        MaximumVideoLevelSupportedByDecoderAndSdk = other.MaximumVideoLevelSupportedByDecoderAndSdk;
      }
      if (other.Mimetype.Length != 0) {
        Mimetype = other.Mimetype;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DecoderName = input.ReadString();
            break;
          }
          case 18: {
            MaximumVideoLevelSupportedByDecoder = input.ReadString();
            break;
          }
          case 26: {
            MaximumVideoLevelSupportedBySdk = input.ReadString();
            break;
          }
          case 34: {
            MaximumVideoLevelSupportedByDecoderAndSdk = input.ReadString();
            break;
          }
          case 42: {
            Mimetype = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubtitleInfoGroup : pb::IMessage<SubtitleInfoGroup> {
    private static readonly pb::MessageParser<SubtitleInfoGroup> _parser = new pb::MessageParser<SubtitleInfoGroup>(() => new SubtitleInfoGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubtitleInfoGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubtitleInfoGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubtitleInfoGroup(SubtitleInfoGroup other) : this() {
      subtitleInfos_ = other.subtitleInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubtitleInfoGroup Clone() {
      return new SubtitleInfoGroup(this);
    }

    /// <summary>Field number for the "subtitleInfos" field.</summary>
    public const int SubtitleInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.tiledmedia.clearvr.cvrinterface.SubtitleInfo> _repeated_subtitleInfos_codec
        = pb::FieldCodec.ForMessage(10, global::com.tiledmedia.clearvr.cvrinterface.SubtitleInfo.Parser);
    private readonly pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.SubtitleInfo> subtitleInfos_ = new pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.SubtitleInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.SubtitleInfo> SubtitleInfos {
      get { return subtitleInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubtitleInfoGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubtitleInfoGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!subtitleInfos_.Equals(other.subtitleInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= subtitleInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      subtitleInfos_.WriteTo(output, _repeated_subtitleInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += subtitleInfos_.CalculateSize(_repeated_subtitleInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubtitleInfoGroup other) {
      if (other == null) {
        return;
      }
      subtitleInfos_.Add(other.subtitleInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            subtitleInfos_.AddEntriesFrom(input, _repeated_subtitleInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubtitleInfo : pb::IMessage<SubtitleInfo> {
    private static readonly pb::MessageParser<SubtitleInfo> _parser = new pb::MessageParser<SubtitleInfo>(() => new SubtitleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubtitleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubtitleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubtitleInfo(SubtitleInfo other) : this() {
      text_ = other.text_;
      cTSStartInMicroseconds_ = other.cTSStartInMicroseconds_;
      cTSEndInMicroseconds_ = other.cTSEndInMicroseconds_;
      feedIndex_ = other.feedIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubtitleInfo Clone() {
      return new SubtitleInfo(this);
    }

    /// <summary>Field number for the "Text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CTSStartInMicroseconds" field.</summary>
    public const int CTSStartInMicrosecondsFieldNumber = 2;
    private long cTSStartInMicroseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CTSStartInMicroseconds {
      get { return cTSStartInMicroseconds_; }
      set {
        cTSStartInMicroseconds_ = value;
      }
    }

    /// <summary>Field number for the "CTSEndInMicroseconds" field.</summary>
    public const int CTSEndInMicrosecondsFieldNumber = 3;
    private long cTSEndInMicroseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CTSEndInMicroseconds {
      get { return cTSEndInMicroseconds_; }
      set {
        cTSEndInMicroseconds_ = value;
      }
    }

    /// <summary>Field number for the "FeedIndex" field.</summary>
    public const int FeedIndexFieldNumber = 4;
    private int feedIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FeedIndex {
      get { return feedIndex_; }
      set {
        feedIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubtitleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubtitleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      if (CTSStartInMicroseconds != other.CTSStartInMicroseconds) return false;
      if (CTSEndInMicroseconds != other.CTSEndInMicroseconds) return false;
      if (FeedIndex != other.FeedIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (CTSStartInMicroseconds != 0L) hash ^= CTSStartInMicroseconds.GetHashCode();
      if (CTSEndInMicroseconds != 0L) hash ^= CTSEndInMicroseconds.GetHashCode();
      if (FeedIndex != 0) hash ^= FeedIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (CTSStartInMicroseconds != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CTSStartInMicroseconds);
      }
      if (CTSEndInMicroseconds != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CTSEndInMicroseconds);
      }
      if (FeedIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FeedIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (CTSStartInMicroseconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CTSStartInMicroseconds);
      }
      if (CTSEndInMicroseconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CTSEndInMicroseconds);
      }
      if (FeedIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FeedIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubtitleInfo other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.CTSStartInMicroseconds != 0L) {
        CTSStartInMicroseconds = other.CTSStartInMicroseconds;
      }
      if (other.CTSEndInMicroseconds != 0L) {
        CTSEndInMicroseconds = other.CTSEndInMicroseconds;
      }
      if (other.FeedIndex != 0) {
        FeedIndex = other.FeedIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
          case 16: {
            CTSStartInMicroseconds = input.ReadInt64();
            break;
          }
          case 24: {
            CTSEndInMicroseconds = input.ReadInt64();
            break;
          }
          case 32: {
            FeedIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ViewportAndDisplayObjectPose : pb::IMessage<ViewportAndDisplayObjectPose> {
    private static readonly pb::MessageParser<ViewportAndDisplayObjectPose> _parser = new pb::MessageParser<ViewportAndDisplayObjectPose>(() => new ViewportAndDisplayObjectPose());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ViewportAndDisplayObjectPose> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewportAndDisplayObjectPose() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewportAndDisplayObjectPose(ViewportAndDisplayObjectPose other) : this() {
      ViewportPosition = other.viewportPosition_ != null ? other.ViewportPosition.Clone() : null;
      ViewportOrientation = other.viewportOrientation_ != null ? other.ViewportOrientation.Clone() : null;
      DisplayObjectPosition = other.displayObjectPosition_ != null ? other.DisplayObjectPosition.Clone() : null;
      DisplayObjectOrientation = other.displayObjectOrientation_ != null ? other.DisplayObjectOrientation.Clone() : null;
      DisplayObjectScale = other.displayObjectScale_ != null ? other.DisplayObjectScale.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewportAndDisplayObjectPose Clone() {
      return new ViewportAndDisplayObjectPose(this);
    }

    /// <summary>Field number for the "ViewportPosition" field.</summary>
    public const int ViewportPositionFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.Vec3 viewportPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.Vec3 ViewportPosition {
      get { return viewportPosition_; }
      set {
        viewportPosition_ = value;
      }
    }

    /// <summary>Field number for the "ViewportOrientation" field.</summary>
    public const int ViewportOrientationFieldNumber = 2;
    private global::com.tiledmedia.clearvr.cvrinterface.Quaternion viewportOrientation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.Quaternion ViewportOrientation {
      get { return viewportOrientation_; }
      set {
        viewportOrientation_ = value;
      }
    }

    /// <summary>Field number for the "DisplayObjectPosition" field.</summary>
    public const int DisplayObjectPositionFieldNumber = 3;
    private global::com.tiledmedia.clearvr.cvrinterface.Vec3 displayObjectPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.Vec3 DisplayObjectPosition {
      get { return displayObjectPosition_; }
      set {
        displayObjectPosition_ = value;
      }
    }

    /// <summary>Field number for the "DisplayObjectOrientation" field.</summary>
    public const int DisplayObjectOrientationFieldNumber = 4;
    private global::com.tiledmedia.clearvr.cvrinterface.Quaternion displayObjectOrientation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.Quaternion DisplayObjectOrientation {
      get { return displayObjectOrientation_; }
      set {
        displayObjectOrientation_ = value;
      }
    }

    /// <summary>Field number for the "DisplayObjectScale" field.</summary>
    public const int DisplayObjectScaleFieldNumber = 5;
    private global::com.tiledmedia.clearvr.cvrinterface.Vec3 displayObjectScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.Vec3 DisplayObjectScale {
      get { return displayObjectScale_; }
      set {
        displayObjectScale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ViewportAndDisplayObjectPose);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ViewportAndDisplayObjectPose other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ViewportPosition, other.ViewportPosition)) return false;
      if (!object.Equals(ViewportOrientation, other.ViewportOrientation)) return false;
      if (!object.Equals(DisplayObjectPosition, other.DisplayObjectPosition)) return false;
      if (!object.Equals(DisplayObjectOrientation, other.DisplayObjectOrientation)) return false;
      if (!object.Equals(DisplayObjectScale, other.DisplayObjectScale)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (viewportPosition_ != null) hash ^= ViewportPosition.GetHashCode();
      if (viewportOrientation_ != null) hash ^= ViewportOrientation.GetHashCode();
      if (displayObjectPosition_ != null) hash ^= DisplayObjectPosition.GetHashCode();
      if (displayObjectOrientation_ != null) hash ^= DisplayObjectOrientation.GetHashCode();
      if (displayObjectScale_ != null) hash ^= DisplayObjectScale.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (viewportPosition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ViewportPosition);
      }
      if (viewportOrientation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ViewportOrientation);
      }
      if (displayObjectPosition_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DisplayObjectPosition);
      }
      if (displayObjectOrientation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DisplayObjectOrientation);
      }
      if (displayObjectScale_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DisplayObjectScale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (viewportPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ViewportPosition);
      }
      if (viewportOrientation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ViewportOrientation);
      }
      if (displayObjectPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayObjectPosition);
      }
      if (displayObjectOrientation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayObjectOrientation);
      }
      if (displayObjectScale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayObjectScale);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ViewportAndDisplayObjectPose other) {
      if (other == null) {
        return;
      }
      if (other.viewportPosition_ != null) {
        if (viewportPosition_ == null) {
          viewportPosition_ = new global::com.tiledmedia.clearvr.cvrinterface.Vec3();
        }
        ViewportPosition.MergeFrom(other.ViewportPosition);
      }
      if (other.viewportOrientation_ != null) {
        if (viewportOrientation_ == null) {
          viewportOrientation_ = new global::com.tiledmedia.clearvr.cvrinterface.Quaternion();
        }
        ViewportOrientation.MergeFrom(other.ViewportOrientation);
      }
      if (other.displayObjectPosition_ != null) {
        if (displayObjectPosition_ == null) {
          displayObjectPosition_ = new global::com.tiledmedia.clearvr.cvrinterface.Vec3();
        }
        DisplayObjectPosition.MergeFrom(other.DisplayObjectPosition);
      }
      if (other.displayObjectOrientation_ != null) {
        if (displayObjectOrientation_ == null) {
          displayObjectOrientation_ = new global::com.tiledmedia.clearvr.cvrinterface.Quaternion();
        }
        DisplayObjectOrientation.MergeFrom(other.DisplayObjectOrientation);
      }
      if (other.displayObjectScale_ != null) {
        if (displayObjectScale_ == null) {
          displayObjectScale_ = new global::com.tiledmedia.clearvr.cvrinterface.Vec3();
        }
        DisplayObjectScale.MergeFrom(other.DisplayObjectScale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (viewportPosition_ == null) {
              viewportPosition_ = new global::com.tiledmedia.clearvr.cvrinterface.Vec3();
            }
            input.ReadMessage(viewportPosition_);
            break;
          }
          case 18: {
            if (viewportOrientation_ == null) {
              viewportOrientation_ = new global::com.tiledmedia.clearvr.cvrinterface.Quaternion();
            }
            input.ReadMessage(viewportOrientation_);
            break;
          }
          case 26: {
            if (displayObjectPosition_ == null) {
              displayObjectPosition_ = new global::com.tiledmedia.clearvr.cvrinterface.Vec3();
            }
            input.ReadMessage(displayObjectPosition_);
            break;
          }
          case 34: {
            if (displayObjectOrientation_ == null) {
              displayObjectOrientation_ = new global::com.tiledmedia.clearvr.cvrinterface.Quaternion();
            }
            input.ReadMessage(displayObjectOrientation_);
            break;
          }
          case 42: {
            if (displayObjectScale_ == null) {
              displayObjectScale_ = new global::com.tiledmedia.clearvr.cvrinterface.Vec3();
            }
            input.ReadMessage(displayObjectScale_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vec3 : pb::IMessage<Vec3> {
    private static readonly pb::MessageParser<Vec3> _parser = new pb::MessageParser<Vec3>(() => new Vec3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vec3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3(Vec3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3 Clone() {
      return new Vec3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vec3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vec3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= X.GetHashCode();
      if (Y != 0D) hash ^= Y.GetHashCode();
      if (Z != 0D) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vec3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Quaternion : pb::IMessage<Quaternion> {
    private static readonly pb::MessageParser<Quaternion> _parser = new pb::MessageParser<Quaternion>(() => new Quaternion());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Quaternion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion(Quaternion other) : this() {
      w_ = other.w_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion Clone() {
      return new Quaternion(this);
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 1;
    private double w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 4;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Quaternion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Quaternion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (W != other.W) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (W != 0D) hash ^= W.GetHashCode();
      if (X != 0D) hash ^= X.GetHashCode();
      if (Y != 0D) hash ^= Y.GetHashCode();
      if (Z != 0D) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (W != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(W);
      }
      if (X != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (W != 0D) {
        size += 1 + 8;
      }
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Quaternion other) {
      if (other == null) {
        return;
      }
      if (other.W != 0D) {
        W = other.W;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            W = input.ReadDouble();
            break;
          }
          case 17: {
            X = input.ReadDouble();
            break;
          }
          case 25: {
            Y = input.ReadDouble();
            break;
          }
          case 33: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CallCoreRequest : pb::IMessage<CallCoreRequest> {
    private static readonly pb::MessageParser<CallCoreRequest> _parser = new pb::MessageParser<CallCoreRequest>(() => new CallCoreRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallCoreRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallCoreRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallCoreRequest(CallCoreRequest other) : this() {
      callCoreRequestType_ = other.callCoreRequestType_;
      SyncSettings = other.syncSettings_ != null ? other.SyncSettings.Clone() : null;
      ChangePlaybackRateRequest = other.changePlaybackRateRequest_ != null ? other.ChangePlaybackRateRequest.Clone() : null;
      SwitchAbrLevelRequest = other.switchAbrLevelRequest_ != null ? other.SwitchAbrLevelRequest.Clone() : null;
      SetFeedLayoutRequest = other.setFeedLayoutRequest_ != null ? other.SetFeedLayoutRequest.Clone() : null;
      ContentInfoRequest = other.contentInfoRequest_ != null ? other.ContentInfoRequest.Clone() : null;
      ContentListRequest = other.contentListRequest_ != null ? other.ContentListRequest.Clone() : null;
      LoadStateRequest = other.loadStateRequest_ != null ? other.LoadStateRequest.Clone() : null;
      SaveStateRequest = other.saveStateRequest_ != null ? other.SaveStateRequest.Clone() : null;
      LogUploadRequest = other.logUploadRequest_ != null ? other.LogUploadRequest.Clone() : null;
      InitializeLoggingRequest = other.initializeLoggingRequest_ != null ? other.InitializeLoggingRequest.Clone() : null;
      DownloadContentRequest = other.downloadContentRequest_ != null ? other.DownloadContentRequest.Clone() : null;
      TelemetryUpdateCustomDataRequest = other.telemetryUpdateCustomDataRequest_ != null ? other.TelemetryUpdateCustomDataRequest.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallCoreRequest Clone() {
      return new CallCoreRequest(this);
    }

    /// <summary>Field number for the "CallCoreRequestType" field.</summary>
    public const int CallCoreRequestTypeFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.CallCoreRequestType callCoreRequestType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.CallCoreRequestType CallCoreRequestType {
      get { return callCoreRequestType_; }
      set {
        callCoreRequestType_ = value;
      }
    }

    /// <summary>Field number for the "SyncSettings" field.</summary>
    public const int SyncSettingsFieldNumber = 2;
    private global::com.tiledmedia.clearvr.cvrinterface.SyncSettings syncSettings_;
    /// <summary>
    /// request messages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.SyncSettings SyncSettings {
      get { return syncSettings_; }
      set {
        syncSettings_ = value;
      }
    }

    /// <summary>Field number for the "ChangePlaybackRateRequest" field.</summary>
    public const int ChangePlaybackRateRequestFieldNumber = 3;
    private global::com.tiledmedia.clearvr.cvrinterface.ChangePlaybackRateRequest changePlaybackRateRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ChangePlaybackRateRequest ChangePlaybackRateRequest {
      get { return changePlaybackRateRequest_; }
      set {
        changePlaybackRateRequest_ = value;
      }
    }

    /// <summary>Field number for the "SwitchAbrLevelRequest" field.</summary>
    public const int SwitchAbrLevelRequestFieldNumber = 4;
    private global::com.tiledmedia.clearvr.cvrinterface.SwitchAbrLevelRequest switchAbrLevelRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.SwitchAbrLevelRequest SwitchAbrLevelRequest {
      get { return switchAbrLevelRequest_; }
      set {
        switchAbrLevelRequest_ = value;
      }
    }

    /// <summary>Field number for the "SetFeedLayoutRequest" field.</summary>
    public const int SetFeedLayoutRequestFieldNumber = 5;
    private global::com.tiledmedia.clearvr.cvrinterface.SetFeedLayoutParams setFeedLayoutRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.SetFeedLayoutParams SetFeedLayoutRequest {
      get { return setFeedLayoutRequest_; }
      set {
        setFeedLayoutRequest_ = value;
      }
    }

    /// <summary>Field number for the "ContentInfoRequest" field.</summary>
    public const int ContentInfoRequestFieldNumber = 6;
    private global::com.tiledmedia.clearvr.cvrinterface.ContentInfoRequest contentInfoRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ContentInfoRequest ContentInfoRequest {
      get { return contentInfoRequest_; }
      set {
        contentInfoRequest_ = value;
      }
    }

    /// <summary>Field number for the "ContentListRequest" field.</summary>
    public const int ContentListRequestFieldNumber = 7;
    private global::com.tiledmedia.clearvr.cvrinterface.ContentListRequest contentListRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ContentListRequest ContentListRequest {
      get { return contentListRequest_; }
      set {
        contentListRequest_ = value;
      }
    }

    /// <summary>Field number for the "LoadStateRequest" field.</summary>
    public const int LoadStateRequestFieldNumber = 8;
    private global::com.tiledmedia.clearvr.cvrinterface.LoadStateRequest loadStateRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.LoadStateRequest LoadStateRequest {
      get { return loadStateRequest_; }
      set {
        loadStateRequest_ = value;
      }
    }

    /// <summary>Field number for the "SaveStateRequest" field.</summary>
    public const int SaveStateRequestFieldNumber = 9;
    private global::com.tiledmedia.clearvr.cvrinterface.SaveStateRequest saveStateRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.SaveStateRequest SaveStateRequest {
      get { return saveStateRequest_; }
      set {
        saveStateRequest_ = value;
      }
    }

    /// <summary>Field number for the "LogUploadRequest" field.</summary>
    public const int LogUploadRequestFieldNumber = 10;
    private global::com.tiledmedia.clearvr.cvrinterface.LogUploadRequest logUploadRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.LogUploadRequest LogUploadRequest {
      get { return logUploadRequest_; }
      set {
        logUploadRequest_ = value;
      }
    }

    /// <summary>Field number for the "InitializeLoggingRequest" field.</summary>
    public const int InitializeLoggingRequestFieldNumber = 11;
    private global::com.tiledmedia.clearvr.cvrinterface.InitializeLoggingRequest initializeLoggingRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InitializeLoggingRequest InitializeLoggingRequest {
      get { return initializeLoggingRequest_; }
      set {
        initializeLoggingRequest_ = value;
      }
    }

    /// <summary>Field number for the "DownloadContentRequest" field.</summary>
    public const int DownloadContentRequestFieldNumber = 12;
    private global::com.tiledmedia.clearvr.cvrinterface.DownloadContentRequest downloadContentRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.DownloadContentRequest DownloadContentRequest {
      get { return downloadContentRequest_; }
      set {
        downloadContentRequest_ = value;
      }
    }

    /// <summary>Field number for the "TelemetryUpdateCustomDataRequest" field.</summary>
    public const int TelemetryUpdateCustomDataRequestFieldNumber = 13;
    private global::com.tiledmedia.clearvr.cvrinterface.TelemetryUpdateCustomData telemetryUpdateCustomDataRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.TelemetryUpdateCustomData TelemetryUpdateCustomDataRequest {
      get { return telemetryUpdateCustomDataRequest_; }
      set {
        telemetryUpdateCustomDataRequest_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallCoreRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallCoreRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallCoreRequestType != other.CallCoreRequestType) return false;
      if (!object.Equals(SyncSettings, other.SyncSettings)) return false;
      if (!object.Equals(ChangePlaybackRateRequest, other.ChangePlaybackRateRequest)) return false;
      if (!object.Equals(SwitchAbrLevelRequest, other.SwitchAbrLevelRequest)) return false;
      if (!object.Equals(SetFeedLayoutRequest, other.SetFeedLayoutRequest)) return false;
      if (!object.Equals(ContentInfoRequest, other.ContentInfoRequest)) return false;
      if (!object.Equals(ContentListRequest, other.ContentListRequest)) return false;
      if (!object.Equals(LoadStateRequest, other.LoadStateRequest)) return false;
      if (!object.Equals(SaveStateRequest, other.SaveStateRequest)) return false;
      if (!object.Equals(LogUploadRequest, other.LogUploadRequest)) return false;
      if (!object.Equals(InitializeLoggingRequest, other.InitializeLoggingRequest)) return false;
      if (!object.Equals(DownloadContentRequest, other.DownloadContentRequest)) return false;
      if (!object.Equals(TelemetryUpdateCustomDataRequest, other.TelemetryUpdateCustomDataRequest)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallCoreRequestType != 0) hash ^= CallCoreRequestType.GetHashCode();
      if (syncSettings_ != null) hash ^= SyncSettings.GetHashCode();
      if (changePlaybackRateRequest_ != null) hash ^= ChangePlaybackRateRequest.GetHashCode();
      if (switchAbrLevelRequest_ != null) hash ^= SwitchAbrLevelRequest.GetHashCode();
      if (setFeedLayoutRequest_ != null) hash ^= SetFeedLayoutRequest.GetHashCode();
      if (contentInfoRequest_ != null) hash ^= ContentInfoRequest.GetHashCode();
      if (contentListRequest_ != null) hash ^= ContentListRequest.GetHashCode();
      if (loadStateRequest_ != null) hash ^= LoadStateRequest.GetHashCode();
      if (saveStateRequest_ != null) hash ^= SaveStateRequest.GetHashCode();
      if (logUploadRequest_ != null) hash ^= LogUploadRequest.GetHashCode();
      if (initializeLoggingRequest_ != null) hash ^= InitializeLoggingRequest.GetHashCode();
      if (downloadContentRequest_ != null) hash ^= DownloadContentRequest.GetHashCode();
      if (telemetryUpdateCustomDataRequest_ != null) hash ^= TelemetryUpdateCustomDataRequest.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallCoreRequestType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CallCoreRequestType);
      }
      if (syncSettings_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SyncSettings);
      }
      if (changePlaybackRateRequest_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ChangePlaybackRateRequest);
      }
      if (switchAbrLevelRequest_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SwitchAbrLevelRequest);
      }
      if (setFeedLayoutRequest_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SetFeedLayoutRequest);
      }
      if (contentInfoRequest_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ContentInfoRequest);
      }
      if (contentListRequest_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ContentListRequest);
      }
      if (loadStateRequest_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LoadStateRequest);
      }
      if (saveStateRequest_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(SaveStateRequest);
      }
      if (logUploadRequest_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(LogUploadRequest);
      }
      if (initializeLoggingRequest_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(InitializeLoggingRequest);
      }
      if (downloadContentRequest_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DownloadContentRequest);
      }
      if (telemetryUpdateCustomDataRequest_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(TelemetryUpdateCustomDataRequest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallCoreRequestType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CallCoreRequestType);
      }
      if (syncSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyncSettings);
      }
      if (changePlaybackRateRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChangePlaybackRateRequest);
      }
      if (switchAbrLevelRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwitchAbrLevelRequest);
      }
      if (setFeedLayoutRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetFeedLayoutRequest);
      }
      if (contentInfoRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContentInfoRequest);
      }
      if (contentListRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContentListRequest);
      }
      if (loadStateRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoadStateRequest);
      }
      if (saveStateRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SaveStateRequest);
      }
      if (logUploadRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LogUploadRequest);
      }
      if (initializeLoggingRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitializeLoggingRequest);
      }
      if (downloadContentRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DownloadContentRequest);
      }
      if (telemetryUpdateCustomDataRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TelemetryUpdateCustomDataRequest);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallCoreRequest other) {
      if (other == null) {
        return;
      }
      if (other.CallCoreRequestType != 0) {
        CallCoreRequestType = other.CallCoreRequestType;
      }
      if (other.syncSettings_ != null) {
        if (syncSettings_ == null) {
          syncSettings_ = new global::com.tiledmedia.clearvr.cvrinterface.SyncSettings();
        }
        SyncSettings.MergeFrom(other.SyncSettings);
      }
      if (other.changePlaybackRateRequest_ != null) {
        if (changePlaybackRateRequest_ == null) {
          changePlaybackRateRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.ChangePlaybackRateRequest();
        }
        ChangePlaybackRateRequest.MergeFrom(other.ChangePlaybackRateRequest);
      }
      if (other.switchAbrLevelRequest_ != null) {
        if (switchAbrLevelRequest_ == null) {
          switchAbrLevelRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.SwitchAbrLevelRequest();
        }
        SwitchAbrLevelRequest.MergeFrom(other.SwitchAbrLevelRequest);
      }
      if (other.setFeedLayoutRequest_ != null) {
        if (setFeedLayoutRequest_ == null) {
          setFeedLayoutRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.SetFeedLayoutParams();
        }
        SetFeedLayoutRequest.MergeFrom(other.SetFeedLayoutRequest);
      }
      if (other.contentInfoRequest_ != null) {
        if (contentInfoRequest_ == null) {
          contentInfoRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.ContentInfoRequest();
        }
        ContentInfoRequest.MergeFrom(other.ContentInfoRequest);
      }
      if (other.contentListRequest_ != null) {
        if (contentListRequest_ == null) {
          contentListRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.ContentListRequest();
        }
        ContentListRequest.MergeFrom(other.ContentListRequest);
      }
      if (other.loadStateRequest_ != null) {
        if (loadStateRequest_ == null) {
          loadStateRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.LoadStateRequest();
        }
        LoadStateRequest.MergeFrom(other.LoadStateRequest);
      }
      if (other.saveStateRequest_ != null) {
        if (saveStateRequest_ == null) {
          saveStateRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.SaveStateRequest();
        }
        SaveStateRequest.MergeFrom(other.SaveStateRequest);
      }
      if (other.logUploadRequest_ != null) {
        if (logUploadRequest_ == null) {
          logUploadRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.LogUploadRequest();
        }
        LogUploadRequest.MergeFrom(other.LogUploadRequest);
      }
      if (other.initializeLoggingRequest_ != null) {
        if (initializeLoggingRequest_ == null) {
          initializeLoggingRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.InitializeLoggingRequest();
        }
        InitializeLoggingRequest.MergeFrom(other.InitializeLoggingRequest);
      }
      if (other.downloadContentRequest_ != null) {
        if (downloadContentRequest_ == null) {
          downloadContentRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.DownloadContentRequest();
        }
        DownloadContentRequest.MergeFrom(other.DownloadContentRequest);
      }
      if (other.telemetryUpdateCustomDataRequest_ != null) {
        if (telemetryUpdateCustomDataRequest_ == null) {
          telemetryUpdateCustomDataRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.TelemetryUpdateCustomData();
        }
        TelemetryUpdateCustomDataRequest.MergeFrom(other.TelemetryUpdateCustomDataRequest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            callCoreRequestType_ = (global::com.tiledmedia.clearvr.cvrinterface.CallCoreRequestType) input.ReadEnum();
            break;
          }
          case 18: {
            if (syncSettings_ == null) {
              syncSettings_ = new global::com.tiledmedia.clearvr.cvrinterface.SyncSettings();
            }
            input.ReadMessage(syncSettings_);
            break;
          }
          case 26: {
            if (changePlaybackRateRequest_ == null) {
              changePlaybackRateRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.ChangePlaybackRateRequest();
            }
            input.ReadMessage(changePlaybackRateRequest_);
            break;
          }
          case 34: {
            if (switchAbrLevelRequest_ == null) {
              switchAbrLevelRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.SwitchAbrLevelRequest();
            }
            input.ReadMessage(switchAbrLevelRequest_);
            break;
          }
          case 42: {
            if (setFeedLayoutRequest_ == null) {
              setFeedLayoutRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.SetFeedLayoutParams();
            }
            input.ReadMessage(setFeedLayoutRequest_);
            break;
          }
          case 50: {
            if (contentInfoRequest_ == null) {
              contentInfoRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.ContentInfoRequest();
            }
            input.ReadMessage(contentInfoRequest_);
            break;
          }
          case 58: {
            if (contentListRequest_ == null) {
              contentListRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.ContentListRequest();
            }
            input.ReadMessage(contentListRequest_);
            break;
          }
          case 66: {
            if (loadStateRequest_ == null) {
              loadStateRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.LoadStateRequest();
            }
            input.ReadMessage(loadStateRequest_);
            break;
          }
          case 74: {
            if (saveStateRequest_ == null) {
              saveStateRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.SaveStateRequest();
            }
            input.ReadMessage(saveStateRequest_);
            break;
          }
          case 82: {
            if (logUploadRequest_ == null) {
              logUploadRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.LogUploadRequest();
            }
            input.ReadMessage(logUploadRequest_);
            break;
          }
          case 90: {
            if (initializeLoggingRequest_ == null) {
              initializeLoggingRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.InitializeLoggingRequest();
            }
            input.ReadMessage(initializeLoggingRequest_);
            break;
          }
          case 98: {
            if (downloadContentRequest_ == null) {
              downloadContentRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.DownloadContentRequest();
            }
            input.ReadMessage(downloadContentRequest_);
            break;
          }
          case 106: {
            if (telemetryUpdateCustomDataRequest_ == null) {
              telemetryUpdateCustomDataRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.TelemetryUpdateCustomData();
            }
            input.ReadMessage(telemetryUpdateCustomDataRequest_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CallCoreResponse : pb::IMessage<CallCoreResponse> {
    private static readonly pb::MessageParser<CallCoreResponse> _parser = new pb::MessageParser<CallCoreResponse>(() => new CallCoreResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallCoreResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallCoreResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallCoreResponse(CallCoreResponse other) : this() {
      errorCode_ = other.errorCode_;
      errorMessage_ = other.errorMessage_;
      SyncStatusMessage = other.syncStatusMessage_ != null ? other.SyncStatusMessage.Clone() : null;
      ContentInfoMessage = other.contentInfoMessage_ != null ? other.ContentInfoMessage.Clone() : null;
      ContentListMessage = other.contentListMessage_ != null ? other.ContentListMessage.Clone() : null;
      LoadStateResponse = other.loadStateResponse_ != null ? other.LoadStateResponse.Clone() : null;
      LogUploadResponse = other.logUploadResponse_ != null ? other.LogUploadResponse.Clone() : null;
      DownloadContentResponse = other.downloadContentResponse_ != null ? other.DownloadContentResponse.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallCoreResponse Clone() {
      return new CallCoreResponse(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private int errorCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "ErrorMessage" field.</summary>
    public const int ErrorMessageFieldNumber = 2;
    private string errorMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SyncStatusMessage" field.</summary>
    public const int SyncStatusMessageFieldNumber = 3;
    private global::com.tiledmedia.clearvr.cvrinterface.SyncStatusMessage syncStatusMessage_;
    /// <summary>
    /// response messages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.SyncStatusMessage SyncStatusMessage {
      get { return syncStatusMessage_; }
      set {
        syncStatusMessage_ = value;
      }
    }

    /// <summary>Field number for the "ContentInfoMessage" field.</summary>
    public const int ContentInfoMessageFieldNumber = 4;
    private global::com.tiledmedia.clearvr.cvrinterface.ContentInfoMessage contentInfoMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ContentInfoMessage ContentInfoMessage {
      get { return contentInfoMessage_; }
      set {
        contentInfoMessage_ = value;
      }
    }

    /// <summary>Field number for the "ContentListMessage" field.</summary>
    public const int ContentListMessageFieldNumber = 5;
    private global::com.tiledmedia.clearvr.cvrinterface.ContentListMessage contentListMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ContentListMessage ContentListMessage {
      get { return contentListMessage_; }
      set {
        contentListMessage_ = value;
      }
    }

    /// <summary>Field number for the "LoadStateResponse" field.</summary>
    public const int LoadStateResponseFieldNumber = 6;
    private global::com.tiledmedia.clearvr.cvrinterface.LoadStateResponse loadStateResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.LoadStateResponse LoadStateResponse {
      get { return loadStateResponse_; }
      set {
        loadStateResponse_ = value;
      }
    }

    /// <summary>Field number for the "LogUploadResponse" field.</summary>
    public const int LogUploadResponseFieldNumber = 7;
    private global::com.tiledmedia.clearvr.cvrinterface.LogUploadResponse logUploadResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.LogUploadResponse LogUploadResponse {
      get { return logUploadResponse_; }
      set {
        logUploadResponse_ = value;
      }
    }

    /// <summary>Field number for the "DownloadContentResponse" field.</summary>
    public const int DownloadContentResponseFieldNumber = 8;
    private global::com.tiledmedia.clearvr.cvrinterface.DownloadContentResponse downloadContentResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.DownloadContentResponse DownloadContentResponse {
      get { return downloadContentResponse_; }
      set {
        downloadContentResponse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallCoreResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallCoreResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if (!object.Equals(SyncStatusMessage, other.SyncStatusMessage)) return false;
      if (!object.Equals(ContentInfoMessage, other.ContentInfoMessage)) return false;
      if (!object.Equals(ContentListMessage, other.ContentListMessage)) return false;
      if (!object.Equals(LoadStateResponse, other.LoadStateResponse)) return false;
      if (!object.Equals(LogUploadResponse, other.LogUploadResponse)) return false;
      if (!object.Equals(DownloadContentResponse, other.DownloadContentResponse)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (syncStatusMessage_ != null) hash ^= SyncStatusMessage.GetHashCode();
      if (contentInfoMessage_ != null) hash ^= ContentInfoMessage.GetHashCode();
      if (contentListMessage_ != null) hash ^= ContentListMessage.GetHashCode();
      if (loadStateResponse_ != null) hash ^= LoadStateResponse.GetHashCode();
      if (logUploadResponse_ != null) hash ^= LogUploadResponse.GetHashCode();
      if (downloadContentResponse_ != null) hash ^= DownloadContentResponse.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrorCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorMessage);
      }
      if (syncStatusMessage_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SyncStatusMessage);
      }
      if (contentInfoMessage_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ContentInfoMessage);
      }
      if (contentListMessage_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ContentListMessage);
      }
      if (loadStateResponse_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LoadStateResponse);
      }
      if (logUploadResponse_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LogUploadResponse);
      }
      if (downloadContentResponse_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(DownloadContentResponse);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (syncStatusMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyncStatusMessage);
      }
      if (contentInfoMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContentInfoMessage);
      }
      if (contentListMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContentListMessage);
      }
      if (loadStateResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoadStateResponse);
      }
      if (logUploadResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LogUploadResponse);
      }
      if (downloadContentResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DownloadContentResponse);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallCoreResponse other) {
      if (other == null) {
        return;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      if (other.syncStatusMessage_ != null) {
        if (syncStatusMessage_ == null) {
          syncStatusMessage_ = new global::com.tiledmedia.clearvr.cvrinterface.SyncStatusMessage();
        }
        SyncStatusMessage.MergeFrom(other.SyncStatusMessage);
      }
      if (other.contentInfoMessage_ != null) {
        if (contentInfoMessage_ == null) {
          contentInfoMessage_ = new global::com.tiledmedia.clearvr.cvrinterface.ContentInfoMessage();
        }
        ContentInfoMessage.MergeFrom(other.ContentInfoMessage);
      }
      if (other.contentListMessage_ != null) {
        if (contentListMessage_ == null) {
          contentListMessage_ = new global::com.tiledmedia.clearvr.cvrinterface.ContentListMessage();
        }
        ContentListMessage.MergeFrom(other.ContentListMessage);
      }
      if (other.loadStateResponse_ != null) {
        if (loadStateResponse_ == null) {
          loadStateResponse_ = new global::com.tiledmedia.clearvr.cvrinterface.LoadStateResponse();
        }
        LoadStateResponse.MergeFrom(other.LoadStateResponse);
      }
      if (other.logUploadResponse_ != null) {
        if (logUploadResponse_ == null) {
          logUploadResponse_ = new global::com.tiledmedia.clearvr.cvrinterface.LogUploadResponse();
        }
        LogUploadResponse.MergeFrom(other.LogUploadResponse);
      }
      if (other.downloadContentResponse_ != null) {
        if (downloadContentResponse_ == null) {
          downloadContentResponse_ = new global::com.tiledmedia.clearvr.cvrinterface.DownloadContentResponse();
        }
        DownloadContentResponse.MergeFrom(other.DownloadContentResponse);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 18: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 26: {
            if (syncStatusMessage_ == null) {
              syncStatusMessage_ = new global::com.tiledmedia.clearvr.cvrinterface.SyncStatusMessage();
            }
            input.ReadMessage(syncStatusMessage_);
            break;
          }
          case 34: {
            if (contentInfoMessage_ == null) {
              contentInfoMessage_ = new global::com.tiledmedia.clearvr.cvrinterface.ContentInfoMessage();
            }
            input.ReadMessage(contentInfoMessage_);
            break;
          }
          case 42: {
            if (contentListMessage_ == null) {
              contentListMessage_ = new global::com.tiledmedia.clearvr.cvrinterface.ContentListMessage();
            }
            input.ReadMessage(contentListMessage_);
            break;
          }
          case 50: {
            if (loadStateResponse_ == null) {
              loadStateResponse_ = new global::com.tiledmedia.clearvr.cvrinterface.LoadStateResponse();
            }
            input.ReadMessage(loadStateResponse_);
            break;
          }
          case 58: {
            if (logUploadResponse_ == null) {
              logUploadResponse_ = new global::com.tiledmedia.clearvr.cvrinterface.LogUploadResponse();
            }
            input.ReadMessage(logUploadResponse_);
            break;
          }
          case 66: {
            if (downloadContentResponse_ == null) {
              downloadContentResponse_ = new global::com.tiledmedia.clearvr.cvrinterface.DownloadContentResponse();
            }
            input.ReadMessage(downloadContentResponse_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TelemetryConfiguration : pb::IMessage<TelemetryConfiguration> {
    private static readonly pb::MessageParser<TelemetryConfiguration> _parser = new pb::MessageParser<TelemetryConfiguration>(() => new TelemetryConfiguration());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TelemetryConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryConfiguration(TelemetryConfiguration other) : this() {
      disableTiledmediaTelemetry_ = other.disableTiledmediaTelemetry_;
      telemetryTargets_ = other.telemetryTargets_.Clone();
      disableTiledmediaTelemetryToNewRelic_ = other.disableTiledmediaTelemetryToNewRelic_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryConfiguration Clone() {
      return new TelemetryConfiguration(this);
    }

    /// <summary>Field number for the "DisableTiledmediaTelemetry" field.</summary>
    public const int DisableTiledmediaTelemetryFieldNumber = 1;
    private bool disableTiledmediaTelemetry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableTiledmediaTelemetry {
      get { return disableTiledmediaTelemetry_; }
      set {
        disableTiledmediaTelemetry_ = value;
      }
    }

    /// <summary>Field number for the "TelemetryTargets" field.</summary>
    public const int TelemetryTargetsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::com.tiledmedia.clearvr.cvrinterface.TelemetryTarget> _repeated_telemetryTargets_codec
        = pb::FieldCodec.ForMessage(18, global::com.tiledmedia.clearvr.cvrinterface.TelemetryTarget.Parser);
    private readonly pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.TelemetryTarget> telemetryTargets_ = new pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.TelemetryTarget>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.TelemetryTarget> TelemetryTargets {
      get { return telemetryTargets_; }
    }

    /// <summary>Field number for the "DisableTiledmediaTelemetryToNewRelic" field.</summary>
    public const int DisableTiledmediaTelemetryToNewRelicFieldNumber = 3;
    private bool disableTiledmediaTelemetryToNewRelic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableTiledmediaTelemetryToNewRelic {
      get { return disableTiledmediaTelemetryToNewRelic_; }
      set {
        disableTiledmediaTelemetryToNewRelic_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TelemetryConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TelemetryConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DisableTiledmediaTelemetry != other.DisableTiledmediaTelemetry) return false;
      if(!telemetryTargets_.Equals(other.telemetryTargets_)) return false;
      if (DisableTiledmediaTelemetryToNewRelic != other.DisableTiledmediaTelemetryToNewRelic) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DisableTiledmediaTelemetry != false) hash ^= DisableTiledmediaTelemetry.GetHashCode();
      hash ^= telemetryTargets_.GetHashCode();
      if (DisableTiledmediaTelemetryToNewRelic != false) hash ^= DisableTiledmediaTelemetryToNewRelic.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DisableTiledmediaTelemetry != false) {
        output.WriteRawTag(8);
        output.WriteBool(DisableTiledmediaTelemetry);
      }
      telemetryTargets_.WriteTo(output, _repeated_telemetryTargets_codec);
      if (DisableTiledmediaTelemetryToNewRelic != false) {
        output.WriteRawTag(24);
        output.WriteBool(DisableTiledmediaTelemetryToNewRelic);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DisableTiledmediaTelemetry != false) {
        size += 1 + 1;
      }
      size += telemetryTargets_.CalculateSize(_repeated_telemetryTargets_codec);
      if (DisableTiledmediaTelemetryToNewRelic != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TelemetryConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.DisableTiledmediaTelemetry != false) {
        DisableTiledmediaTelemetry = other.DisableTiledmediaTelemetry;
      }
      telemetryTargets_.Add(other.telemetryTargets_);
      if (other.DisableTiledmediaTelemetryToNewRelic != false) {
        DisableTiledmediaTelemetryToNewRelic = other.DisableTiledmediaTelemetryToNewRelic;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DisableTiledmediaTelemetry = input.ReadBool();
            break;
          }
          case 18: {
            telemetryTargets_.AddEntriesFrom(input, _repeated_telemetryTargets_codec);
            break;
          }
          case 24: {
            DisableTiledmediaTelemetryToNewRelic = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TelemetryTarget : pb::IMessage<TelemetryTarget> {
    private static readonly pb::MessageParser<TelemetryTarget> _parser = new pb::MessageParser<TelemetryTarget>(() => new TelemetryTarget());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TelemetryTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryTarget(TelemetryTarget other) : this() {
      type_ = other.type_;
      iPSignallingType_ = other.iPSignallingType_;
      NewRelicConfig = other.newRelicConfig_ != null ? other.NewRelicConfig.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryTarget Clone() {
      return new TelemetryTarget(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.TelemetryTargetType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.TelemetryTargetType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "IPSignallingType" field.</summary>
    public const int IPSignallingTypeFieldNumber = 2;
    private global::com.tiledmedia.clearvr.cvrinterface.TelemetryIPSignallingType iPSignallingType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.TelemetryIPSignallingType IPSignallingType {
      get { return iPSignallingType_; }
      set {
        iPSignallingType_ = value;
      }
    }

    /// <summary>Field number for the "NewRelicConfig" field.</summary>
    public const int NewRelicConfigFieldNumber = 10;
    private global::com.tiledmedia.clearvr.cvrinterface.TelemetryTargetConfigNewRelic newRelicConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.TelemetryTargetConfigNewRelic NewRelicConfig {
      get { return newRelicConfig_; }
      set {
        newRelicConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TelemetryTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TelemetryTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (IPSignallingType != other.IPSignallingType) return false;
      if (!object.Equals(NewRelicConfig, other.NewRelicConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (IPSignallingType != 0) hash ^= IPSignallingType.GetHashCode();
      if (newRelicConfig_ != null) hash ^= NewRelicConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (IPSignallingType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) IPSignallingType);
      }
      if (newRelicConfig_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(NewRelicConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (IPSignallingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IPSignallingType);
      }
      if (newRelicConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewRelicConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TelemetryTarget other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.IPSignallingType != 0) {
        IPSignallingType = other.IPSignallingType;
      }
      if (other.newRelicConfig_ != null) {
        if (newRelicConfig_ == null) {
          newRelicConfig_ = new global::com.tiledmedia.clearvr.cvrinterface.TelemetryTargetConfigNewRelic();
        }
        NewRelicConfig.MergeFrom(other.NewRelicConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::com.tiledmedia.clearvr.cvrinterface.TelemetryTargetType) input.ReadEnum();
            break;
          }
          case 16: {
            iPSignallingType_ = (global::com.tiledmedia.clearvr.cvrinterface.TelemetryIPSignallingType) input.ReadEnum();
            break;
          }
          case 82: {
            if (newRelicConfig_ == null) {
              newRelicConfig_ = new global::com.tiledmedia.clearvr.cvrinterface.TelemetryTargetConfigNewRelic();
            }
            input.ReadMessage(newRelicConfig_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TelemetryTargetConfigNewRelic : pb::IMessage<TelemetryTargetConfigNewRelic> {
    private static readonly pb::MessageParser<TelemetryTargetConfigNewRelic> _parser = new pb::MessageParser<TelemetryTargetConfigNewRelic>(() => new TelemetryTargetConfigNewRelic());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TelemetryTargetConfigNewRelic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryTargetConfigNewRelic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryTargetConfigNewRelic(TelemetryTargetConfigNewRelic other) : this() {
      accountID_ = other.accountID_;
      license_ = other.license_;
      uRL_ = other.uRL_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryTargetConfigNewRelic Clone() {
      return new TelemetryTargetConfigNewRelic(this);
    }

    /// <summary>Field number for the "AccountID" field.</summary>
    public const int AccountIDFieldNumber = 1;
    private string accountID_ = "";
    /// <summary>
    /// Example: "3804000"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountID {
      get { return accountID_; }
      set {
        accountID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "License" field.</summary>
    public const int LicenseFieldNumber = 2;
    private string license_ = "";
    /// <summary>
    /// Example: "eu01XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string License {
      get { return license_; }
      set {
        license_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "URL" field.</summary>
    public const int URLFieldNumber = 3;
    private string uRL_ = "";
    /// <summary>
    /// Example: https://insights-collector.eu01.nr-data.net/v1/accounts/&lt;ACCOUNT_ID>/events
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string URL {
      get { return uRL_; }
      set {
        uRL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TelemetryTargetConfigNewRelic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TelemetryTargetConfigNewRelic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountID != other.AccountID) return false;
      if (License != other.License) return false;
      if (URL != other.URL) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountID.Length != 0) hash ^= AccountID.GetHashCode();
      if (License.Length != 0) hash ^= License.GetHashCode();
      if (URL.Length != 0) hash ^= URL.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountID);
      }
      if (License.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(License);
      }
      if (URL.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(URL);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountID);
      }
      if (License.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(License);
      }
      if (URL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(URL);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TelemetryTargetConfigNewRelic other) {
      if (other == null) {
        return;
      }
      if (other.AccountID.Length != 0) {
        AccountID = other.AccountID;
      }
      if (other.License.Length != 0) {
        License = other.License;
      }
      if (other.URL.Length != 0) {
        URL = other.URL;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountID = input.ReadString();
            break;
          }
          case 18: {
            License = input.ReadString();
            break;
          }
          case 26: {
            URL = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TelemetryUpdateCustomData : pb::IMessage<TelemetryUpdateCustomData> {
    private static readonly pb::MessageParser<TelemetryUpdateCustomData> _parser = new pb::MessageParser<TelemetryUpdateCustomData>(() => new TelemetryUpdateCustomData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TelemetryUpdateCustomData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryUpdateCustomData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryUpdateCustomData(TelemetryUpdateCustomData other) : this() {
      targetSpecificCustomMetadata_ = other.targetSpecificCustomMetadata_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryUpdateCustomData Clone() {
      return new TelemetryUpdateCustomData(this);
    }

    /// <summary>Field number for the "TargetSpecificCustomMetadata" field.</summary>
    public const int TargetSpecificCustomMetadataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.tiledmedia.clearvr.cvrinterface.TelemetryUpdateTargetCustomData> _repeated_targetSpecificCustomMetadata_codec
        = pb::FieldCodec.ForMessage(10, global::com.tiledmedia.clearvr.cvrinterface.TelemetryUpdateTargetCustomData.Parser);
    private readonly pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.TelemetryUpdateTargetCustomData> targetSpecificCustomMetadata_ = new pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.TelemetryUpdateTargetCustomData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.TelemetryUpdateTargetCustomData> TargetSpecificCustomMetadata {
      get { return targetSpecificCustomMetadata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TelemetryUpdateCustomData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TelemetryUpdateCustomData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!targetSpecificCustomMetadata_.Equals(other.targetSpecificCustomMetadata_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= targetSpecificCustomMetadata_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      targetSpecificCustomMetadata_.WriteTo(output, _repeated_targetSpecificCustomMetadata_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += targetSpecificCustomMetadata_.CalculateSize(_repeated_targetSpecificCustomMetadata_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TelemetryUpdateCustomData other) {
      if (other == null) {
        return;
      }
      targetSpecificCustomMetadata_.Add(other.targetSpecificCustomMetadata_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            targetSpecificCustomMetadata_.AddEntriesFrom(input, _repeated_targetSpecificCustomMetadata_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TelemetryUpdateTargetCustomData : pb::IMessage<TelemetryUpdateTargetCustomData> {
    private static readonly pb::MessageParser<TelemetryUpdateTargetCustomData> _parser = new pb::MessageParser<TelemetryUpdateTargetCustomData>(() => new TelemetryUpdateTargetCustomData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TelemetryUpdateTargetCustomData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryUpdateTargetCustomData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryUpdateTargetCustomData(TelemetryUpdateTargetCustomData other) : this() {
      telemetryTargetIdx_ = other.telemetryTargetIdx_;
      customDataKey_ = other.customDataKey_.Clone();
      customDataValue_ = other.customDataValue_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryUpdateTargetCustomData Clone() {
      return new TelemetryUpdateTargetCustomData(this);
    }

    /// <summary>Field number for the "TelemetryTargetIdx" field.</summary>
    public const int TelemetryTargetIdxFieldNumber = 1;
    private int telemetryTargetIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TelemetryTargetIdx {
      get { return telemetryTargetIdx_; }
      set {
        telemetryTargetIdx_ = value;
      }
    }

    /// <summary>Field number for the "CustomDataKey" field.</summary>
    public const int CustomDataKeyFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_customDataKey_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> customDataKey_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CustomDataKey {
      get { return customDataKey_; }
    }

    /// <summary>Field number for the "CustomDataValue" field.</summary>
    public const int CustomDataValueFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_customDataValue_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> customDataValue_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CustomDataValue {
      get { return customDataValue_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TelemetryUpdateTargetCustomData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TelemetryUpdateTargetCustomData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TelemetryTargetIdx != other.TelemetryTargetIdx) return false;
      if(!customDataKey_.Equals(other.customDataKey_)) return false;
      if(!customDataValue_.Equals(other.customDataValue_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TelemetryTargetIdx != 0) hash ^= TelemetryTargetIdx.GetHashCode();
      hash ^= customDataKey_.GetHashCode();
      hash ^= customDataValue_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TelemetryTargetIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TelemetryTargetIdx);
      }
      customDataKey_.WriteTo(output, _repeated_customDataKey_codec);
      customDataValue_.WriteTo(output, _repeated_customDataValue_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TelemetryTargetIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TelemetryTargetIdx);
      }
      size += customDataKey_.CalculateSize(_repeated_customDataKey_codec);
      size += customDataValue_.CalculateSize(_repeated_customDataValue_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TelemetryUpdateTargetCustomData other) {
      if (other == null) {
        return;
      }
      if (other.TelemetryTargetIdx != 0) {
        TelemetryTargetIdx = other.TelemetryTargetIdx;
      }
      customDataKey_.Add(other.customDataKey_);
      customDataValue_.Add(other.customDataValue_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TelemetryTargetIdx = input.ReadInt32();
            break;
          }
          case 18: {
            customDataKey_.AddEntriesFrom(input, _repeated_customDataKey_codec);
            break;
          }
          case 26: {
            customDataValue_.AddEntriesFrom(input, _repeated_customDataValue_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SyncStatusMessage : pb::IMessage<SyncStatusMessage> {
    private static readonly pb::MessageParser<SyncStatusMessage> _parser = new pb::MessageParser<SyncStatusMessage>(() => new SyncStatusMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncStatusMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncStatusMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncStatusMessage(SyncStatusMessage other) : this() {
      clientLatency_ = other.clientLatency_;
      maxTargetLag_ = other.maxTargetLag_;
      maxPlaybackRate_ = other.maxPlaybackRate_;
      minPlaybackRate_ = other.minPlaybackRate_;
      maxPlaybackRateChange_ = other.maxPlaybackRateChange_;
      syncState_ = other.syncState_;
      playbackRate_ = other.playbackRate_;
      nTPTime_ = other.nTPTime_;
      targetTime_ = other.targetTime_;
      actualTime_ = other.actualTime_;
      targetLag_ = other.targetLag_;
      syncEdgeLatency_ = other.syncEdgeLatency_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncStatusMessage Clone() {
      return new SyncStatusMessage(this);
    }

    /// <summary>Field number for the "ClientLatency" field.</summary>
    public const int ClientLatencyFieldNumber = 1;
    private int clientLatency_;
    /// <summary>
    ///// Configuration (See SyncSettings) ////
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientLatency {
      get { return clientLatency_; }
      set {
        clientLatency_ = value;
      }
    }

    /// <summary>Field number for the "MaxTargetLag" field.</summary>
    public const int MaxTargetLagFieldNumber = 2;
    private int maxTargetLag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxTargetLag {
      get { return maxTargetLag_; }
      set {
        maxTargetLag_ = value;
      }
    }

    /// <summary>Field number for the "MaxPlaybackRate" field.</summary>
    public const int MaxPlaybackRateFieldNumber = 3;
    private float maxPlaybackRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxPlaybackRate {
      get { return maxPlaybackRate_; }
      set {
        maxPlaybackRate_ = value;
      }
    }

    /// <summary>Field number for the "MinPlaybackRate" field.</summary>
    public const int MinPlaybackRateFieldNumber = 4;
    private float minPlaybackRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinPlaybackRate {
      get { return minPlaybackRate_; }
      set {
        minPlaybackRate_ = value;
      }
    }

    /// <summary>Field number for the "MaxPlaybackRateChange" field.</summary>
    public const int MaxPlaybackRateChangeFieldNumber = 5;
    private float maxPlaybackRateChange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxPlaybackRateChange {
      get { return maxPlaybackRateChange_; }
      set {
        maxPlaybackRateChange_ = value;
      }
    }

    /// <summary>Field number for the "SyncState" field.</summary>
    public const int SyncStateFieldNumber = 6;
    private global::com.tiledmedia.clearvr.cvrinterface.SyncState syncState_ = 0;
    /// <summary>
    ///// Variables ////
    /// Indicator of the current state of sync.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.SyncState SyncState {
      get { return syncState_; }
      set {
        syncState_ = value;
      }
    }

    /// <summary>Field number for the "PlaybackRate" field.</summary>
    public const int PlaybackRateFieldNumber = 7;
    private double playbackRate_;
    /// <summary>
    /// Current content playback rate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PlaybackRate {
      get { return playbackRate_; }
      set {
        playbackRate_ = value;
      }
    }

    /// <summary>Field number for the "NTPTime" field.</summary>
    public const int NTPTimeFieldNumber = 8;
    private long nTPTime_;
    /// <summary>
    /// (epoch ms) Current network time protocol time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NTPTime {
      get { return nTPTime_; }
      set {
        nTPTime_ = value;
      }
    }

    /// <summary>Field number for the "TargetTime" field.</summary>
    public const int TargetTimeFieldNumber = 9;
    private long targetTime_;
    /// <summary>
    /// (epoch ms) Current sync target for live content. Equivalent to ntp minus client latency minus sync edge latency.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetTime {
      get { return targetTime_; }
      set {
        targetTime_ = value;
      }
    }

    /// <summary>Field number for the "ActualTime" field.</summary>
    public const int ActualTimeFieldNumber = 10;
    private long actualTime_;
    /// <summary>
    /// (epoch ms) Current time of the content in terms of the target time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ActualTime {
      get { return actualTime_; }
      set {
        actualTime_ = value;
      }
    }

    /// <summary>Field number for the "TargetLag" field.</summary>
    public const int TargetLagFieldNumber = 11;
    private int targetLag_;
    /// <summary>
    /// (ms) Lag of the content behind the sync target, difference between target and actual.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetLag {
      get { return targetLag_; }
      set {
        targetLag_ = value;
      }
    }

    /// <summary>Field number for the "SyncEdgeLatency" field.</summary>
    public const int SyncEdgeLatencyFieldNumber = 12;
    private int syncEdgeLatency_;
    /// <summary>
    /// (ms) Current sync edge latency. Configured on the livestream. Defines the sync edge as ntp minus sync edge
    /// latency.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SyncEdgeLatency {
      get { return syncEdgeLatency_; }
      set {
        syncEdgeLatency_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncStatusMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncStatusMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientLatency != other.ClientLatency) return false;
      if (MaxTargetLag != other.MaxTargetLag) return false;
      if (MaxPlaybackRate != other.MaxPlaybackRate) return false;
      if (MinPlaybackRate != other.MinPlaybackRate) return false;
      if (MaxPlaybackRateChange != other.MaxPlaybackRateChange) return false;
      if (SyncState != other.SyncState) return false;
      if (PlaybackRate != other.PlaybackRate) return false;
      if (NTPTime != other.NTPTime) return false;
      if (TargetTime != other.TargetTime) return false;
      if (ActualTime != other.ActualTime) return false;
      if (TargetLag != other.TargetLag) return false;
      if (SyncEdgeLatency != other.SyncEdgeLatency) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientLatency != 0) hash ^= ClientLatency.GetHashCode();
      if (MaxTargetLag != 0) hash ^= MaxTargetLag.GetHashCode();
      if (MaxPlaybackRate != 0F) hash ^= MaxPlaybackRate.GetHashCode();
      if (MinPlaybackRate != 0F) hash ^= MinPlaybackRate.GetHashCode();
      if (MaxPlaybackRateChange != 0F) hash ^= MaxPlaybackRateChange.GetHashCode();
      if (SyncState != 0) hash ^= SyncState.GetHashCode();
      if (PlaybackRate != 0D) hash ^= PlaybackRate.GetHashCode();
      if (NTPTime != 0L) hash ^= NTPTime.GetHashCode();
      if (TargetTime != 0L) hash ^= TargetTime.GetHashCode();
      if (ActualTime != 0L) hash ^= ActualTime.GetHashCode();
      if (TargetLag != 0) hash ^= TargetLag.GetHashCode();
      if (SyncEdgeLatency != 0) hash ^= SyncEdgeLatency.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientLatency != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ClientLatency);
      }
      if (MaxTargetLag != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxTargetLag);
      }
      if (MaxPlaybackRate != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MaxPlaybackRate);
      }
      if (MinPlaybackRate != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MinPlaybackRate);
      }
      if (MaxPlaybackRateChange != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MaxPlaybackRateChange);
      }
      if (SyncState != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) SyncState);
      }
      if (PlaybackRate != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(PlaybackRate);
      }
      if (NTPTime != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(NTPTime);
      }
      if (TargetTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(TargetTime);
      }
      if (ActualTime != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(ActualTime);
      }
      if (TargetLag != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TargetLag);
      }
      if (SyncEdgeLatency != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(SyncEdgeLatency);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientLatency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientLatency);
      }
      if (MaxTargetLag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxTargetLag);
      }
      if (MaxPlaybackRate != 0F) {
        size += 1 + 4;
      }
      if (MinPlaybackRate != 0F) {
        size += 1 + 4;
      }
      if (MaxPlaybackRateChange != 0F) {
        size += 1 + 4;
      }
      if (SyncState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SyncState);
      }
      if (PlaybackRate != 0D) {
        size += 1 + 8;
      }
      if (NTPTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NTPTime);
      }
      if (TargetTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetTime);
      }
      if (ActualTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActualTime);
      }
      if (TargetLag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetLag);
      }
      if (SyncEdgeLatency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SyncEdgeLatency);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncStatusMessage other) {
      if (other == null) {
        return;
      }
      if (other.ClientLatency != 0) {
        ClientLatency = other.ClientLatency;
      }
      if (other.MaxTargetLag != 0) {
        MaxTargetLag = other.MaxTargetLag;
      }
      if (other.MaxPlaybackRate != 0F) {
        MaxPlaybackRate = other.MaxPlaybackRate;
      }
      if (other.MinPlaybackRate != 0F) {
        MinPlaybackRate = other.MinPlaybackRate;
      }
      if (other.MaxPlaybackRateChange != 0F) {
        MaxPlaybackRateChange = other.MaxPlaybackRateChange;
      }
      if (other.SyncState != 0) {
        SyncState = other.SyncState;
      }
      if (other.PlaybackRate != 0D) {
        PlaybackRate = other.PlaybackRate;
      }
      if (other.NTPTime != 0L) {
        NTPTime = other.NTPTime;
      }
      if (other.TargetTime != 0L) {
        TargetTime = other.TargetTime;
      }
      if (other.ActualTime != 0L) {
        ActualTime = other.ActualTime;
      }
      if (other.TargetLag != 0) {
        TargetLag = other.TargetLag;
      }
      if (other.SyncEdgeLatency != 0) {
        SyncEdgeLatency = other.SyncEdgeLatency;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClientLatency = input.ReadInt32();
            break;
          }
          case 16: {
            MaxTargetLag = input.ReadInt32();
            break;
          }
          case 29: {
            MaxPlaybackRate = input.ReadFloat();
            break;
          }
          case 37: {
            MinPlaybackRate = input.ReadFloat();
            break;
          }
          case 45: {
            MaxPlaybackRateChange = input.ReadFloat();
            break;
          }
          case 48: {
            syncState_ = (global::com.tiledmedia.clearvr.cvrinterface.SyncState) input.ReadEnum();
            break;
          }
          case 57: {
            PlaybackRate = input.ReadDouble();
            break;
          }
          case 64: {
            NTPTime = input.ReadInt64();
            break;
          }
          case 72: {
            TargetTime = input.ReadInt64();
            break;
          }
          case 80: {
            ActualTime = input.ReadInt64();
            break;
          }
          case 88: {
            TargetLag = input.ReadInt32();
            break;
          }
          case 96: {
            SyncEdgeLatency = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SyncSettings : pb::IMessage<SyncSettings> {
    private static readonly pb::MessageParser<SyncSettings> _parser = new pb::MessageParser<SyncSettings>(() => new SyncSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncSettings(SyncSettings other) : this() {
      clientLatency_ = other.clientLatency_;
      maxTargetLag_ = other.maxTargetLag_;
      maxPlaybackRate_ = other.maxPlaybackRate_;
      minPlaybackRate_ = other.minPlaybackRate_;
      maxPlaybackRateChange_ = other.maxPlaybackRateChange_;
      syncMode_ = other.syncMode_;
      disableInitialSeek_ = other.disableInitialSeek_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncSettings Clone() {
      return new SyncSettings(this);
    }

    /// <summary>Field number for the "ClientLatency" field.</summary>
    public const int ClientLatencyFieldNumber = 1;
    private int clientLatency_;
    /// <summary>
    /// (ms) Latency the client will stay behind the content item specific sync target. Value should be between 0 and
    /// 300000.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientLatency {
      get { return clientLatency_; }
      set {
        clientLatency_ = value;
      }
    }

    /// <summary>Field number for the "MaxTargetLag" field.</summary>
    public const int MaxTargetLagFieldNumber = 2;
    private int maxTargetLag_;
    /// <summary>
    /// (ms) Maximum difference between the client sync target and the current content time. A seek will be triggered if
    /// outside this range. If set the value should be at least 5000. If unset (0) this feature is disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxTargetLag {
      get { return maxTargetLag_; }
      set {
        maxTargetLag_ = value;
      }
    }

    /// <summary>Field number for the "MaxPlaybackRate" field.</summary>
    public const int MaxPlaybackRateFieldNumber = 3;
    private float maxPlaybackRate_;
    /// <summary>
    /// Maximum value for the playback rate the sync algorithm selects. Value should be between 1 and 1.5. If unset (0)
    /// defaults to 1.2.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxPlaybackRate {
      get { return maxPlaybackRate_; }
      set {
        maxPlaybackRate_ = value;
      }
    }

    /// <summary>Field number for the "MinPlaybackRate" field.</summary>
    public const int MinPlaybackRateFieldNumber = 4;
    private float minPlaybackRate_;
    /// <summary>
    /// Minimum value for the playback rate the sync algorithm selects. Value should be between 0.5 and 1. If unset (0)
    /// defaults to 0.8.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinPlaybackRate {
      get { return minPlaybackRate_; }
      set {
        minPlaybackRate_ = value;
      }
    }

    /// <summary>Field number for the "MaxPlaybackRateChange" field.</summary>
    public const int MaxPlaybackRateChangeFieldNumber = 5;
    private float maxPlaybackRateChange_;
    /// <summary>
    /// Maximum change for the sync algorithm playback rate per second. Value should be positive. If unset (0) defaults
    /// to 0.1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxPlaybackRateChange {
      get { return maxPlaybackRateChange_; }
      set {
        maxPlaybackRateChange_ = value;
      }
    }

    /// <summary>Field number for the "SyncMode" field.</summary>
    public const int SyncModeFieldNumber = 6;
    private global::com.tiledmedia.clearvr.cvrinterface.SyncMode syncMode_ = 0;
    /// <summary>
    /// Method used for reaching the sync target. If unset defaults to PLAYBACK_RATE.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.SyncMode SyncMode {
      get { return syncMode_; }
      set {
        syncMode_ = value;
      }
    }

    /// <summary>Field number for the "DisableInitialSeek" field.</summary>
    public const int DisableInitialSeekFieldNumber = 7;
    private bool disableInitialSeek_;
    /// <summary>
    /// Disable the initial seek that might be triggered upon enabling sync. If unset defaults to false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableInitialSeek {
      get { return disableInitialSeek_; }
      set {
        disableInitialSeek_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientLatency != other.ClientLatency) return false;
      if (MaxTargetLag != other.MaxTargetLag) return false;
      if (MaxPlaybackRate != other.MaxPlaybackRate) return false;
      if (MinPlaybackRate != other.MinPlaybackRate) return false;
      if (MaxPlaybackRateChange != other.MaxPlaybackRateChange) return false;
      if (SyncMode != other.SyncMode) return false;
      if (DisableInitialSeek != other.DisableInitialSeek) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientLatency != 0) hash ^= ClientLatency.GetHashCode();
      if (MaxTargetLag != 0) hash ^= MaxTargetLag.GetHashCode();
      if (MaxPlaybackRate != 0F) hash ^= MaxPlaybackRate.GetHashCode();
      if (MinPlaybackRate != 0F) hash ^= MinPlaybackRate.GetHashCode();
      if (MaxPlaybackRateChange != 0F) hash ^= MaxPlaybackRateChange.GetHashCode();
      if (SyncMode != 0) hash ^= SyncMode.GetHashCode();
      if (DisableInitialSeek != false) hash ^= DisableInitialSeek.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientLatency != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ClientLatency);
      }
      if (MaxTargetLag != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxTargetLag);
      }
      if (MaxPlaybackRate != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MaxPlaybackRate);
      }
      if (MinPlaybackRate != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MinPlaybackRate);
      }
      if (MaxPlaybackRateChange != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MaxPlaybackRateChange);
      }
      if (SyncMode != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) SyncMode);
      }
      if (DisableInitialSeek != false) {
        output.WriteRawTag(56);
        output.WriteBool(DisableInitialSeek);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientLatency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientLatency);
      }
      if (MaxTargetLag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxTargetLag);
      }
      if (MaxPlaybackRate != 0F) {
        size += 1 + 4;
      }
      if (MinPlaybackRate != 0F) {
        size += 1 + 4;
      }
      if (MaxPlaybackRateChange != 0F) {
        size += 1 + 4;
      }
      if (SyncMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SyncMode);
      }
      if (DisableInitialSeek != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncSettings other) {
      if (other == null) {
        return;
      }
      if (other.ClientLatency != 0) {
        ClientLatency = other.ClientLatency;
      }
      if (other.MaxTargetLag != 0) {
        MaxTargetLag = other.MaxTargetLag;
      }
      if (other.MaxPlaybackRate != 0F) {
        MaxPlaybackRate = other.MaxPlaybackRate;
      }
      if (other.MinPlaybackRate != 0F) {
        MinPlaybackRate = other.MinPlaybackRate;
      }
      if (other.MaxPlaybackRateChange != 0F) {
        MaxPlaybackRateChange = other.MaxPlaybackRateChange;
      }
      if (other.SyncMode != 0) {
        SyncMode = other.SyncMode;
      }
      if (other.DisableInitialSeek != false) {
        DisableInitialSeek = other.DisableInitialSeek;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClientLatency = input.ReadInt32();
            break;
          }
          case 16: {
            MaxTargetLag = input.ReadInt32();
            break;
          }
          case 29: {
            MaxPlaybackRate = input.ReadFloat();
            break;
          }
          case 37: {
            MinPlaybackRate = input.ReadFloat();
            break;
          }
          case 45: {
            MaxPlaybackRateChange = input.ReadFloat();
            break;
          }
          case 48: {
            syncMode_ = (global::com.tiledmedia.clearvr.cvrinterface.SyncMode) input.ReadEnum();
            break;
          }
          case 56: {
            DisableInitialSeek = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///// Debug messages, any messages here should be temporary ////
  /// </summary>
  public sealed partial class ChangePlaybackRateRequest : pb::IMessage<ChangePlaybackRateRequest> {
    private static readonly pb::MessageParser<ChangePlaybackRateRequest> _parser = new pb::MessageParser<ChangePlaybackRateRequest>(() => new ChangePlaybackRateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangePlaybackRateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlaybackRateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlaybackRateRequest(ChangePlaybackRateRequest other) : this() {
      playbackRate_ = other.playbackRate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlaybackRateRequest Clone() {
      return new ChangePlaybackRateRequest(this);
    }

    /// <summary>Field number for the "PlaybackRate" field.</summary>
    public const int PlaybackRateFieldNumber = 1;
    private double playbackRate_;
    /// <summary>
    /// fractional playback rate, e.g. 0.5, 0.9, 1.1, 1.5, etc...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PlaybackRate {
      get { return playbackRate_; }
      set {
        playbackRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangePlaybackRateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangePlaybackRateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlaybackRate != other.PlaybackRate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlaybackRate != 0D) hash ^= PlaybackRate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlaybackRate != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(PlaybackRate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlaybackRate != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangePlaybackRateRequest other) {
      if (other == null) {
        return;
      }
      if (other.PlaybackRate != 0D) {
        PlaybackRate = other.PlaybackRate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            PlaybackRate = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SwitchAbrLevelRequest : pb::IMessage<SwitchAbrLevelRequest> {
    private static readonly pb::MessageParser<SwitchAbrLevelRequest> _parser = new pb::MessageParser<SwitchAbrLevelRequest>(() => new SwitchAbrLevelRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwitchAbrLevelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwitchAbrLevelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwitchAbrLevelRequest(SwitchAbrLevelRequest other) : this() {
      up_ = other.up_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwitchAbrLevelRequest Clone() {
      return new SwitchAbrLevelRequest(this);
    }

    /// <summary>Field number for the "up" field.</summary>
    public const int UpFieldNumber = 1;
    private bool up_;
    /// <summary>
    /// Indicator if the switch is up or down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Up {
      get { return up_; }
      set {
        up_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwitchAbrLevelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwitchAbrLevelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Up != other.Up) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Up != false) hash ^= Up.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Up != false) {
        output.WriteRawTag(8);
        output.WriteBool(Up);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Up != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwitchAbrLevelRequest other) {
      if (other == null) {
        return;
      }
      if (other.Up != false) {
        Up = other.Up;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Up = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CallAppMessage : pb::IMessage<CallAppMessage> {
    private static readonly pb::MessageParser<CallAppMessage> _parser = new pb::MessageParser<CallAppMessage>(() => new CallAppMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallAppMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallAppMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallAppMessage(CallAppMessage other) : this() {
      callAppMessageType_ = other.callAppMessageType_;
      SyncStatusMessage = other.syncStatusMessage_ != null ? other.SyncStatusMessage.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallAppMessage Clone() {
      return new CallAppMessage(this);
    }

    /// <summary>Field number for the "CallAppMessageType" field.</summary>
    public const int CallAppMessageTypeFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.CallAppMessageType callAppMessageType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.CallAppMessageType CallAppMessageType {
      get { return callAppMessageType_; }
      set {
        callAppMessageType_ = value;
      }
    }

    /// <summary>Field number for the "SyncStatusMessage" field.</summary>
    public const int SyncStatusMessageFieldNumber = 2;
    private global::com.tiledmedia.clearvr.cvrinterface.SyncStatusMessage syncStatusMessage_;
    /// <summary>
    /// messages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.SyncStatusMessage SyncStatusMessage {
      get { return syncStatusMessage_; }
      set {
        syncStatusMessage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallAppMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallAppMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallAppMessageType != other.CallAppMessageType) return false;
      if (!object.Equals(SyncStatusMessage, other.SyncStatusMessage)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallAppMessageType != 0) hash ^= CallAppMessageType.GetHashCode();
      if (syncStatusMessage_ != null) hash ^= SyncStatusMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallAppMessageType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CallAppMessageType);
      }
      if (syncStatusMessage_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SyncStatusMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallAppMessageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CallAppMessageType);
      }
      if (syncStatusMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyncStatusMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallAppMessage other) {
      if (other == null) {
        return;
      }
      if (other.CallAppMessageType != 0) {
        CallAppMessageType = other.CallAppMessageType;
      }
      if (other.syncStatusMessage_ != null) {
        if (syncStatusMessage_ == null) {
          syncStatusMessage_ = new global::com.tiledmedia.clearvr.cvrinterface.SyncStatusMessage();
        }
        SyncStatusMessage.MergeFrom(other.SyncStatusMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            callAppMessageType_ = (global::com.tiledmedia.clearvr.cvrinterface.CallAppMessageType) input.ReadEnum();
            break;
          }
          case 18: {
            if (syncStatusMessage_ == null) {
              syncStatusMessage_ = new global::com.tiledmedia.clearvr.cvrinterface.SyncStatusMessage();
            }
            input.ReadMessage(syncStatusMessage_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContentInfoRequest : pb::IMessage<ContentInfoRequest> {
    private static readonly pb::MessageParser<ContentInfoRequest> _parser = new pb::MessageParser<ContentInfoRequest>(() => new ContentInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContentInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentInfoRequest(ContentInfoRequest other) : this() {
      contentUUID_ = other.contentUUID_;
      ContentItem = other.contentItem_ != null ? other.ContentItem.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentInfoRequest Clone() {
      return new ContentInfoRequest(this);
    }

    /// <summary>Field number for the "ContentUUID" field.</summary>
    public const int ContentUUIDFieldNumber = 1;
    private int contentUUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContentUUID {
      get { return contentUUID_; }
      set {
        contentUUID_ = value;
      }
    }

    /// <summary>Field number for the "ContentItem" field.</summary>
    public const int ContentItemFieldNumber = 2;
    private global::com.tiledmedia.clearvr.cvrinterface.ContentItem contentItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ContentItem ContentItem {
      get { return contentItem_; }
      set {
        contentItem_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContentInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContentInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContentUUID != other.ContentUUID) return false;
      if (!object.Equals(ContentItem, other.ContentItem)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ContentUUID != 0) hash ^= ContentUUID.GetHashCode();
      if (contentItem_ != null) hash ^= ContentItem.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ContentUUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ContentUUID);
      }
      if (contentItem_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ContentItem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ContentUUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContentUUID);
      }
      if (contentItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContentItem);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContentInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.ContentUUID != 0) {
        ContentUUID = other.ContentUUID;
      }
      if (other.contentItem_ != null) {
        if (contentItem_ == null) {
          contentItem_ = new global::com.tiledmedia.clearvr.cvrinterface.ContentItem();
        }
        ContentItem.MergeFrom(other.ContentItem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ContentUUID = input.ReadInt32();
            break;
          }
          case 18: {
            if (contentItem_ == null) {
              contentItem_ = new global::com.tiledmedia.clearvr.cvrinterface.ContentItem();
            }
            input.ReadMessage(contentItem_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContentInfoMessage : pb::IMessage<ContentInfoMessage> {
    private static readonly pb::MessageParser<ContentInfoMessage> _parser = new pb::MessageParser<ContentInfoMessage>(() => new ContentInfoMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContentInfoMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentInfoMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentInfoMessage(ContentInfoMessage other) : this() {
      eventType_ = other.eventType_;
      activeVideoTracks_ = other.activeVideoTracks_.Clone();
      ActiveAudioTrack = other.activeAudioTrack_ != null ? other.ActiveAudioTrack.Clone() : null;
      ActiveSubtitleTrack = other.activeSubtitleTrack_ != null ? other.ActiveSubtitleTrack.Clone() : null;
      feeds_ = other.feeds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentInfoMessage Clone() {
      return new ContentInfoMessage(this);
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.EventType eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.EventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "ActiveVideoTracks" field.</summary>
    public const int ActiveVideoTracksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::com.tiledmedia.clearvr.cvrinterface.TrackID> _repeated_activeVideoTracks_codec
        = pb::FieldCodec.ForMessage(18, global::com.tiledmedia.clearvr.cvrinterface.TrackID.Parser);
    private readonly pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.TrackID> activeVideoTracks_ = new pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.TrackID>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.TrackID> ActiveVideoTracks {
      get { return activeVideoTracks_; }
    }

    /// <summary>Field number for the "ActiveAudioTrack" field.</summary>
    public const int ActiveAudioTrackFieldNumber = 3;
    private global::com.tiledmedia.clearvr.cvrinterface.TrackID activeAudioTrack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.TrackID ActiveAudioTrack {
      get { return activeAudioTrack_; }
      set {
        activeAudioTrack_ = value;
      }
    }

    /// <summary>Field number for the "ActiveSubtitleTrack" field.</summary>
    public const int ActiveSubtitleTrackFieldNumber = 4;
    private global::com.tiledmedia.clearvr.cvrinterface.TrackID activeSubtitleTrack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.TrackID ActiveSubtitleTrack {
      get { return activeSubtitleTrack_; }
      set {
        activeSubtitleTrack_ = value;
      }
    }

    /// <summary>Field number for the "Feeds" field.</summary>
    public const int FeedsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::com.tiledmedia.clearvr.cvrinterface.FeedInfo> _repeated_feeds_codec
        = pb::FieldCodec.ForMessage(42, global::com.tiledmedia.clearvr.cvrinterface.FeedInfo.Parser);
    private readonly pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.FeedInfo> feeds_ = new pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.FeedInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.FeedInfo> Feeds {
      get { return feeds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContentInfoMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContentInfoMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if(!activeVideoTracks_.Equals(other.activeVideoTracks_)) return false;
      if (!object.Equals(ActiveAudioTrack, other.ActiveAudioTrack)) return false;
      if (!object.Equals(ActiveSubtitleTrack, other.ActiveSubtitleTrack)) return false;
      if(!feeds_.Equals(other.feeds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType != 0) hash ^= EventType.GetHashCode();
      hash ^= activeVideoTracks_.GetHashCode();
      if (activeAudioTrack_ != null) hash ^= ActiveAudioTrack.GetHashCode();
      if (activeSubtitleTrack_ != null) hash ^= ActiveSubtitleTrack.GetHashCode();
      hash ^= feeds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      activeVideoTracks_.WriteTo(output, _repeated_activeVideoTracks_codec);
      if (activeAudioTrack_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ActiveAudioTrack);
      }
      if (activeSubtitleTrack_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ActiveSubtitleTrack);
      }
      feeds_.WriteTo(output, _repeated_feeds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      size += activeVideoTracks_.CalculateSize(_repeated_activeVideoTracks_codec);
      if (activeAudioTrack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActiveAudioTrack);
      }
      if (activeSubtitleTrack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActiveSubtitleTrack);
      }
      size += feeds_.CalculateSize(_repeated_feeds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContentInfoMessage other) {
      if (other == null) {
        return;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      activeVideoTracks_.Add(other.activeVideoTracks_);
      if (other.activeAudioTrack_ != null) {
        if (activeAudioTrack_ == null) {
          activeAudioTrack_ = new global::com.tiledmedia.clearvr.cvrinterface.TrackID();
        }
        ActiveAudioTrack.MergeFrom(other.ActiveAudioTrack);
      }
      if (other.activeSubtitleTrack_ != null) {
        if (activeSubtitleTrack_ == null) {
          activeSubtitleTrack_ = new global::com.tiledmedia.clearvr.cvrinterface.TrackID();
        }
        ActiveSubtitleTrack.MergeFrom(other.ActiveSubtitleTrack);
      }
      feeds_.Add(other.feeds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            eventType_ = (global::com.tiledmedia.clearvr.cvrinterface.EventType) input.ReadEnum();
            break;
          }
          case 18: {
            activeVideoTracks_.AddEntriesFrom(input, _repeated_activeVideoTracks_codec);
            break;
          }
          case 26: {
            if (activeAudioTrack_ == null) {
              activeAudioTrack_ = new global::com.tiledmedia.clearvr.cvrinterface.TrackID();
            }
            input.ReadMessage(activeAudioTrack_);
            break;
          }
          case 34: {
            if (activeSubtitleTrack_ == null) {
              activeSubtitleTrack_ = new global::com.tiledmedia.clearvr.cvrinterface.TrackID();
            }
            input.ReadMessage(activeSubtitleTrack_);
            break;
          }
          case 42: {
            feeds_.AddEntriesFrom(input, _repeated_feeds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LogUploadRequest : pb::IMessage<LogUploadRequest> {
    private static readonly pb::MessageParser<LogUploadRequest> _parser = new pb::MessageParser<LogUploadRequest>(() => new LogUploadRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogUploadRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogUploadRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogUploadRequest(LogUploadRequest other) : this() {
      logFilePath_ = other.logFilePath_;
      coreVersion_ = other.coreVersion_;
      licenseBytes_ = other.licenseBytes_;
      forceChina_ = other.forceChina_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogUploadRequest Clone() {
      return new LogUploadRequest(this);
    }

    /// <summary>Field number for the "LogFilePath" field.</summary>
    public const int LogFilePathFieldNumber = 1;
    private string logFilePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogFilePath {
      get { return logFilePath_; }
      set {
        logFilePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CoreVersion" field.</summary>
    public const int CoreVersionFieldNumber = 2;
    private string coreVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoreVersion {
      get { return coreVersion_; }
      set {
        coreVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LicenseBytes" field.</summary>
    public const int LicenseBytesFieldNumber = 3;
    private pb::ByteString licenseBytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LicenseBytes {
      get { return licenseBytes_; }
      set {
        licenseBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ForceChina" field.</summary>
    public const int ForceChinaFieldNumber = 4;
    private bool forceChina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForceChina {
      get { return forceChina_; }
      set {
        forceChina_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogUploadRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogUploadRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LogFilePath != other.LogFilePath) return false;
      if (CoreVersion != other.CoreVersion) return false;
      if (LicenseBytes != other.LicenseBytes) return false;
      if (ForceChina != other.ForceChina) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LogFilePath.Length != 0) hash ^= LogFilePath.GetHashCode();
      if (CoreVersion.Length != 0) hash ^= CoreVersion.GetHashCode();
      if (LicenseBytes.Length != 0) hash ^= LicenseBytes.GetHashCode();
      if (ForceChina != false) hash ^= ForceChina.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LogFilePath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LogFilePath);
      }
      if (CoreVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CoreVersion);
      }
      if (LicenseBytes.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(LicenseBytes);
      }
      if (ForceChina != false) {
        output.WriteRawTag(32);
        output.WriteBool(ForceChina);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LogFilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogFilePath);
      }
      if (CoreVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoreVersion);
      }
      if (LicenseBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LicenseBytes);
      }
      if (ForceChina != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogUploadRequest other) {
      if (other == null) {
        return;
      }
      if (other.LogFilePath.Length != 0) {
        LogFilePath = other.LogFilePath;
      }
      if (other.CoreVersion.Length != 0) {
        CoreVersion = other.CoreVersion;
      }
      if (other.LicenseBytes.Length != 0) {
        LicenseBytes = other.LicenseBytes;
      }
      if (other.ForceChina != false) {
        ForceChina = other.ForceChina;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LogFilePath = input.ReadString();
            break;
          }
          case 18: {
            CoreVersion = input.ReadString();
            break;
          }
          case 26: {
            LicenseBytes = input.ReadBytes();
            break;
          }
          case 32: {
            ForceChina = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DownloadContentRequest : pb::IMessage<DownloadContentRequest> {
    private static readonly pb::MessageParser<DownloadContentRequest> _parser = new pb::MessageParser<DownloadContentRequest>(() => new DownloadContentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DownloadContentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownloadContentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownloadContentRequest(DownloadContentRequest other) : this() {
      persistenceFolderPath_ = other.persistenceFolderPath_;
      uUID_ = other.uUID_;
      cancel_ = other.cancel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownloadContentRequest Clone() {
      return new DownloadContentRequest(this);
    }

    /// <summary>Field number for the "PersistenceFolderPath" field.</summary>
    public const int PersistenceFolderPathFieldNumber = 1;
    private string persistenceFolderPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PersistenceFolderPath {
      get { return persistenceFolderPath_; }
      set {
        persistenceFolderPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UUID" field.</summary>
    public const int UUIDFieldNumber = 2;
    private string uUID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UUID {
      get { return uUID_; }
      set {
        uUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Cancel" field.</summary>
    public const int CancelFieldNumber = 3;
    private bool cancel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Cancel {
      get { return cancel_; }
      set {
        cancel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DownloadContentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DownloadContentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PersistenceFolderPath != other.PersistenceFolderPath) return false;
      if (UUID != other.UUID) return false;
      if (Cancel != other.Cancel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PersistenceFolderPath.Length != 0) hash ^= PersistenceFolderPath.GetHashCode();
      if (UUID.Length != 0) hash ^= UUID.GetHashCode();
      if (Cancel != false) hash ^= Cancel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PersistenceFolderPath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PersistenceFolderPath);
      }
      if (UUID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UUID);
      }
      if (Cancel != false) {
        output.WriteRawTag(24);
        output.WriteBool(Cancel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PersistenceFolderPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PersistenceFolderPath);
      }
      if (UUID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UUID);
      }
      if (Cancel != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DownloadContentRequest other) {
      if (other == null) {
        return;
      }
      if (other.PersistenceFolderPath.Length != 0) {
        PersistenceFolderPath = other.PersistenceFolderPath;
      }
      if (other.UUID.Length != 0) {
        UUID = other.UUID;
      }
      if (other.Cancel != false) {
        Cancel = other.Cancel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PersistenceFolderPath = input.ReadString();
            break;
          }
          case 18: {
            UUID = input.ReadString();
            break;
          }
          case 24: {
            Cancel = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitializeLoggingRequest : pb::IMessage<InitializeLoggingRequest> {
    private static readonly pb::MessageParser<InitializeLoggingRequest> _parser = new pb::MessageParser<InitializeLoggingRequest>(() => new InitializeLoggingRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeLoggingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeLoggingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeLoggingRequest(InitializeLoggingRequest other) : this() {
      globalLogVerbosity_ = other.globalLogVerbosity_;
      globalLogFolder_ = other.globalLogFolder_;
      globalLogFileName_ = other.globalLogFileName_;
      globalLogToMemory_ = other.globalLogToMemory_;
      globalLogToStderr_ = other.globalLogToStderr_;
      logNetwork_ = other.logNetwork_;
      overrideLogLevelConfiguration_ = other.overrideLogLevelConfiguration_.Clone();
      overrideLoggingOutputConfiguration_ = other.overrideLoggingOutputConfiguration_.Clone();
      interactionRecorderFileName_ = other.interactionRecorderFileName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeLoggingRequest Clone() {
      return new InitializeLoggingRequest(this);
    }

    /// <summary>Field number for the "GlobalLogVerbosity" field.</summary>
    public const int GlobalLogVerbosityFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.LogLevel globalLogVerbosity_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.LogLevel GlobalLogVerbosity {
      get { return globalLogVerbosity_; }
      set {
        globalLogVerbosity_ = value;
      }
    }

    /// <summary>Field number for the "GlobalLogFolder" field.</summary>
    public const int GlobalLogFolderFieldNumber = 2;
    private string globalLogFolder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GlobalLogFolder {
      get { return globalLogFolder_; }
      set {
        globalLogFolder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GlobalLogFileName" field.</summary>
    public const int GlobalLogFileNameFieldNumber = 3;
    private string globalLogFileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GlobalLogFileName {
      get { return globalLogFileName_; }
      set {
        globalLogFileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GlobalLogToMemory" field.</summary>
    public const int GlobalLogToMemoryFieldNumber = 7;
    private bool globalLogToMemory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GlobalLogToMemory {
      get { return globalLogToMemory_; }
      set {
        globalLogToMemory_ = value;
      }
    }

    /// <summary>Field number for the "GlobalLogToStderr" field.</summary>
    public const int GlobalLogToStderrFieldNumber = 8;
    private bool globalLogToStderr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GlobalLogToStderr {
      get { return globalLogToStderr_; }
      set {
        globalLogToStderr_ = value;
      }
    }

    /// <summary>Field number for the "LogNetwork" field.</summary>
    public const int LogNetworkFieldNumber = 9;
    private bool logNetwork_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LogNetwork {
      get { return logNetwork_; }
      set {
        logNetwork_ = value;
      }
    }

    /// <summary>Field number for the "OverrideLogLevelConfiguration" field.</summary>
    public const int OverrideLogLevelConfigurationFieldNumber = 4;
    private static readonly pb::FieldCodec<global::com.tiledmedia.clearvr.cvrinterface.ComponentSpecificLoggingLevel> _repeated_overrideLogLevelConfiguration_codec
        = pb::FieldCodec.ForMessage(34, global::com.tiledmedia.clearvr.cvrinterface.ComponentSpecificLoggingLevel.Parser);
    private readonly pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.ComponentSpecificLoggingLevel> overrideLogLevelConfiguration_ = new pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.ComponentSpecificLoggingLevel>();
    /// <summary>
    /// If a component requires its log verbosity to be different from the global one, it needs to be listed in the
    /// following override
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.ComponentSpecificLoggingLevel> OverrideLogLevelConfiguration {
      get { return overrideLogLevelConfiguration_; }
    }

    /// <summary>Field number for the "OverrideLoggingOutputConfiguration" field.</summary>
    public const int OverrideLoggingOutputConfigurationFieldNumber = 5;
    private static readonly pb::FieldCodec<global::com.tiledmedia.clearvr.cvrinterface.ComponentSpecificLoggingOutput> _repeated_overrideLoggingOutputConfiguration_codec
        = pb::FieldCodec.ForMessage(42, global::com.tiledmedia.clearvr.cvrinterface.ComponentSpecificLoggingOutput.Parser);
    private readonly pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.ComponentSpecificLoggingOutput> overrideLoggingOutputConfiguration_ = new pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.ComponentSpecificLoggingOutput>();
    /// <summary>
    /// If a component requires its log path to be different from the global one, it needs to be listed in the following
    /// override
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.ComponentSpecificLoggingOutput> OverrideLoggingOutputConfiguration {
      get { return overrideLoggingOutputConfiguration_; }
    }

    /// <summary>Field number for the "InteractionRecorderFileName" field.</summary>
    public const int InteractionRecorderFileNameFieldNumber = 6;
    private string interactionRecorderFileName_ = "";
    /// <summary>
    /// This represent the interaction recorder's writing path
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InteractionRecorderFileName {
      get { return interactionRecorderFileName_; }
      set {
        interactionRecorderFileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeLoggingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeLoggingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GlobalLogVerbosity != other.GlobalLogVerbosity) return false;
      if (GlobalLogFolder != other.GlobalLogFolder) return false;
      if (GlobalLogFileName != other.GlobalLogFileName) return false;
      if (GlobalLogToMemory != other.GlobalLogToMemory) return false;
      if (GlobalLogToStderr != other.GlobalLogToStderr) return false;
      if (LogNetwork != other.LogNetwork) return false;
      if(!overrideLogLevelConfiguration_.Equals(other.overrideLogLevelConfiguration_)) return false;
      if(!overrideLoggingOutputConfiguration_.Equals(other.overrideLoggingOutputConfiguration_)) return false;
      if (InteractionRecorderFileName != other.InteractionRecorderFileName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GlobalLogVerbosity != 0) hash ^= GlobalLogVerbosity.GetHashCode();
      if (GlobalLogFolder.Length != 0) hash ^= GlobalLogFolder.GetHashCode();
      if (GlobalLogFileName.Length != 0) hash ^= GlobalLogFileName.GetHashCode();
      if (GlobalLogToMemory != false) hash ^= GlobalLogToMemory.GetHashCode();
      if (GlobalLogToStderr != false) hash ^= GlobalLogToStderr.GetHashCode();
      if (LogNetwork != false) hash ^= LogNetwork.GetHashCode();
      hash ^= overrideLogLevelConfiguration_.GetHashCode();
      hash ^= overrideLoggingOutputConfiguration_.GetHashCode();
      if (InteractionRecorderFileName.Length != 0) hash ^= InteractionRecorderFileName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GlobalLogVerbosity != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) GlobalLogVerbosity);
      }
      if (GlobalLogFolder.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GlobalLogFolder);
      }
      if (GlobalLogFileName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GlobalLogFileName);
      }
      overrideLogLevelConfiguration_.WriteTo(output, _repeated_overrideLogLevelConfiguration_codec);
      overrideLoggingOutputConfiguration_.WriteTo(output, _repeated_overrideLoggingOutputConfiguration_codec);
      if (InteractionRecorderFileName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(InteractionRecorderFileName);
      }
      if (GlobalLogToMemory != false) {
        output.WriteRawTag(56);
        output.WriteBool(GlobalLogToMemory);
      }
      if (GlobalLogToStderr != false) {
        output.WriteRawTag(64);
        output.WriteBool(GlobalLogToStderr);
      }
      if (LogNetwork != false) {
        output.WriteRawTag(72);
        output.WriteBool(LogNetwork);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GlobalLogVerbosity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GlobalLogVerbosity);
      }
      if (GlobalLogFolder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GlobalLogFolder);
      }
      if (GlobalLogFileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GlobalLogFileName);
      }
      if (GlobalLogToMemory != false) {
        size += 1 + 1;
      }
      if (GlobalLogToStderr != false) {
        size += 1 + 1;
      }
      if (LogNetwork != false) {
        size += 1 + 1;
      }
      size += overrideLogLevelConfiguration_.CalculateSize(_repeated_overrideLogLevelConfiguration_codec);
      size += overrideLoggingOutputConfiguration_.CalculateSize(_repeated_overrideLoggingOutputConfiguration_codec);
      if (InteractionRecorderFileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InteractionRecorderFileName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeLoggingRequest other) {
      if (other == null) {
        return;
      }
      if (other.GlobalLogVerbosity != 0) {
        GlobalLogVerbosity = other.GlobalLogVerbosity;
      }
      if (other.GlobalLogFolder.Length != 0) {
        GlobalLogFolder = other.GlobalLogFolder;
      }
      if (other.GlobalLogFileName.Length != 0) {
        GlobalLogFileName = other.GlobalLogFileName;
      }
      if (other.GlobalLogToMemory != false) {
        GlobalLogToMemory = other.GlobalLogToMemory;
      }
      if (other.GlobalLogToStderr != false) {
        GlobalLogToStderr = other.GlobalLogToStderr;
      }
      if (other.LogNetwork != false) {
        LogNetwork = other.LogNetwork;
      }
      overrideLogLevelConfiguration_.Add(other.overrideLogLevelConfiguration_);
      overrideLoggingOutputConfiguration_.Add(other.overrideLoggingOutputConfiguration_);
      if (other.InteractionRecorderFileName.Length != 0) {
        InteractionRecorderFileName = other.InteractionRecorderFileName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            globalLogVerbosity_ = (global::com.tiledmedia.clearvr.cvrinterface.LogLevel) input.ReadEnum();
            break;
          }
          case 18: {
            GlobalLogFolder = input.ReadString();
            break;
          }
          case 26: {
            GlobalLogFileName = input.ReadString();
            break;
          }
          case 34: {
            overrideLogLevelConfiguration_.AddEntriesFrom(input, _repeated_overrideLogLevelConfiguration_codec);
            break;
          }
          case 42: {
            overrideLoggingOutputConfiguration_.AddEntriesFrom(input, _repeated_overrideLoggingOutputConfiguration_codec);
            break;
          }
          case 50: {
            InteractionRecorderFileName = input.ReadString();
            break;
          }
          case 56: {
            GlobalLogToMemory = input.ReadBool();
            break;
          }
          case 64: {
            GlobalLogToStderr = input.ReadBool();
            break;
          }
          case 72: {
            LogNetwork = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComponentSpecificLoggingLevel : pb::IMessage<ComponentSpecificLoggingLevel> {
    private static readonly pb::MessageParser<ComponentSpecificLoggingLevel> _parser = new pb::MessageParser<ComponentSpecificLoggingLevel>(() => new ComponentSpecificLoggingLevel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComponentSpecificLoggingLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComponentSpecificLoggingLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComponentSpecificLoggingLevel(ComponentSpecificLoggingLevel other) : this() {
      component_ = other.component_;
      logVerbosity_ = other.logVerbosity_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComponentSpecificLoggingLevel Clone() {
      return new ComponentSpecificLoggingLevel(this);
    }

    /// <summary>Field number for the "Component" field.</summary>
    public const int ComponentFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.LogComponent component_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.LogComponent Component {
      get { return component_; }
      set {
        component_ = value;
      }
    }

    /// <summary>Field number for the "LogVerbosity" field.</summary>
    public const int LogVerbosityFieldNumber = 2;
    private global::com.tiledmedia.clearvr.cvrinterface.LogLevel logVerbosity_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.LogLevel LogVerbosity {
      get { return logVerbosity_; }
      set {
        logVerbosity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComponentSpecificLoggingLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComponentSpecificLoggingLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Component != other.Component) return false;
      if (LogVerbosity != other.LogVerbosity) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Component != 0) hash ^= Component.GetHashCode();
      if (LogVerbosity != 0) hash ^= LogVerbosity.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Component != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Component);
      }
      if (LogVerbosity != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LogVerbosity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Component != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Component);
      }
      if (LogVerbosity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LogVerbosity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComponentSpecificLoggingLevel other) {
      if (other == null) {
        return;
      }
      if (other.Component != 0) {
        Component = other.Component;
      }
      if (other.LogVerbosity != 0) {
        LogVerbosity = other.LogVerbosity;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            component_ = (global::com.tiledmedia.clearvr.cvrinterface.LogComponent) input.ReadEnum();
            break;
          }
          case 16: {
            logVerbosity_ = (global::com.tiledmedia.clearvr.cvrinterface.LogLevel) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComponentSpecificLoggingOutput : pb::IMessage<ComponentSpecificLoggingOutput> {
    private static readonly pb::MessageParser<ComponentSpecificLoggingOutput> _parser = new pb::MessageParser<ComponentSpecificLoggingOutput>(() => new ComponentSpecificLoggingOutput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComponentSpecificLoggingOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComponentSpecificLoggingOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComponentSpecificLoggingOutput(ComponentSpecificLoggingOutput other) : this() {
      component_ = other.component_;
      logFileName_ = other.logFileName_;
      logToMemory_ = other.logToMemory_;
      logToStderr_ = other.logToStderr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComponentSpecificLoggingOutput Clone() {
      return new ComponentSpecificLoggingOutput(this);
    }

    /// <summary>Field number for the "Component" field.</summary>
    public const int ComponentFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.LogComponent component_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.LogComponent Component {
      get { return component_; }
      set {
        component_ = value;
      }
    }

    /// <summary>Field number for the "LogFileName" field.</summary>
    public const int LogFileNameFieldNumber = 2;
    private string logFileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogFileName {
      get { return logFileName_; }
      set {
        logFileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LogToMemory" field.</summary>
    public const int LogToMemoryFieldNumber = 3;
    private bool logToMemory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LogToMemory {
      get { return logToMemory_; }
      set {
        logToMemory_ = value;
      }
    }

    /// <summary>Field number for the "LogToStderr" field.</summary>
    public const int LogToStderrFieldNumber = 4;
    private bool logToStderr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LogToStderr {
      get { return logToStderr_; }
      set {
        logToStderr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComponentSpecificLoggingOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComponentSpecificLoggingOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Component != other.Component) return false;
      if (LogFileName != other.LogFileName) return false;
      if (LogToMemory != other.LogToMemory) return false;
      if (LogToStderr != other.LogToStderr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Component != 0) hash ^= Component.GetHashCode();
      if (LogFileName.Length != 0) hash ^= LogFileName.GetHashCode();
      if (LogToMemory != false) hash ^= LogToMemory.GetHashCode();
      if (LogToStderr != false) hash ^= LogToStderr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Component != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Component);
      }
      if (LogFileName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LogFileName);
      }
      if (LogToMemory != false) {
        output.WriteRawTag(24);
        output.WriteBool(LogToMemory);
      }
      if (LogToStderr != false) {
        output.WriteRawTag(32);
        output.WriteBool(LogToStderr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Component != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Component);
      }
      if (LogFileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogFileName);
      }
      if (LogToMemory != false) {
        size += 1 + 1;
      }
      if (LogToStderr != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComponentSpecificLoggingOutput other) {
      if (other == null) {
        return;
      }
      if (other.Component != 0) {
        Component = other.Component;
      }
      if (other.LogFileName.Length != 0) {
        LogFileName = other.LogFileName;
      }
      if (other.LogToMemory != false) {
        LogToMemory = other.LogToMemory;
      }
      if (other.LogToStderr != false) {
        LogToStderr = other.LogToStderr;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            component_ = (global::com.tiledmedia.clearvr.cvrinterface.LogComponent) input.ReadEnum();
            break;
          }
          case 18: {
            LogFileName = input.ReadString();
            break;
          }
          case 24: {
            LogToMemory = input.ReadBool();
            break;
          }
          case 32: {
            LogToStderr = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoadStateRequest : pb::IMessage<LoadStateRequest> {
    private static readonly pb::MessageParser<LoadStateRequest> _parser = new pb::MessageParser<LoadStateRequest>(() => new LoadStateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadStateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadStateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadStateRequest(LoadStateRequest other) : this() {
      persistenceFolderPath_ = other.persistenceFolderPath_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadStateRequest Clone() {
      return new LoadStateRequest(this);
    }

    /// <summary>Field number for the "PersistenceFolderPath" field.</summary>
    public const int PersistenceFolderPathFieldNumber = 1;
    private string persistenceFolderPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PersistenceFolderPath {
      get { return persistenceFolderPath_; }
      set {
        persistenceFolderPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadStateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadStateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PersistenceFolderPath != other.PersistenceFolderPath) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PersistenceFolderPath.Length != 0) hash ^= PersistenceFolderPath.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PersistenceFolderPath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PersistenceFolderPath);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PersistenceFolderPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PersistenceFolderPath);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadStateRequest other) {
      if (other == null) {
        return;
      }
      if (other.PersistenceFolderPath.Length != 0) {
        PersistenceFolderPath = other.PersistenceFolderPath;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PersistenceFolderPath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SaveStateRequest : pb::IMessage<SaveStateRequest> {
    private static readonly pb::MessageParser<SaveStateRequest> _parser = new pb::MessageParser<SaveStateRequest>(() => new SaveStateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SaveStateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveStateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveStateRequest(SaveStateRequest other) : this() {
      persistenceFolderPath_ = other.persistenceFolderPath_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveStateRequest Clone() {
      return new SaveStateRequest(this);
    }

    /// <summary>Field number for the "PersistenceFolderPath" field.</summary>
    public const int PersistenceFolderPathFieldNumber = 1;
    private string persistenceFolderPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PersistenceFolderPath {
      get { return persistenceFolderPath_; }
      set {
        persistenceFolderPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SaveStateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SaveStateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PersistenceFolderPath != other.PersistenceFolderPath) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PersistenceFolderPath.Length != 0) hash ^= PersistenceFolderPath.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PersistenceFolderPath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PersistenceFolderPath);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PersistenceFolderPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PersistenceFolderPath);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SaveStateRequest other) {
      if (other == null) {
        return;
      }
      if (other.PersistenceFolderPath.Length != 0) {
        PersistenceFolderPath = other.PersistenceFolderPath;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PersistenceFolderPath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoadStateResponse : pb::IMessage<LoadStateResponse> {
    private static readonly pb::MessageParser<LoadStateResponse> _parser = new pb::MessageParser<LoadStateResponse>(() => new LoadStateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadStateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadStateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadStateResponse(LoadStateResponse other) : this() {
      InitializeParams = other.initializeParams_ != null ? other.InitializeParams.Clone() : null;
      ContentInfo = other.contentInfo_ != null ? other.ContentInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadStateResponse Clone() {
      return new LoadStateResponse(this);
    }

    /// <summary>Field number for the "InitializeParams" field.</summary>
    public const int InitializeParamsFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.InitializeParams initializeParams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InitializeParams InitializeParams {
      get { return initializeParams_; }
      set {
        initializeParams_ = value;
      }
    }

    /// <summary>Field number for the "ContentInfo" field.</summary>
    public const int ContentInfoFieldNumber = 2;
    private global::com.tiledmedia.clearvr.cvrinterface.ContentInfoMessage contentInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ContentInfoMessage ContentInfo {
      get { return contentInfo_; }
      set {
        contentInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadStateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadStateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InitializeParams, other.InitializeParams)) return false;
      if (!object.Equals(ContentInfo, other.ContentInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (initializeParams_ != null) hash ^= InitializeParams.GetHashCode();
      if (contentInfo_ != null) hash ^= ContentInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (initializeParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InitializeParams);
      }
      if (contentInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ContentInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (initializeParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitializeParams);
      }
      if (contentInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContentInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadStateResponse other) {
      if (other == null) {
        return;
      }
      if (other.initializeParams_ != null) {
        if (initializeParams_ == null) {
          initializeParams_ = new global::com.tiledmedia.clearvr.cvrinterface.InitializeParams();
        }
        InitializeParams.MergeFrom(other.InitializeParams);
      }
      if (other.contentInfo_ != null) {
        if (contentInfo_ == null) {
          contentInfo_ = new global::com.tiledmedia.clearvr.cvrinterface.ContentInfoMessage();
        }
        ContentInfo.MergeFrom(other.ContentInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (initializeParams_ == null) {
              initializeParams_ = new global::com.tiledmedia.clearvr.cvrinterface.InitializeParams();
            }
            input.ReadMessage(initializeParams_);
            break;
          }
          case 18: {
            if (contentInfo_ == null) {
              contentInfo_ = new global::com.tiledmedia.clearvr.cvrinterface.ContentInfoMessage();
            }
            input.ReadMessage(contentInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LogUploadResponse : pb::IMessage<LogUploadResponse> {
    private static readonly pb::MessageParser<LogUploadResponse> _parser = new pb::MessageParser<LogUploadResponse>(() => new LogUploadResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogUploadResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogUploadResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogUploadResponse(LogUploadResponse other) : this() {
      coreLogID_ = other.coreLogID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogUploadResponse Clone() {
      return new LogUploadResponse(this);
    }

    /// <summary>Field number for the "CoreLogID" field.</summary>
    public const int CoreLogIDFieldNumber = 1;
    private string coreLogID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoreLogID {
      get { return coreLogID_; }
      set {
        coreLogID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogUploadResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogUploadResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CoreLogID != other.CoreLogID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CoreLogID.Length != 0) hash ^= CoreLogID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CoreLogID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CoreLogID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CoreLogID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoreLogID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogUploadResponse other) {
      if (other == null) {
        return;
      }
      if (other.CoreLogID.Length != 0) {
        CoreLogID = other.CoreLogID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CoreLogID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// </summary>
  public sealed partial class DownloadContentResponse : pb::IMessage<DownloadContentResponse> {
    private static readonly pb::MessageParser<DownloadContentResponse> _parser = new pb::MessageParser<DownloadContentResponse>(() => new DownloadContentResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DownloadContentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownloadContentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownloadContentResponse(DownloadContentResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownloadContentResponse Clone() {
      return new DownloadContentResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DownloadContentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DownloadContentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DownloadContentResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ContentListRequest : pb::IMessage<ContentListRequest> {
    private static readonly pb::MessageParser<ContentListRequest> _parser = new pb::MessageParser<ContentListRequest>(() => new ContentListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContentListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentListRequest(ContentListRequest other) : this() {
      forceChina_ = other.forceChina_;
      localPaths_ = other.localPaths_.Clone();
      credentials_ = other.credentials_.Clone();
      uRLs_ = other.uRLs_.Clone();
      jSONBytes_ = other.jSONBytes_;
      persistenceFolderPath_ = other.persistenceFolderPath_;
      HttpProxyParamsMediaFlow = other.httpProxyParamsMediaFlow_ != null ? other.HttpProxyParamsMediaFlow.Clone() : null;
      HttpsProxyParamsMediaFlow = other.httpsProxyParamsMediaFlow_ != null ? other.HttpsProxyParamsMediaFlow.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentListRequest Clone() {
      return new ContentListRequest(this);
    }

    /// <summary>Field number for the "ForceChina" field.</summary>
    public const int ForceChinaFieldNumber = 1;
    private bool forceChina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForceChina {
      get { return forceChina_; }
      set {
        forceChina_ = value;
      }
    }

    /// <summary>Field number for the "LocalPaths" field.</summary>
    public const int LocalPathsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_localPaths_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> localPaths_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LocalPaths {
      get { return localPaths_; }
    }

    /// <summary>Field number for the "Credentials" field.</summary>
    public const int CredentialsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::com.tiledmedia.clearvr.cvrinterface.CMSCredentials> _repeated_credentials_codec
        = pb::FieldCodec.ForMessage(26, global::com.tiledmedia.clearvr.cvrinterface.CMSCredentials.Parser);
    private readonly pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.CMSCredentials> credentials_ = new pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.CMSCredentials>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.CMSCredentials> Credentials {
      get { return credentials_; }
    }

    /// <summary>Field number for the "URLs" field.</summary>
    public const int URLsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_uRLs_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> uRLs_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> URLs {
      get { return uRLs_; }
    }

    /// <summary>Field number for the "JSONBytes" field.</summary>
    public const int JSONBytesFieldNumber = 5;
    private pb::ByteString jSONBytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString JSONBytes {
      get { return jSONBytes_; }
      set {
        jSONBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PersistenceFolderPath" field.</summary>
    public const int PersistenceFolderPathFieldNumber = 6;
    private string persistenceFolderPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PersistenceFolderPath {
      get { return persistenceFolderPath_; }
      set {
        persistenceFolderPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpProxyParamsMediaFlow" field.</summary>
    public const int HttpProxyParamsMediaFlowFieldNumber = 10;
    private global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow httpProxyParamsMediaFlow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow HttpProxyParamsMediaFlow {
      get { return httpProxyParamsMediaFlow_; }
      set {
        httpProxyParamsMediaFlow_ = value;
      }
    }

    /// <summary>Field number for the "HttpsProxyParamsMediaFlow" field.</summary>
    public const int HttpsProxyParamsMediaFlowFieldNumber = 11;
    private global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow httpsProxyParamsMediaFlow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow HttpsProxyParamsMediaFlow {
      get { return httpsProxyParamsMediaFlow_; }
      set {
        httpsProxyParamsMediaFlow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContentListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContentListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ForceChina != other.ForceChina) return false;
      if(!localPaths_.Equals(other.localPaths_)) return false;
      if(!credentials_.Equals(other.credentials_)) return false;
      if(!uRLs_.Equals(other.uRLs_)) return false;
      if (JSONBytes != other.JSONBytes) return false;
      if (PersistenceFolderPath != other.PersistenceFolderPath) return false;
      if (!object.Equals(HttpProxyParamsMediaFlow, other.HttpProxyParamsMediaFlow)) return false;
      if (!object.Equals(HttpsProxyParamsMediaFlow, other.HttpsProxyParamsMediaFlow)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ForceChina != false) hash ^= ForceChina.GetHashCode();
      hash ^= localPaths_.GetHashCode();
      hash ^= credentials_.GetHashCode();
      hash ^= uRLs_.GetHashCode();
      if (JSONBytes.Length != 0) hash ^= JSONBytes.GetHashCode();
      if (PersistenceFolderPath.Length != 0) hash ^= PersistenceFolderPath.GetHashCode();
      if (httpProxyParamsMediaFlow_ != null) hash ^= HttpProxyParamsMediaFlow.GetHashCode();
      if (httpsProxyParamsMediaFlow_ != null) hash ^= HttpsProxyParamsMediaFlow.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ForceChina != false) {
        output.WriteRawTag(8);
        output.WriteBool(ForceChina);
      }
      localPaths_.WriteTo(output, _repeated_localPaths_codec);
      credentials_.WriteTo(output, _repeated_credentials_codec);
      uRLs_.WriteTo(output, _repeated_uRLs_codec);
      if (JSONBytes.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(JSONBytes);
      }
      if (PersistenceFolderPath.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PersistenceFolderPath);
      }
      if (httpProxyParamsMediaFlow_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(HttpProxyParamsMediaFlow);
      }
      if (httpsProxyParamsMediaFlow_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(HttpsProxyParamsMediaFlow);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ForceChina != false) {
        size += 1 + 1;
      }
      size += localPaths_.CalculateSize(_repeated_localPaths_codec);
      size += credentials_.CalculateSize(_repeated_credentials_codec);
      size += uRLs_.CalculateSize(_repeated_uRLs_codec);
      if (JSONBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(JSONBytes);
      }
      if (PersistenceFolderPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PersistenceFolderPath);
      }
      if (httpProxyParamsMediaFlow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpProxyParamsMediaFlow);
      }
      if (httpsProxyParamsMediaFlow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpsProxyParamsMediaFlow);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContentListRequest other) {
      if (other == null) {
        return;
      }
      if (other.ForceChina != false) {
        ForceChina = other.ForceChina;
      }
      localPaths_.Add(other.localPaths_);
      credentials_.Add(other.credentials_);
      uRLs_.Add(other.uRLs_);
      if (other.JSONBytes.Length != 0) {
        JSONBytes = other.JSONBytes;
      }
      if (other.PersistenceFolderPath.Length != 0) {
        PersistenceFolderPath = other.PersistenceFolderPath;
      }
      if (other.httpProxyParamsMediaFlow_ != null) {
        if (httpProxyParamsMediaFlow_ == null) {
          httpProxyParamsMediaFlow_ = new global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow();
        }
        HttpProxyParamsMediaFlow.MergeFrom(other.HttpProxyParamsMediaFlow);
      }
      if (other.httpsProxyParamsMediaFlow_ != null) {
        if (httpsProxyParamsMediaFlow_ == null) {
          httpsProxyParamsMediaFlow_ = new global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow();
        }
        HttpsProxyParamsMediaFlow.MergeFrom(other.HttpsProxyParamsMediaFlow);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ForceChina = input.ReadBool();
            break;
          }
          case 18: {
            localPaths_.AddEntriesFrom(input, _repeated_localPaths_codec);
            break;
          }
          case 26: {
            credentials_.AddEntriesFrom(input, _repeated_credentials_codec);
            break;
          }
          case 34: {
            uRLs_.AddEntriesFrom(input, _repeated_uRLs_codec);
            break;
          }
          case 42: {
            JSONBytes = input.ReadBytes();
            break;
          }
          case 50: {
            PersistenceFolderPath = input.ReadString();
            break;
          }
          case 82: {
            if (httpProxyParamsMediaFlow_ == null) {
              httpProxyParamsMediaFlow_ = new global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow();
            }
            input.ReadMessage(httpProxyParamsMediaFlow_);
            break;
          }
          case 90: {
            if (httpsProxyParamsMediaFlow_ == null) {
              httpsProxyParamsMediaFlow_ = new global::com.tiledmedia.clearvr.cvrinterface.ProxyParamsMediaFlow();
            }
            input.ReadMessage(httpsProxyParamsMediaFlow_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMSCredentials : pb::IMessage<CMSCredentials> {
    private static readonly pb::MessageParser<CMSCredentials> _parser = new pb::MessageParser<CMSCredentials>(() => new CMSCredentials());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMSCredentials> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMSCredentials() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMSCredentials(CMSCredentials other) : this() {
      username_ = other.username_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMSCredentials Clone() {
      return new CMSCredentials(this);
    }

    /// <summary>Field number for the "Username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMSCredentials);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMSCredentials other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMSCredentials other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContentListMessage : pb::IMessage<ContentListMessage> {
    private static readonly pb::MessageParser<ContentListMessage> _parser = new pb::MessageParser<ContentListMessage>(() => new ContentListMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContentListMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentListMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentListMessage(ContentListMessage other) : this() {
      appContentItems_ = other.appContentItems_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentListMessage Clone() {
      return new ContentListMessage(this);
    }

    /// <summary>Field number for the "AppContentItems" field.</summary>
    public const int AppContentItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.tiledmedia.clearvr.cvrinterface.AppContentItem> _repeated_appContentItems_codec
        = pb::FieldCodec.ForMessage(10, global::com.tiledmedia.clearvr.cvrinterface.AppContentItem.Parser);
    private readonly pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.AppContentItem> appContentItems_ = new pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.AppContentItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.AppContentItem> AppContentItems {
      get { return appContentItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContentListMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContentListMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!appContentItems_.Equals(other.appContentItems_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= appContentItems_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      appContentItems_.WriteTo(output, _repeated_appContentItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += appContentItems_.CalculateSize(_repeated_appContentItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContentListMessage other) {
      if (other == null) {
        return;
      }
      appContentItems_.Add(other.appContentItems_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            appContentItems_.AddEntriesFrom(input, _repeated_appContentItems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FeedInfo : pb::IMessage<FeedInfo> {
    private static readonly pb::MessageParser<FeedInfo> _parser = new pb::MessageParser<FeedInfo>(() => new FeedInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeedInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeedInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeedInfo(FeedInfo other) : this() {
      videoTracks_ = other.videoTracks_.Clone();
      audioTracks_ = other.audioTracks_.Clone();
      subtitleTracks_ = other.subtitleTracks_.Clone();
      uRL_ = other.uRL_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeedInfo Clone() {
      return new FeedInfo(this);
    }

    /// <summary>Field number for the "VideoTracks" field.</summary>
    public const int VideoTracksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.tiledmedia.clearvr.cvrinterface.VideoTrackInfo> _repeated_videoTracks_codec
        = pb::FieldCodec.ForMessage(10, global::com.tiledmedia.clearvr.cvrinterface.VideoTrackInfo.Parser);
    private readonly pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.VideoTrackInfo> videoTracks_ = new pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.VideoTrackInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.VideoTrackInfo> VideoTracks {
      get { return videoTracks_; }
    }

    /// <summary>Field number for the "AudioTracks" field.</summary>
    public const int AudioTracksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::com.tiledmedia.clearvr.cvrinterface.AudioTrackInfo> _repeated_audioTracks_codec
        = pb::FieldCodec.ForMessage(18, global::com.tiledmedia.clearvr.cvrinterface.AudioTrackInfo.Parser);
    private readonly pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.AudioTrackInfo> audioTracks_ = new pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.AudioTrackInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.AudioTrackInfo> AudioTracks {
      get { return audioTracks_; }
    }

    /// <summary>Field number for the "SubtitleTracks" field.</summary>
    public const int SubtitleTracksFieldNumber = 3;
    private static readonly pb::FieldCodec<global::com.tiledmedia.clearvr.cvrinterface.SubtitleTrackInfo> _repeated_subtitleTracks_codec
        = pb::FieldCodec.ForMessage(26, global::com.tiledmedia.clearvr.cvrinterface.SubtitleTrackInfo.Parser);
    private readonly pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.SubtitleTrackInfo> subtitleTracks_ = new pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.SubtitleTrackInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.tiledmedia.clearvr.cvrinterface.SubtitleTrackInfo> SubtitleTracks {
      get { return subtitleTracks_; }
    }

    /// <summary>Field number for the "URL" field.</summary>
    public const int URLFieldNumber = 4;
    private string uRL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string URL {
      get { return uRL_; }
      set {
        uRL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeedInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeedInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!videoTracks_.Equals(other.videoTracks_)) return false;
      if(!audioTracks_.Equals(other.audioTracks_)) return false;
      if(!subtitleTracks_.Equals(other.subtitleTracks_)) return false;
      if (URL != other.URL) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= videoTracks_.GetHashCode();
      hash ^= audioTracks_.GetHashCode();
      hash ^= subtitleTracks_.GetHashCode();
      if (URL.Length != 0) hash ^= URL.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      videoTracks_.WriteTo(output, _repeated_videoTracks_codec);
      audioTracks_.WriteTo(output, _repeated_audioTracks_codec);
      subtitleTracks_.WriteTo(output, _repeated_subtitleTracks_codec);
      if (URL.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(URL);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += videoTracks_.CalculateSize(_repeated_videoTracks_codec);
      size += audioTracks_.CalculateSize(_repeated_audioTracks_codec);
      size += subtitleTracks_.CalculateSize(_repeated_subtitleTracks_codec);
      if (URL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(URL);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeedInfo other) {
      if (other == null) {
        return;
      }
      videoTracks_.Add(other.videoTracks_);
      audioTracks_.Add(other.audioTracks_);
      subtitleTracks_.Add(other.subtitleTracks_);
      if (other.URL.Length != 0) {
        URL = other.URL;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            videoTracks_.AddEntriesFrom(input, _repeated_videoTracks_codec);
            break;
          }
          case 18: {
            audioTracks_.AddEntriesFrom(input, _repeated_audioTracks_codec);
            break;
          }
          case 26: {
            subtitleTracks_.AddEntriesFrom(input, _repeated_subtitleTracks_codec);
            break;
          }
          case 34: {
            URL = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VideoTrackInfo : pb::IMessage<VideoTrackInfo> {
    private static readonly pb::MessageParser<VideoTrackInfo> _parser = new pb::MessageParser<VideoTrackInfo>(() => new VideoTrackInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoTrackInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoTrackInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoTrackInfo(VideoTrackInfo other) : this() {
      videoTrackIdx_ = other.videoTrackIdx_;
      supported_ = other.supported_;
      uRL_ = other.uRL_;
      codec_ = other.codec_;
      width_ = other.width_;
      height_ = other.height_;
      framerateNum_ = other.framerateNum_;
      framerateDenom_ = other.framerateDenom_;
      projectionType_ = other.projectionType_;
      bitrateInKbps_ = other.bitrateInKbps_;
      dRM_ = other.dRM_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoTrackInfo Clone() {
      return new VideoTrackInfo(this);
    }

    /// <summary>Field number for the "VideoTrackIdx" field.</summary>
    public const int VideoTrackIdxFieldNumber = 1;
    private int videoTrackIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VideoTrackIdx {
      get { return videoTrackIdx_; }
      set {
        videoTrackIdx_ = value;
      }
    }

    /// <summary>Field number for the "Supported" field.</summary>
    public const int SupportedFieldNumber = 2;
    private global::com.tiledmedia.clearvr.cvrinterface.IsSupportedResult supported_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.IsSupportedResult Supported {
      get { return supported_; }
      set {
        supported_ = value;
      }
    }

    /// <summary>Field number for the "URL" field.</summary>
    public const int URLFieldNumber = 3;
    private string uRL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string URL {
      get { return uRL_; }
      set {
        uRL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Codec" field.</summary>
    public const int CodecFieldNumber = 4;
    private global::com.tiledmedia.clearvr.cvrinterface.VideoCodecType codec_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.VideoCodecType Codec {
      get { return codec_; }
      set {
        codec_ = value;
      }
    }

    /// <summary>Field number for the "Width" field.</summary>
    public const int WidthFieldNumber = 5;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "Height" field.</summary>
    public const int HeightFieldNumber = 6;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "FramerateNum" field.</summary>
    public const int FramerateNumFieldNumber = 7;
    private int framerateNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramerateNum {
      get { return framerateNum_; }
      set {
        framerateNum_ = value;
      }
    }

    /// <summary>Field number for the "FramerateDenom" field.</summary>
    public const int FramerateDenomFieldNumber = 8;
    private int framerateDenom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramerateDenom {
      get { return framerateDenom_; }
      set {
        framerateDenom_ = value;
      }
    }

    /// <summary>Field number for the "ProjectionType" field.</summary>
    public const int ProjectionTypeFieldNumber = 9;
    private string projectionType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectionType {
      get { return projectionType_; }
      set {
        projectionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BitrateInKbps" field.</summary>
    public const int BitrateInKbpsFieldNumber = 10;
    private int bitrateInKbps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BitrateInKbps {
      get { return bitrateInKbps_; }
      set {
        bitrateInKbps_ = value;
      }
    }

    /// <summary>Field number for the "DRM" field.</summary>
    public const int DRMFieldNumber = 20;
    private global::com.tiledmedia.clearvr.cvrinterface.DRMType dRM_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.DRMType DRM {
      get { return dRM_; }
      set {
        dRM_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VideoTrackInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VideoTrackInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VideoTrackIdx != other.VideoTrackIdx) return false;
      if (Supported != other.Supported) return false;
      if (URL != other.URL) return false;
      if (Codec != other.Codec) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (FramerateNum != other.FramerateNum) return false;
      if (FramerateDenom != other.FramerateDenom) return false;
      if (ProjectionType != other.ProjectionType) return false;
      if (BitrateInKbps != other.BitrateInKbps) return false;
      if (DRM != other.DRM) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VideoTrackIdx != 0) hash ^= VideoTrackIdx.GetHashCode();
      if (Supported != 0) hash ^= Supported.GetHashCode();
      if (URL.Length != 0) hash ^= URL.GetHashCode();
      if (Codec != 0) hash ^= Codec.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (FramerateNum != 0) hash ^= FramerateNum.GetHashCode();
      if (FramerateDenom != 0) hash ^= FramerateDenom.GetHashCode();
      if (ProjectionType.Length != 0) hash ^= ProjectionType.GetHashCode();
      if (BitrateInKbps != 0) hash ^= BitrateInKbps.GetHashCode();
      if (DRM != 0) hash ^= DRM.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoTrackIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(VideoTrackIdx);
      }
      if (Supported != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Supported);
      }
      if (URL.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(URL);
      }
      if (Codec != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Codec);
      }
      if (Width != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Height);
      }
      if (FramerateNum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FramerateNum);
      }
      if (FramerateDenom != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FramerateDenom);
      }
      if (ProjectionType.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ProjectionType);
      }
      if (BitrateInKbps != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BitrateInKbps);
      }
      if (DRM != 0) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) DRM);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoTrackIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VideoTrackIdx);
      }
      if (Supported != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Supported);
      }
      if (URL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(URL);
      }
      if (Codec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Codec);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (FramerateNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramerateNum);
      }
      if (FramerateDenom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramerateDenom);
      }
      if (ProjectionType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectionType);
      }
      if (BitrateInKbps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BitrateInKbps);
      }
      if (DRM != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DRM);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VideoTrackInfo other) {
      if (other == null) {
        return;
      }
      if (other.VideoTrackIdx != 0) {
        VideoTrackIdx = other.VideoTrackIdx;
      }
      if (other.Supported != 0) {
        Supported = other.Supported;
      }
      if (other.URL.Length != 0) {
        URL = other.URL;
      }
      if (other.Codec != 0) {
        Codec = other.Codec;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.FramerateNum != 0) {
        FramerateNum = other.FramerateNum;
      }
      if (other.FramerateDenom != 0) {
        FramerateDenom = other.FramerateDenom;
      }
      if (other.ProjectionType.Length != 0) {
        ProjectionType = other.ProjectionType;
      }
      if (other.BitrateInKbps != 0) {
        BitrateInKbps = other.BitrateInKbps;
      }
      if (other.DRM != 0) {
        DRM = other.DRM;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VideoTrackIdx = input.ReadInt32();
            break;
          }
          case 16: {
            supported_ = (global::com.tiledmedia.clearvr.cvrinterface.IsSupportedResult) input.ReadEnum();
            break;
          }
          case 26: {
            URL = input.ReadString();
            break;
          }
          case 32: {
            codec_ = (global::com.tiledmedia.clearvr.cvrinterface.VideoCodecType) input.ReadEnum();
            break;
          }
          case 40: {
            Width = input.ReadInt32();
            break;
          }
          case 48: {
            Height = input.ReadInt32();
            break;
          }
          case 56: {
            FramerateNum = input.ReadInt32();
            break;
          }
          case 64: {
            FramerateDenom = input.ReadInt32();
            break;
          }
          case 74: {
            ProjectionType = input.ReadString();
            break;
          }
          case 80: {
            BitrateInKbps = input.ReadInt32();
            break;
          }
          case 160: {
            dRM_ = (global::com.tiledmedia.clearvr.cvrinterface.DRMType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AudioTrackInfo : pb::IMessage<AudioTrackInfo> {
    private static readonly pb::MessageParser<AudioTrackInfo> _parser = new pb::MessageParser<AudioTrackInfo>(() => new AudioTrackInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioTrackInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioTrackInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioTrackInfo(AudioTrackInfo other) : this() {
      audioTrackIdx_ = other.audioTrackIdx_;
      boundToVideoTrackIdx_ = other.boundToVideoTrackIdx_;
      uRL_ = other.uRL_;
      codec_ = other.codec_;
      sampleRate_ = other.sampleRate_;
      numberOfChannels_ = other.numberOfChannels_;
      name_ = other.name_;
      language_ = other.language_;
      bitrateInKbps_ = other.bitrateInKbps_;
      dRM_ = other.dRM_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioTrackInfo Clone() {
      return new AudioTrackInfo(this);
    }

    /// <summary>Field number for the "AudioTrackIdx" field.</summary>
    public const int AudioTrackIdxFieldNumber = 1;
    private int audioTrackIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AudioTrackIdx {
      get { return audioTrackIdx_; }
      set {
        audioTrackIdx_ = value;
      }
    }

    /// <summary>Field number for the "BoundToVideoTrackIdx" field.</summary>
    public const int BoundToVideoTrackIdxFieldNumber = 2;
    private int boundToVideoTrackIdx_;
    /// <summary>
    /// -1 if not bound
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoundToVideoTrackIdx {
      get { return boundToVideoTrackIdx_; }
      set {
        boundToVideoTrackIdx_ = value;
      }
    }

    /// <summary>Field number for the "URL" field.</summary>
    public const int URLFieldNumber = 3;
    private string uRL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string URL {
      get { return uRL_; }
      set {
        uRL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Codec" field.</summary>
    public const int CodecFieldNumber = 4;
    private global::com.tiledmedia.clearvr.cvrinterface.AudioCodecType codec_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.AudioCodecType Codec {
      get { return codec_; }
      set {
        codec_ = value;
      }
    }

    /// <summary>Field number for the "SampleRate" field.</summary>
    public const int SampleRateFieldNumber = 5;
    private int sampleRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SampleRate {
      get { return sampleRate_; }
      set {
        sampleRate_ = value;
      }
    }

    /// <summary>Field number for the "NumberOfChannels" field.</summary>
    public const int NumberOfChannelsFieldNumber = 6;
    private int numberOfChannels_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberOfChannels {
      get { return numberOfChannels_; }
      set {
        numberOfChannels_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 7;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Language" field.</summary>
    public const int LanguageFieldNumber = 8;
    private string language_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BitrateInKbps" field.</summary>
    public const int BitrateInKbpsFieldNumber = 9;
    private int bitrateInKbps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BitrateInKbps {
      get { return bitrateInKbps_; }
      set {
        bitrateInKbps_ = value;
      }
    }

    /// <summary>Field number for the "DRM" field.</summary>
    public const int DRMFieldNumber = 20;
    private global::com.tiledmedia.clearvr.cvrinterface.DRMType dRM_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.DRMType DRM {
      get { return dRM_; }
      set {
        dRM_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioTrackInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioTrackInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AudioTrackIdx != other.AudioTrackIdx) return false;
      if (BoundToVideoTrackIdx != other.BoundToVideoTrackIdx) return false;
      if (URL != other.URL) return false;
      if (Codec != other.Codec) return false;
      if (SampleRate != other.SampleRate) return false;
      if (NumberOfChannels != other.NumberOfChannels) return false;
      if (Name != other.Name) return false;
      if (Language != other.Language) return false;
      if (BitrateInKbps != other.BitrateInKbps) return false;
      if (DRM != other.DRM) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AudioTrackIdx != 0) hash ^= AudioTrackIdx.GetHashCode();
      if (BoundToVideoTrackIdx != 0) hash ^= BoundToVideoTrackIdx.GetHashCode();
      if (URL.Length != 0) hash ^= URL.GetHashCode();
      if (Codec != 0) hash ^= Codec.GetHashCode();
      if (SampleRate != 0) hash ^= SampleRate.GetHashCode();
      if (NumberOfChannels != 0) hash ^= NumberOfChannels.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (BitrateInKbps != 0) hash ^= BitrateInKbps.GetHashCode();
      if (DRM != 0) hash ^= DRM.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AudioTrackIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AudioTrackIdx);
      }
      if (BoundToVideoTrackIdx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoundToVideoTrackIdx);
      }
      if (URL.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(URL);
      }
      if (Codec != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Codec);
      }
      if (SampleRate != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SampleRate);
      }
      if (NumberOfChannels != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NumberOfChannels);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Language);
      }
      if (BitrateInKbps != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BitrateInKbps);
      }
      if (DRM != 0) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) DRM);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AudioTrackIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AudioTrackIdx);
      }
      if (BoundToVideoTrackIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoundToVideoTrackIdx);
      }
      if (URL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(URL);
      }
      if (Codec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Codec);
      }
      if (SampleRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SampleRate);
      }
      if (NumberOfChannels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfChannels);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (BitrateInKbps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BitrateInKbps);
      }
      if (DRM != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DRM);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioTrackInfo other) {
      if (other == null) {
        return;
      }
      if (other.AudioTrackIdx != 0) {
        AudioTrackIdx = other.AudioTrackIdx;
      }
      if (other.BoundToVideoTrackIdx != 0) {
        BoundToVideoTrackIdx = other.BoundToVideoTrackIdx;
      }
      if (other.URL.Length != 0) {
        URL = other.URL;
      }
      if (other.Codec != 0) {
        Codec = other.Codec;
      }
      if (other.SampleRate != 0) {
        SampleRate = other.SampleRate;
      }
      if (other.NumberOfChannels != 0) {
        NumberOfChannels = other.NumberOfChannels;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      if (other.BitrateInKbps != 0) {
        BitrateInKbps = other.BitrateInKbps;
      }
      if (other.DRM != 0) {
        DRM = other.DRM;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AudioTrackIdx = input.ReadInt32();
            break;
          }
          case 16: {
            BoundToVideoTrackIdx = input.ReadInt32();
            break;
          }
          case 26: {
            URL = input.ReadString();
            break;
          }
          case 32: {
            codec_ = (global::com.tiledmedia.clearvr.cvrinterface.AudioCodecType) input.ReadEnum();
            break;
          }
          case 40: {
            SampleRate = input.ReadInt32();
            break;
          }
          case 48: {
            NumberOfChannels = input.ReadInt32();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
          case 66: {
            Language = input.ReadString();
            break;
          }
          case 72: {
            BitrateInKbps = input.ReadInt32();
            break;
          }
          case 160: {
            dRM_ = (global::com.tiledmedia.clearvr.cvrinterface.DRMType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubtitleTrackInfo : pb::IMessage<SubtitleTrackInfo> {
    private static readonly pb::MessageParser<SubtitleTrackInfo> _parser = new pb::MessageParser<SubtitleTrackInfo>(() => new SubtitleTrackInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubtitleTrackInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubtitleTrackInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubtitleTrackInfo(SubtitleTrackInfo other) : this() {
      subtitleTrackIdx_ = other.subtitleTrackIdx_;
      boundToVideoTrackIdx_ = other.boundToVideoTrackIdx_;
      uRL_ = other.uRL_;
      name_ = other.name_;
      language_ = other.language_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubtitleTrackInfo Clone() {
      return new SubtitleTrackInfo(this);
    }

    /// <summary>Field number for the "SubtitleTrackIdx" field.</summary>
    public const int SubtitleTrackIdxFieldNumber = 1;
    private int subtitleTrackIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubtitleTrackIdx {
      get { return subtitleTrackIdx_; }
      set {
        subtitleTrackIdx_ = value;
      }
    }

    /// <summary>Field number for the "BoundToVideoTrackIdx" field.</summary>
    public const int BoundToVideoTrackIdxFieldNumber = 2;
    private int boundToVideoTrackIdx_;
    /// <summary>
    /// -1 if not bound
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoundToVideoTrackIdx {
      get { return boundToVideoTrackIdx_; }
      set {
        boundToVideoTrackIdx_ = value;
      }
    }

    /// <summary>Field number for the "URL" field.</summary>
    public const int URLFieldNumber = 3;
    private string uRL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string URL {
      get { return uRL_; }
      set {
        uRL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Language" field.</summary>
    public const int LanguageFieldNumber = 4;
    private string language_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubtitleTrackInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubtitleTrackInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubtitleTrackIdx != other.SubtitleTrackIdx) return false;
      if (BoundToVideoTrackIdx != other.BoundToVideoTrackIdx) return false;
      if (URL != other.URL) return false;
      if (Name != other.Name) return false;
      if (Language != other.Language) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubtitleTrackIdx != 0) hash ^= SubtitleTrackIdx.GetHashCode();
      if (BoundToVideoTrackIdx != 0) hash ^= BoundToVideoTrackIdx.GetHashCode();
      if (URL.Length != 0) hash ^= URL.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubtitleTrackIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SubtitleTrackIdx);
      }
      if (BoundToVideoTrackIdx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoundToVideoTrackIdx);
      }
      if (URL.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(URL);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Language);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubtitleTrackIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubtitleTrackIdx);
      }
      if (BoundToVideoTrackIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoundToVideoTrackIdx);
      }
      if (URL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(URL);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubtitleTrackInfo other) {
      if (other == null) {
        return;
      }
      if (other.SubtitleTrackIdx != 0) {
        SubtitleTrackIdx = other.SubtitleTrackIdx;
      }
      if (other.BoundToVideoTrackIdx != 0) {
        BoundToVideoTrackIdx = other.BoundToVideoTrackIdx;
      }
      if (other.URL.Length != 0) {
        URL = other.URL;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SubtitleTrackIdx = input.ReadInt32();
            break;
          }
          case 16: {
            BoundToVideoTrackIdx = input.ReadInt32();
            break;
          }
          case 26: {
            URL = input.ReadString();
            break;
          }
          case 34: {
            Language = input.ReadString();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppContentItem : pb::IMessage<AppContentItem> {
    private static readonly pb::MessageParser<AppContentItem> _parser = new pb::MessageParser<AppContentItem>(() => new AppContentItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppContentItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppContentItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppContentItem(AppContentItem other) : this() {
      author_ = other.author_;
      title_ = other.title_;
      thumbnail_ = other.thumbnail_;
      description_ = other.description_;
      groupID_ = other.groupID_;
      MaxQuality = other.maxQuality_ != null ? other.MaxQuality.Clone() : null;
      live_ = other.live_;
      wallclockSynced_ = other.wallclockSynced_;
      stereo_ = other.stereo_;
      planar_ = other.planar_;
      lowLatency_ = other.lowLatency_;
      duration_ = other.duration_;
      dataAdded_ = other.dataAdded_;
      contentType_ = other.contentType_;
      certPath_ = other.certPath_;
      keyPath_ = other.keyPath_;
      cAChainPath_ = other.cAChainPath_;
      layoutName_ = other.layoutName_;
      uUID_ = other.uUID_;
      uRL_ = other.uRL_;
      SDKContentItem = other.sDKContentItem_ != null ? other.SDKContentItem.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppContentItem Clone() {
      return new AppContentItem(this);
    }

    /// <summary>Field number for the "Author" field.</summary>
    public const int AuthorFieldNumber = 1;
    private string author_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Author {
      get { return author_; }
      set {
        author_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Thumbnail" field.</summary>
    public const int ThumbnailFieldNumber = 3;
    private string thumbnail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Thumbnail {
      get { return thumbnail_; }
      set {
        thumbnail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GroupID" field.</summary>
    public const int GroupIDFieldNumber = 5;
    private string groupID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupID {
      get { return groupID_; }
      set {
        groupID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaxQuality" field.</summary>
    public const int MaxQualityFieldNumber = 6;
    private global::com.tiledmedia.clearvr.cvrinterface.Quality maxQuality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.Quality MaxQuality {
      get { return maxQuality_; }
      set {
        maxQuality_ = value;
      }
    }

    /// <summary>Field number for the "Live" field.</summary>
    public const int LiveFieldNumber = 10;
    private bool live_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Live {
      get { return live_; }
      set {
        live_ = value;
      }
    }

    /// <summary>Field number for the "WallclockSynced" field.</summary>
    public const int WallclockSyncedFieldNumber = 11;
    private bool wallclockSynced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WallclockSynced {
      get { return wallclockSynced_; }
      set {
        wallclockSynced_ = value;
      }
    }

    /// <summary>Field number for the "Stereo" field.</summary>
    public const int StereoFieldNumber = 12;
    private bool stereo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Stereo {
      get { return stereo_; }
      set {
        stereo_ = value;
      }
    }

    /// <summary>Field number for the "Planar" field.</summary>
    public const int PlanarFieldNumber = 13;
    private bool planar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Planar {
      get { return planar_; }
      set {
        planar_ = value;
      }
    }

    /// <summary>Field number for the "LowLatency" field.</summary>
    public const int LowLatencyFieldNumber = 14;
    private bool lowLatency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LowLatency {
      get { return lowLatency_; }
      set {
        lowLatency_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 20;
    private long duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "DataAdded" field.</summary>
    public const int DataAddedFieldNumber = 21;
    private long dataAdded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DataAdded {
      get { return dataAdded_; }
      set {
        dataAdded_ = value;
      }
    }

    /// <summary>Field number for the "ContentType" field.</summary>
    public const int ContentTypeFieldNumber = 30;
    private global::com.tiledmedia.clearvr.cvrinterface.ContentType contentType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ContentType ContentType {
      get { return contentType_; }
      set {
        contentType_ = value;
      }
    }

    /// <summary>Field number for the "CertPath" field.</summary>
    public const int CertPathFieldNumber = 40;
    private string certPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CertPath {
      get { return certPath_; }
      set {
        certPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "KeyPath" field.</summary>
    public const int KeyPathFieldNumber = 41;
    private string keyPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyPath {
      get { return keyPath_; }
      set {
        keyPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CAChainPath" field.</summary>
    public const int CAChainPathFieldNumber = 42;
    private string cAChainPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CAChainPath {
      get { return cAChainPath_; }
      set {
        cAChainPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LayoutName" field.</summary>
    public const int LayoutNameFieldNumber = 50;
    private string layoutName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LayoutName {
      get { return layoutName_; }
      set {
        layoutName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UUID" field.</summary>
    public const int UUIDFieldNumber = 60;
    private string uUID_ = "";
    /// <summary>
    /// Generated by the Core
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UUID {
      get { return uUID_; }
      set {
        uUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "URL" field.</summary>
    public const int URLFieldNumber = 99;
    private string uRL_ = "";
    /// <summary>
    /// This field is deprecated and should no longer be used
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string URL {
      get { return uRL_; }
      set {
        uRL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SDKContentItem" field.</summary>
    public const int SDKContentItemFieldNumber = 100;
    private global::com.tiledmedia.clearvr.cvrinterface.ContentItem sDKContentItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ContentItem SDKContentItem {
      get { return sDKContentItem_; }
      set {
        sDKContentItem_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppContentItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppContentItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Author != other.Author) return false;
      if (Title != other.Title) return false;
      if (Thumbnail != other.Thumbnail) return false;
      if (Description != other.Description) return false;
      if (GroupID != other.GroupID) return false;
      if (!object.Equals(MaxQuality, other.MaxQuality)) return false;
      if (Live != other.Live) return false;
      if (WallclockSynced != other.WallclockSynced) return false;
      if (Stereo != other.Stereo) return false;
      if (Planar != other.Planar) return false;
      if (LowLatency != other.LowLatency) return false;
      if (Duration != other.Duration) return false;
      if (DataAdded != other.DataAdded) return false;
      if (ContentType != other.ContentType) return false;
      if (CertPath != other.CertPath) return false;
      if (KeyPath != other.KeyPath) return false;
      if (CAChainPath != other.CAChainPath) return false;
      if (LayoutName != other.LayoutName) return false;
      if (UUID != other.UUID) return false;
      if (URL != other.URL) return false;
      if (!object.Equals(SDKContentItem, other.SDKContentItem)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Author.Length != 0) hash ^= Author.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Thumbnail.Length != 0) hash ^= Thumbnail.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (GroupID.Length != 0) hash ^= GroupID.GetHashCode();
      if (maxQuality_ != null) hash ^= MaxQuality.GetHashCode();
      if (Live != false) hash ^= Live.GetHashCode();
      if (WallclockSynced != false) hash ^= WallclockSynced.GetHashCode();
      if (Stereo != false) hash ^= Stereo.GetHashCode();
      if (Planar != false) hash ^= Planar.GetHashCode();
      if (LowLatency != false) hash ^= LowLatency.GetHashCode();
      if (Duration != 0L) hash ^= Duration.GetHashCode();
      if (DataAdded != 0L) hash ^= DataAdded.GetHashCode();
      if (ContentType != 0) hash ^= ContentType.GetHashCode();
      if (CertPath.Length != 0) hash ^= CertPath.GetHashCode();
      if (KeyPath.Length != 0) hash ^= KeyPath.GetHashCode();
      if (CAChainPath.Length != 0) hash ^= CAChainPath.GetHashCode();
      if (LayoutName.Length != 0) hash ^= LayoutName.GetHashCode();
      if (UUID.Length != 0) hash ^= UUID.GetHashCode();
      if (URL.Length != 0) hash ^= URL.GetHashCode();
      if (sDKContentItem_ != null) hash ^= SDKContentItem.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Author.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Author);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Thumbnail.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Thumbnail);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (GroupID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GroupID);
      }
      if (maxQuality_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MaxQuality);
      }
      if (Live != false) {
        output.WriteRawTag(80);
        output.WriteBool(Live);
      }
      if (WallclockSynced != false) {
        output.WriteRawTag(88);
        output.WriteBool(WallclockSynced);
      }
      if (Stereo != false) {
        output.WriteRawTag(96);
        output.WriteBool(Stereo);
      }
      if (Planar != false) {
        output.WriteRawTag(104);
        output.WriteBool(Planar);
      }
      if (LowLatency != false) {
        output.WriteRawTag(112);
        output.WriteBool(LowLatency);
      }
      if (Duration != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(Duration);
      }
      if (DataAdded != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(DataAdded);
      }
      if (ContentType != 0) {
        output.WriteRawTag(240, 1);
        output.WriteEnum((int) ContentType);
      }
      if (CertPath.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(CertPath);
      }
      if (KeyPath.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(KeyPath);
      }
      if (CAChainPath.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(CAChainPath);
      }
      if (LayoutName.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(LayoutName);
      }
      if (UUID.Length != 0) {
        output.WriteRawTag(226, 3);
        output.WriteString(UUID);
      }
      if (URL.Length != 0) {
        output.WriteRawTag(154, 6);
        output.WriteString(URL);
      }
      if (sDKContentItem_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(SDKContentItem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Author.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Author);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Thumbnail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Thumbnail);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (GroupID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupID);
      }
      if (maxQuality_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxQuality);
      }
      if (Live != false) {
        size += 1 + 1;
      }
      if (WallclockSynced != false) {
        size += 1 + 1;
      }
      if (Stereo != false) {
        size += 1 + 1;
      }
      if (Planar != false) {
        size += 1 + 1;
      }
      if (LowLatency != false) {
        size += 1 + 1;
      }
      if (Duration != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Duration);
      }
      if (DataAdded != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DataAdded);
      }
      if (ContentType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ContentType);
      }
      if (CertPath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CertPath);
      }
      if (KeyPath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(KeyPath);
      }
      if (CAChainPath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CAChainPath);
      }
      if (LayoutName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LayoutName);
      }
      if (UUID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UUID);
      }
      if (URL.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(URL);
      }
      if (sDKContentItem_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SDKContentItem);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppContentItem other) {
      if (other == null) {
        return;
      }
      if (other.Author.Length != 0) {
        Author = other.Author;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Thumbnail.Length != 0) {
        Thumbnail = other.Thumbnail;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.GroupID.Length != 0) {
        GroupID = other.GroupID;
      }
      if (other.maxQuality_ != null) {
        if (maxQuality_ == null) {
          maxQuality_ = new global::com.tiledmedia.clearvr.cvrinterface.Quality();
        }
        MaxQuality.MergeFrom(other.MaxQuality);
      }
      if (other.Live != false) {
        Live = other.Live;
      }
      if (other.WallclockSynced != false) {
        WallclockSynced = other.WallclockSynced;
      }
      if (other.Stereo != false) {
        Stereo = other.Stereo;
      }
      if (other.Planar != false) {
        Planar = other.Planar;
      }
      if (other.LowLatency != false) {
        LowLatency = other.LowLatency;
      }
      if (other.Duration != 0L) {
        Duration = other.Duration;
      }
      if (other.DataAdded != 0L) {
        DataAdded = other.DataAdded;
      }
      if (other.ContentType != 0) {
        ContentType = other.ContentType;
      }
      if (other.CertPath.Length != 0) {
        CertPath = other.CertPath;
      }
      if (other.KeyPath.Length != 0) {
        KeyPath = other.KeyPath;
      }
      if (other.CAChainPath.Length != 0) {
        CAChainPath = other.CAChainPath;
      }
      if (other.LayoutName.Length != 0) {
        LayoutName = other.LayoutName;
      }
      if (other.UUID.Length != 0) {
        UUID = other.UUID;
      }
      if (other.URL.Length != 0) {
        URL = other.URL;
      }
      if (other.sDKContentItem_ != null) {
        if (sDKContentItem_ == null) {
          sDKContentItem_ = new global::com.tiledmedia.clearvr.cvrinterface.ContentItem();
        }
        SDKContentItem.MergeFrom(other.SDKContentItem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Author = input.ReadString();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Thumbnail = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            GroupID = input.ReadString();
            break;
          }
          case 50: {
            if (maxQuality_ == null) {
              maxQuality_ = new global::com.tiledmedia.clearvr.cvrinterface.Quality();
            }
            input.ReadMessage(maxQuality_);
            break;
          }
          case 80: {
            Live = input.ReadBool();
            break;
          }
          case 88: {
            WallclockSynced = input.ReadBool();
            break;
          }
          case 96: {
            Stereo = input.ReadBool();
            break;
          }
          case 104: {
            Planar = input.ReadBool();
            break;
          }
          case 112: {
            LowLatency = input.ReadBool();
            break;
          }
          case 160: {
            Duration = input.ReadInt64();
            break;
          }
          case 168: {
            DataAdded = input.ReadInt64();
            break;
          }
          case 240: {
            contentType_ = (global::com.tiledmedia.clearvr.cvrinterface.ContentType) input.ReadEnum();
            break;
          }
          case 322: {
            CertPath = input.ReadString();
            break;
          }
          case 330: {
            KeyPath = input.ReadString();
            break;
          }
          case 338: {
            CAChainPath = input.ReadString();
            break;
          }
          case 402: {
            LayoutName = input.ReadString();
            break;
          }
          case 482: {
            UUID = input.ReadString();
            break;
          }
          case 794: {
            URL = input.ReadString();
            break;
          }
          case 802: {
            if (sDKContentItem_ == null) {
              sDKContentItem_ = new global::com.tiledmedia.clearvr.cvrinterface.ContentItem();
            }
            input.ReadMessage(sDKContentItem_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Quality : pb::IMessage<Quality> {
    private static readonly pb::MessageParser<Quality> _parser = new pb::MessageParser<Quality>(() => new Quality());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Quality> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quality() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quality(Quality other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      framerate_ = other.framerate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quality Clone() {
      return new Quality(this);
    }

    /// <summary>Field number for the "Width" field.</summary>
    public const int WidthFieldNumber = 1;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "Height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "Framerate" field.</summary>
    public const int FramerateFieldNumber = 3;
    private double framerate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Framerate {
      get { return framerate_; }
      set {
        framerate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Quality);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Quality other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (Framerate != other.Framerate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Framerate != 0D) hash ^= Framerate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      if (Framerate != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Framerate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Framerate != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Quality other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Framerate != 0D) {
        Framerate = other.Framerate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Width = input.ReadInt32();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 25: {
            Framerate = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionRecordRequest : pb::IMessage<InteractionRecordRequest> {
    private static readonly pb::MessageParser<InteractionRecordRequest> _parser = new pb::MessageParser<InteractionRecordRequest>(() => new InteractionRecordRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionRecordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionRecordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionRecordRequest(InteractionRecordRequest other) : this() {
      interactionRecordType_ = other.interactionRecordType_;
      interactionTiming_ = other.interactionTiming_;
      InteractionCallCore = other.interactionCallCore_ != null ? other.InteractionCallCore.Clone() : null;
      InteractionSeek = other.interactionSeek_ != null ? other.InteractionSeek.Clone() : null;
      InteractionUnpause = other.interactionUnpause_ != null ? other.InteractionUnpause.Clone() : null;
      InteractionSwitchContent = other.interactionSwitchContent_ != null ? other.InteractionSwitchContent.Clone() : null;
      InteractionCreateClearVRCoreContext = other.interactionCreateClearVRCoreContext_ != null ? other.InteractionCreateClearVRCoreContext.Clone() : null;
      InteractionInitialize = other.interactionInitialize_ != null ? other.InteractionInitialize.Clone() : null;
      InteractionPopulateMediaInfo = other.interactionPopulateMediaInfo_ != null ? other.InteractionPopulateMediaInfo.Clone() : null;
      InteractionGetContentParameter = other.interactionGetContentParameter_ != null ? other.InteractionGetContentParameter.Clone() : null;
      InteractionSetContentParameter = other.interactionSetContentParameter_ != null ? other.InteractionSetContentParameter.Clone() : null;
      InteractionGetCAParameter = other.interactionGetCAParameter_ != null ? other.InteractionGetCAParameter.Clone() : null;
      InteractionSetCAParameter = other.interactionSetCAParameter_ != null ? other.InteractionSetCAParameter.Clone() : null;
      InteractionGetParameter = other.interactionGetParameter_ != null ? other.InteractionGetParameter.Clone() : null;
      InteractionGetArrayParameter = other.interactionGetArrayParameter_ != null ? other.InteractionGetArrayParameter.Clone() : null;
      InteractionSetParameter = other.interactionSetParameter_ != null ? other.InteractionSetParameter.Clone() : null;
      InteractionPrewarmCache = other.interactionPrewarmCache_ != null ? other.InteractionPrewarmCache.Clone() : null;
      InteractionTimingFunc = other.interactionTimingFunc_ != null ? other.InteractionTimingFunc.Clone() : null;
      InteractionSignalSDKEvent = other.interactionSignalSDKEvent_ != null ? other.InteractionSignalSDKEvent.Clone() : null;
      InteractionGenDecTestFrame = other.interactionGenDecTestFrame_ != null ? other.InteractionGenDecTestFrame.Clone() : null;
      InteractionLoadMFPersistence = other.interactionLoadMFPersistence_ != null ? other.InteractionLoadMFPersistence.Clone() : null;
      InteractionSaveMFPersistence = other.interactionSaveMFPersistence_ != null ? other.InteractionSaveMFPersistence.Clone() : null;
      InteractionCheckIsSupported = other.interactionCheckIsSupported_ != null ? other.InteractionCheckIsSupported.Clone() : null;
      InteractionSendSensorPose = other.interactionSendSensorPose_ != null ? other.InteractionSendSensorPose.Clone() : null;
      InteractionSendSensorData = other.interactionSendSensorData_ != null ? other.InteractionSendSensorData.Clone() : null;
      InteractionSendSensorDataPose = other.interactionSendSensorDataPose_ != null ? other.InteractionSendSensorDataPose.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionRecordRequest Clone() {
      return new InteractionRecordRequest(this);
    }

    /// <summary>Field number for the "InteractionRecordType" field.</summary>
    public const int InteractionRecordTypeFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionRecordType interactionRecordType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionRecordType InteractionRecordType {
      get { return interactionRecordType_; }
      set {
        interactionRecordType_ = value;
      }
    }

    /// <summary>Field number for the "InteractionTiming" field.</summary>
    public const int InteractionTimingFieldNumber = 2;
    private long interactionTiming_;
    /// <summary>
    /// Nanoseconds since unix epoch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long InteractionTiming {
      get { return interactionTiming_; }
      set {
        interactionTiming_ = value;
      }
    }

    /// <summary>Field number for the "InteractionCallCore" field.</summary>
    public const int InteractionCallCoreFieldNumber = 3;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionCallCore interactionCallCore_;
    /// <summary>
    /// interaction message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionCallCore InteractionCallCore {
      get { return interactionCallCore_; }
      set {
        interactionCallCore_ = value;
      }
    }

    /// <summary>Field number for the "InteractionSeek" field.</summary>
    public const int InteractionSeekFieldNumber = 4;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionSeek interactionSeek_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionSeek InteractionSeek {
      get { return interactionSeek_; }
      set {
        interactionSeek_ = value;
      }
    }

    /// <summary>Field number for the "InteractionUnpause" field.</summary>
    public const int InteractionUnpauseFieldNumber = 5;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionUnpause interactionUnpause_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionUnpause InteractionUnpause {
      get { return interactionUnpause_; }
      set {
        interactionUnpause_ = value;
      }
    }

    /// <summary>Field number for the "InteractionSwitchContent" field.</summary>
    public const int InteractionSwitchContentFieldNumber = 6;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionSwitchContent interactionSwitchContent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionSwitchContent InteractionSwitchContent {
      get { return interactionSwitchContent_; }
      set {
        interactionSwitchContent_ = value;
      }
    }

    /// <summary>Field number for the "InteractionCreateClearVRCoreContext" field.</summary>
    public const int InteractionCreateClearVRCoreContextFieldNumber = 7;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionCreateClearVRCoreContext interactionCreateClearVRCoreContext_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionCreateClearVRCoreContext InteractionCreateClearVRCoreContext {
      get { return interactionCreateClearVRCoreContext_; }
      set {
        interactionCreateClearVRCoreContext_ = value;
      }
    }

    /// <summary>Field number for the "InteractionInitialize" field.</summary>
    public const int InteractionInitializeFieldNumber = 8;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionInitialize interactionInitialize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionInitialize InteractionInitialize {
      get { return interactionInitialize_; }
      set {
        interactionInitialize_ = value;
      }
    }

    /// <summary>Field number for the "InteractionPopulateMediaInfo" field.</summary>
    public const int InteractionPopulateMediaInfoFieldNumber = 9;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionPopulateMediaInfo interactionPopulateMediaInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionPopulateMediaInfo InteractionPopulateMediaInfo {
      get { return interactionPopulateMediaInfo_; }
      set {
        interactionPopulateMediaInfo_ = value;
      }
    }

    /// <summary>Field number for the "InteractionGetContentParameter" field.</summary>
    public const int InteractionGetContentParameterFieldNumber = 10;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionGetContentParameter interactionGetContentParameter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionGetContentParameter InteractionGetContentParameter {
      get { return interactionGetContentParameter_; }
      set {
        interactionGetContentParameter_ = value;
      }
    }

    /// <summary>Field number for the "InteractionSetContentParameter" field.</summary>
    public const int InteractionSetContentParameterFieldNumber = 11;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionSetContentParameter interactionSetContentParameter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionSetContentParameter InteractionSetContentParameter {
      get { return interactionSetContentParameter_; }
      set {
        interactionSetContentParameter_ = value;
      }
    }

    /// <summary>Field number for the "InteractionGetCAParameter" field.</summary>
    public const int InteractionGetCAParameterFieldNumber = 12;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionGetCAParameter interactionGetCAParameter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionGetCAParameter InteractionGetCAParameter {
      get { return interactionGetCAParameter_; }
      set {
        interactionGetCAParameter_ = value;
      }
    }

    /// <summary>Field number for the "InteractionSetCAParameter" field.</summary>
    public const int InteractionSetCAParameterFieldNumber = 13;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionSetCAParameter interactionSetCAParameter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionSetCAParameter InteractionSetCAParameter {
      get { return interactionSetCAParameter_; }
      set {
        interactionSetCAParameter_ = value;
      }
    }

    /// <summary>Field number for the "InteractionGetParameter" field.</summary>
    public const int InteractionGetParameterFieldNumber = 14;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionGetParameter interactionGetParameter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionGetParameter InteractionGetParameter {
      get { return interactionGetParameter_; }
      set {
        interactionGetParameter_ = value;
      }
    }

    /// <summary>Field number for the "InteractionGetArrayParameter" field.</summary>
    public const int InteractionGetArrayParameterFieldNumber = 15;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionGetArrayParameter interactionGetArrayParameter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionGetArrayParameter InteractionGetArrayParameter {
      get { return interactionGetArrayParameter_; }
      set {
        interactionGetArrayParameter_ = value;
      }
    }

    /// <summary>Field number for the "InteractionSetParameter" field.</summary>
    public const int InteractionSetParameterFieldNumber = 16;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionSetParameter interactionSetParameter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionSetParameter InteractionSetParameter {
      get { return interactionSetParameter_; }
      set {
        interactionSetParameter_ = value;
      }
    }

    /// <summary>Field number for the "InteractionPrewarmCache" field.</summary>
    public const int InteractionPrewarmCacheFieldNumber = 17;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionPrewarmCache interactionPrewarmCache_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionPrewarmCache InteractionPrewarmCache {
      get { return interactionPrewarmCache_; }
      set {
        interactionPrewarmCache_ = value;
      }
    }

    /// <summary>Field number for the "InteractionTimingFunc" field.</summary>
    public const int InteractionTimingFuncFieldNumber = 18;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionTimingFunc interactionTimingFunc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionTimingFunc InteractionTimingFunc {
      get { return interactionTimingFunc_; }
      set {
        interactionTimingFunc_ = value;
      }
    }

    /// <summary>Field number for the "InteractionSignalSDKEvent" field.</summary>
    public const int InteractionSignalSDKEventFieldNumber = 19;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionSignalSDKEvent interactionSignalSDKEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionSignalSDKEvent InteractionSignalSDKEvent {
      get { return interactionSignalSDKEvent_; }
      set {
        interactionSignalSDKEvent_ = value;
      }
    }

    /// <summary>Field number for the "InteractionGenDecTestFrame" field.</summary>
    public const int InteractionGenDecTestFrameFieldNumber = 20;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionGenDecTestFrame interactionGenDecTestFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionGenDecTestFrame InteractionGenDecTestFrame {
      get { return interactionGenDecTestFrame_; }
      set {
        interactionGenDecTestFrame_ = value;
      }
    }

    /// <summary>Field number for the "InteractionLoadMFPersistence" field.</summary>
    public const int InteractionLoadMFPersistenceFieldNumber = 21;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionLoadMFPersistence interactionLoadMFPersistence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionLoadMFPersistence InteractionLoadMFPersistence {
      get { return interactionLoadMFPersistence_; }
      set {
        interactionLoadMFPersistence_ = value;
      }
    }

    /// <summary>Field number for the "InteractionSaveMFPersistence" field.</summary>
    public const int InteractionSaveMFPersistenceFieldNumber = 22;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionSaveMFPersistence interactionSaveMFPersistence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionSaveMFPersistence InteractionSaveMFPersistence {
      get { return interactionSaveMFPersistence_; }
      set {
        interactionSaveMFPersistence_ = value;
      }
    }

    /// <summary>Field number for the "InteractionCheckIsSupported" field.</summary>
    public const int InteractionCheckIsSupportedFieldNumber = 23;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionCheckIsSupported interactionCheckIsSupported_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionCheckIsSupported InteractionCheckIsSupported {
      get { return interactionCheckIsSupported_; }
      set {
        interactionCheckIsSupported_ = value;
      }
    }

    /// <summary>Field number for the "InteractionSendSensorPose" field.</summary>
    public const int InteractionSendSensorPoseFieldNumber = 24;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionSendSensorPose interactionSendSensorPose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionSendSensorPose InteractionSendSensorPose {
      get { return interactionSendSensorPose_; }
      set {
        interactionSendSensorPose_ = value;
      }
    }

    /// <summary>Field number for the "InteractionSendSensorData" field.</summary>
    public const int InteractionSendSensorDataFieldNumber = 25;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionSendSensorData interactionSendSensorData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionSendSensorData InteractionSendSensorData {
      get { return interactionSendSensorData_; }
      set {
        interactionSendSensorData_ = value;
      }
    }

    /// <summary>Field number for the "InteractionSendSensorDataPose" field.</summary>
    public const int InteractionSendSensorDataPoseFieldNumber = 26;
    private global::com.tiledmedia.clearvr.cvrinterface.InteractionSendSensorDataPose interactionSendSensorDataPose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InteractionSendSensorDataPose InteractionSendSensorDataPose {
      get { return interactionSendSensorDataPose_; }
      set {
        interactionSendSensorDataPose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionRecordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionRecordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InteractionRecordType != other.InteractionRecordType) return false;
      if (InteractionTiming != other.InteractionTiming) return false;
      if (!object.Equals(InteractionCallCore, other.InteractionCallCore)) return false;
      if (!object.Equals(InteractionSeek, other.InteractionSeek)) return false;
      if (!object.Equals(InteractionUnpause, other.InteractionUnpause)) return false;
      if (!object.Equals(InteractionSwitchContent, other.InteractionSwitchContent)) return false;
      if (!object.Equals(InteractionCreateClearVRCoreContext, other.InteractionCreateClearVRCoreContext)) return false;
      if (!object.Equals(InteractionInitialize, other.InteractionInitialize)) return false;
      if (!object.Equals(InteractionPopulateMediaInfo, other.InteractionPopulateMediaInfo)) return false;
      if (!object.Equals(InteractionGetContentParameter, other.InteractionGetContentParameter)) return false;
      if (!object.Equals(InteractionSetContentParameter, other.InteractionSetContentParameter)) return false;
      if (!object.Equals(InteractionGetCAParameter, other.InteractionGetCAParameter)) return false;
      if (!object.Equals(InteractionSetCAParameter, other.InteractionSetCAParameter)) return false;
      if (!object.Equals(InteractionGetParameter, other.InteractionGetParameter)) return false;
      if (!object.Equals(InteractionGetArrayParameter, other.InteractionGetArrayParameter)) return false;
      if (!object.Equals(InteractionSetParameter, other.InteractionSetParameter)) return false;
      if (!object.Equals(InteractionPrewarmCache, other.InteractionPrewarmCache)) return false;
      if (!object.Equals(InteractionTimingFunc, other.InteractionTimingFunc)) return false;
      if (!object.Equals(InteractionSignalSDKEvent, other.InteractionSignalSDKEvent)) return false;
      if (!object.Equals(InteractionGenDecTestFrame, other.InteractionGenDecTestFrame)) return false;
      if (!object.Equals(InteractionLoadMFPersistence, other.InteractionLoadMFPersistence)) return false;
      if (!object.Equals(InteractionSaveMFPersistence, other.InteractionSaveMFPersistence)) return false;
      if (!object.Equals(InteractionCheckIsSupported, other.InteractionCheckIsSupported)) return false;
      if (!object.Equals(InteractionSendSensorPose, other.InteractionSendSensorPose)) return false;
      if (!object.Equals(InteractionSendSensorData, other.InteractionSendSensorData)) return false;
      if (!object.Equals(InteractionSendSensorDataPose, other.InteractionSendSensorDataPose)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InteractionRecordType != 0) hash ^= InteractionRecordType.GetHashCode();
      if (InteractionTiming != 0L) hash ^= InteractionTiming.GetHashCode();
      if (interactionCallCore_ != null) hash ^= InteractionCallCore.GetHashCode();
      if (interactionSeek_ != null) hash ^= InteractionSeek.GetHashCode();
      if (interactionUnpause_ != null) hash ^= InteractionUnpause.GetHashCode();
      if (interactionSwitchContent_ != null) hash ^= InteractionSwitchContent.GetHashCode();
      if (interactionCreateClearVRCoreContext_ != null) hash ^= InteractionCreateClearVRCoreContext.GetHashCode();
      if (interactionInitialize_ != null) hash ^= InteractionInitialize.GetHashCode();
      if (interactionPopulateMediaInfo_ != null) hash ^= InteractionPopulateMediaInfo.GetHashCode();
      if (interactionGetContentParameter_ != null) hash ^= InteractionGetContentParameter.GetHashCode();
      if (interactionSetContentParameter_ != null) hash ^= InteractionSetContentParameter.GetHashCode();
      if (interactionGetCAParameter_ != null) hash ^= InteractionGetCAParameter.GetHashCode();
      if (interactionSetCAParameter_ != null) hash ^= InteractionSetCAParameter.GetHashCode();
      if (interactionGetParameter_ != null) hash ^= InteractionGetParameter.GetHashCode();
      if (interactionGetArrayParameter_ != null) hash ^= InteractionGetArrayParameter.GetHashCode();
      if (interactionSetParameter_ != null) hash ^= InteractionSetParameter.GetHashCode();
      if (interactionPrewarmCache_ != null) hash ^= InteractionPrewarmCache.GetHashCode();
      if (interactionTimingFunc_ != null) hash ^= InteractionTimingFunc.GetHashCode();
      if (interactionSignalSDKEvent_ != null) hash ^= InteractionSignalSDKEvent.GetHashCode();
      if (interactionGenDecTestFrame_ != null) hash ^= InteractionGenDecTestFrame.GetHashCode();
      if (interactionLoadMFPersistence_ != null) hash ^= InteractionLoadMFPersistence.GetHashCode();
      if (interactionSaveMFPersistence_ != null) hash ^= InteractionSaveMFPersistence.GetHashCode();
      if (interactionCheckIsSupported_ != null) hash ^= InteractionCheckIsSupported.GetHashCode();
      if (interactionSendSensorPose_ != null) hash ^= InteractionSendSensorPose.GetHashCode();
      if (interactionSendSensorData_ != null) hash ^= InteractionSendSensorData.GetHashCode();
      if (interactionSendSensorDataPose_ != null) hash ^= InteractionSendSensorDataPose.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InteractionRecordType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) InteractionRecordType);
      }
      if (InteractionTiming != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(InteractionTiming);
      }
      if (interactionCallCore_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InteractionCallCore);
      }
      if (interactionSeek_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(InteractionSeek);
      }
      if (interactionUnpause_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(InteractionUnpause);
      }
      if (interactionSwitchContent_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(InteractionSwitchContent);
      }
      if (interactionCreateClearVRCoreContext_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(InteractionCreateClearVRCoreContext);
      }
      if (interactionInitialize_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(InteractionInitialize);
      }
      if (interactionPopulateMediaInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(InteractionPopulateMediaInfo);
      }
      if (interactionGetContentParameter_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(InteractionGetContentParameter);
      }
      if (interactionSetContentParameter_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(InteractionSetContentParameter);
      }
      if (interactionGetCAParameter_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(InteractionGetCAParameter);
      }
      if (interactionSetCAParameter_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(InteractionSetCAParameter);
      }
      if (interactionGetParameter_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(InteractionGetParameter);
      }
      if (interactionGetArrayParameter_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(InteractionGetArrayParameter);
      }
      if (interactionSetParameter_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(InteractionSetParameter);
      }
      if (interactionPrewarmCache_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(InteractionPrewarmCache);
      }
      if (interactionTimingFunc_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(InteractionTimingFunc);
      }
      if (interactionSignalSDKEvent_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(InteractionSignalSDKEvent);
      }
      if (interactionGenDecTestFrame_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(InteractionGenDecTestFrame);
      }
      if (interactionLoadMFPersistence_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(InteractionLoadMFPersistence);
      }
      if (interactionSaveMFPersistence_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(InteractionSaveMFPersistence);
      }
      if (interactionCheckIsSupported_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(InteractionCheckIsSupported);
      }
      if (interactionSendSensorPose_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(InteractionSendSensorPose);
      }
      if (interactionSendSensorData_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(InteractionSendSensorData);
      }
      if (interactionSendSensorDataPose_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(InteractionSendSensorDataPose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InteractionRecordType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InteractionRecordType);
      }
      if (InteractionTiming != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InteractionTiming);
      }
      if (interactionCallCore_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InteractionCallCore);
      }
      if (interactionSeek_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InteractionSeek);
      }
      if (interactionUnpause_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InteractionUnpause);
      }
      if (interactionSwitchContent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InteractionSwitchContent);
      }
      if (interactionCreateClearVRCoreContext_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InteractionCreateClearVRCoreContext);
      }
      if (interactionInitialize_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InteractionInitialize);
      }
      if (interactionPopulateMediaInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InteractionPopulateMediaInfo);
      }
      if (interactionGetContentParameter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InteractionGetContentParameter);
      }
      if (interactionSetContentParameter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InteractionSetContentParameter);
      }
      if (interactionGetCAParameter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InteractionGetCAParameter);
      }
      if (interactionSetCAParameter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InteractionSetCAParameter);
      }
      if (interactionGetParameter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InteractionGetParameter);
      }
      if (interactionGetArrayParameter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InteractionGetArrayParameter);
      }
      if (interactionSetParameter_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InteractionSetParameter);
      }
      if (interactionPrewarmCache_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InteractionPrewarmCache);
      }
      if (interactionTimingFunc_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InteractionTimingFunc);
      }
      if (interactionSignalSDKEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InteractionSignalSDKEvent);
      }
      if (interactionGenDecTestFrame_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InteractionGenDecTestFrame);
      }
      if (interactionLoadMFPersistence_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InteractionLoadMFPersistence);
      }
      if (interactionSaveMFPersistence_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InteractionSaveMFPersistence);
      }
      if (interactionCheckIsSupported_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InteractionCheckIsSupported);
      }
      if (interactionSendSensorPose_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InteractionSendSensorPose);
      }
      if (interactionSendSensorData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InteractionSendSensorData);
      }
      if (interactionSendSensorDataPose_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InteractionSendSensorDataPose);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionRecordRequest other) {
      if (other == null) {
        return;
      }
      if (other.InteractionRecordType != 0) {
        InteractionRecordType = other.InteractionRecordType;
      }
      if (other.InteractionTiming != 0L) {
        InteractionTiming = other.InteractionTiming;
      }
      if (other.interactionCallCore_ != null) {
        if (interactionCallCore_ == null) {
          interactionCallCore_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionCallCore();
        }
        InteractionCallCore.MergeFrom(other.InteractionCallCore);
      }
      if (other.interactionSeek_ != null) {
        if (interactionSeek_ == null) {
          interactionSeek_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionSeek();
        }
        InteractionSeek.MergeFrom(other.InteractionSeek);
      }
      if (other.interactionUnpause_ != null) {
        if (interactionUnpause_ == null) {
          interactionUnpause_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionUnpause();
        }
        InteractionUnpause.MergeFrom(other.InteractionUnpause);
      }
      if (other.interactionSwitchContent_ != null) {
        if (interactionSwitchContent_ == null) {
          interactionSwitchContent_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionSwitchContent();
        }
        InteractionSwitchContent.MergeFrom(other.InteractionSwitchContent);
      }
      if (other.interactionCreateClearVRCoreContext_ != null) {
        if (interactionCreateClearVRCoreContext_ == null) {
          interactionCreateClearVRCoreContext_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionCreateClearVRCoreContext();
        }
        InteractionCreateClearVRCoreContext.MergeFrom(other.InteractionCreateClearVRCoreContext);
      }
      if (other.interactionInitialize_ != null) {
        if (interactionInitialize_ == null) {
          interactionInitialize_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionInitialize();
        }
        InteractionInitialize.MergeFrom(other.InteractionInitialize);
      }
      if (other.interactionPopulateMediaInfo_ != null) {
        if (interactionPopulateMediaInfo_ == null) {
          interactionPopulateMediaInfo_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionPopulateMediaInfo();
        }
        InteractionPopulateMediaInfo.MergeFrom(other.InteractionPopulateMediaInfo);
      }
      if (other.interactionGetContentParameter_ != null) {
        if (interactionGetContentParameter_ == null) {
          interactionGetContentParameter_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionGetContentParameter();
        }
        InteractionGetContentParameter.MergeFrom(other.InteractionGetContentParameter);
      }
      if (other.interactionSetContentParameter_ != null) {
        if (interactionSetContentParameter_ == null) {
          interactionSetContentParameter_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionSetContentParameter();
        }
        InteractionSetContentParameter.MergeFrom(other.InteractionSetContentParameter);
      }
      if (other.interactionGetCAParameter_ != null) {
        if (interactionGetCAParameter_ == null) {
          interactionGetCAParameter_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionGetCAParameter();
        }
        InteractionGetCAParameter.MergeFrom(other.InteractionGetCAParameter);
      }
      if (other.interactionSetCAParameter_ != null) {
        if (interactionSetCAParameter_ == null) {
          interactionSetCAParameter_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionSetCAParameter();
        }
        InteractionSetCAParameter.MergeFrom(other.InteractionSetCAParameter);
      }
      if (other.interactionGetParameter_ != null) {
        if (interactionGetParameter_ == null) {
          interactionGetParameter_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionGetParameter();
        }
        InteractionGetParameter.MergeFrom(other.InteractionGetParameter);
      }
      if (other.interactionGetArrayParameter_ != null) {
        if (interactionGetArrayParameter_ == null) {
          interactionGetArrayParameter_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionGetArrayParameter();
        }
        InteractionGetArrayParameter.MergeFrom(other.InteractionGetArrayParameter);
      }
      if (other.interactionSetParameter_ != null) {
        if (interactionSetParameter_ == null) {
          interactionSetParameter_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionSetParameter();
        }
        InteractionSetParameter.MergeFrom(other.InteractionSetParameter);
      }
      if (other.interactionPrewarmCache_ != null) {
        if (interactionPrewarmCache_ == null) {
          interactionPrewarmCache_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionPrewarmCache();
        }
        InteractionPrewarmCache.MergeFrom(other.InteractionPrewarmCache);
      }
      if (other.interactionTimingFunc_ != null) {
        if (interactionTimingFunc_ == null) {
          interactionTimingFunc_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionTimingFunc();
        }
        InteractionTimingFunc.MergeFrom(other.InteractionTimingFunc);
      }
      if (other.interactionSignalSDKEvent_ != null) {
        if (interactionSignalSDKEvent_ == null) {
          interactionSignalSDKEvent_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionSignalSDKEvent();
        }
        InteractionSignalSDKEvent.MergeFrom(other.InteractionSignalSDKEvent);
      }
      if (other.interactionGenDecTestFrame_ != null) {
        if (interactionGenDecTestFrame_ == null) {
          interactionGenDecTestFrame_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionGenDecTestFrame();
        }
        InteractionGenDecTestFrame.MergeFrom(other.InteractionGenDecTestFrame);
      }
      if (other.interactionLoadMFPersistence_ != null) {
        if (interactionLoadMFPersistence_ == null) {
          interactionLoadMFPersistence_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionLoadMFPersistence();
        }
        InteractionLoadMFPersistence.MergeFrom(other.InteractionLoadMFPersistence);
      }
      if (other.interactionSaveMFPersistence_ != null) {
        if (interactionSaveMFPersistence_ == null) {
          interactionSaveMFPersistence_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionSaveMFPersistence();
        }
        InteractionSaveMFPersistence.MergeFrom(other.InteractionSaveMFPersistence);
      }
      if (other.interactionCheckIsSupported_ != null) {
        if (interactionCheckIsSupported_ == null) {
          interactionCheckIsSupported_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionCheckIsSupported();
        }
        InteractionCheckIsSupported.MergeFrom(other.InteractionCheckIsSupported);
      }
      if (other.interactionSendSensorPose_ != null) {
        if (interactionSendSensorPose_ == null) {
          interactionSendSensorPose_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionSendSensorPose();
        }
        InteractionSendSensorPose.MergeFrom(other.InteractionSendSensorPose);
      }
      if (other.interactionSendSensorData_ != null) {
        if (interactionSendSensorData_ == null) {
          interactionSendSensorData_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionSendSensorData();
        }
        InteractionSendSensorData.MergeFrom(other.InteractionSendSensorData);
      }
      if (other.interactionSendSensorDataPose_ != null) {
        if (interactionSendSensorDataPose_ == null) {
          interactionSendSensorDataPose_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionSendSensorDataPose();
        }
        InteractionSendSensorDataPose.MergeFrom(other.InteractionSendSensorDataPose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            interactionRecordType_ = (global::com.tiledmedia.clearvr.cvrinterface.InteractionRecordType) input.ReadEnum();
            break;
          }
          case 16: {
            InteractionTiming = input.ReadInt64();
            break;
          }
          case 26: {
            if (interactionCallCore_ == null) {
              interactionCallCore_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionCallCore();
            }
            input.ReadMessage(interactionCallCore_);
            break;
          }
          case 34: {
            if (interactionSeek_ == null) {
              interactionSeek_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionSeek();
            }
            input.ReadMessage(interactionSeek_);
            break;
          }
          case 42: {
            if (interactionUnpause_ == null) {
              interactionUnpause_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionUnpause();
            }
            input.ReadMessage(interactionUnpause_);
            break;
          }
          case 50: {
            if (interactionSwitchContent_ == null) {
              interactionSwitchContent_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionSwitchContent();
            }
            input.ReadMessage(interactionSwitchContent_);
            break;
          }
          case 58: {
            if (interactionCreateClearVRCoreContext_ == null) {
              interactionCreateClearVRCoreContext_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionCreateClearVRCoreContext();
            }
            input.ReadMessage(interactionCreateClearVRCoreContext_);
            break;
          }
          case 66: {
            if (interactionInitialize_ == null) {
              interactionInitialize_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionInitialize();
            }
            input.ReadMessage(interactionInitialize_);
            break;
          }
          case 74: {
            if (interactionPopulateMediaInfo_ == null) {
              interactionPopulateMediaInfo_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionPopulateMediaInfo();
            }
            input.ReadMessage(interactionPopulateMediaInfo_);
            break;
          }
          case 82: {
            if (interactionGetContentParameter_ == null) {
              interactionGetContentParameter_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionGetContentParameter();
            }
            input.ReadMessage(interactionGetContentParameter_);
            break;
          }
          case 90: {
            if (interactionSetContentParameter_ == null) {
              interactionSetContentParameter_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionSetContentParameter();
            }
            input.ReadMessage(interactionSetContentParameter_);
            break;
          }
          case 98: {
            if (interactionGetCAParameter_ == null) {
              interactionGetCAParameter_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionGetCAParameter();
            }
            input.ReadMessage(interactionGetCAParameter_);
            break;
          }
          case 106: {
            if (interactionSetCAParameter_ == null) {
              interactionSetCAParameter_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionSetCAParameter();
            }
            input.ReadMessage(interactionSetCAParameter_);
            break;
          }
          case 114: {
            if (interactionGetParameter_ == null) {
              interactionGetParameter_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionGetParameter();
            }
            input.ReadMessage(interactionGetParameter_);
            break;
          }
          case 122: {
            if (interactionGetArrayParameter_ == null) {
              interactionGetArrayParameter_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionGetArrayParameter();
            }
            input.ReadMessage(interactionGetArrayParameter_);
            break;
          }
          case 130: {
            if (interactionSetParameter_ == null) {
              interactionSetParameter_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionSetParameter();
            }
            input.ReadMessage(interactionSetParameter_);
            break;
          }
          case 138: {
            if (interactionPrewarmCache_ == null) {
              interactionPrewarmCache_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionPrewarmCache();
            }
            input.ReadMessage(interactionPrewarmCache_);
            break;
          }
          case 146: {
            if (interactionTimingFunc_ == null) {
              interactionTimingFunc_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionTimingFunc();
            }
            input.ReadMessage(interactionTimingFunc_);
            break;
          }
          case 154: {
            if (interactionSignalSDKEvent_ == null) {
              interactionSignalSDKEvent_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionSignalSDKEvent();
            }
            input.ReadMessage(interactionSignalSDKEvent_);
            break;
          }
          case 162: {
            if (interactionGenDecTestFrame_ == null) {
              interactionGenDecTestFrame_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionGenDecTestFrame();
            }
            input.ReadMessage(interactionGenDecTestFrame_);
            break;
          }
          case 170: {
            if (interactionLoadMFPersistence_ == null) {
              interactionLoadMFPersistence_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionLoadMFPersistence();
            }
            input.ReadMessage(interactionLoadMFPersistence_);
            break;
          }
          case 178: {
            if (interactionSaveMFPersistence_ == null) {
              interactionSaveMFPersistence_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionSaveMFPersistence();
            }
            input.ReadMessage(interactionSaveMFPersistence_);
            break;
          }
          case 186: {
            if (interactionCheckIsSupported_ == null) {
              interactionCheckIsSupported_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionCheckIsSupported();
            }
            input.ReadMessage(interactionCheckIsSupported_);
            break;
          }
          case 194: {
            if (interactionSendSensorPose_ == null) {
              interactionSendSensorPose_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionSendSensorPose();
            }
            input.ReadMessage(interactionSendSensorPose_);
            break;
          }
          case 202: {
            if (interactionSendSensorData_ == null) {
              interactionSendSensorData_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionSendSensorData();
            }
            input.ReadMessage(interactionSendSensorData_);
            break;
          }
          case 210: {
            if (interactionSendSensorDataPose_ == null) {
              interactionSendSensorDataPose_ = new global::com.tiledmedia.clearvr.cvrinterface.InteractionSendSensorDataPose();
            }
            input.ReadMessage(interactionSendSensorDataPose_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionCallCore : pb::IMessage<InteractionCallCore> {
    private static readonly pb::MessageParser<InteractionCallCore> _parser = new pb::MessageParser<InteractionCallCore>(() => new InteractionCallCore());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionCallCore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionCallCore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionCallCore(InteractionCallCore other) : this() {
      CallCoreRequest = other.callCoreRequest_ != null ? other.CallCoreRequest.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionCallCore Clone() {
      return new InteractionCallCore(this);
    }

    /// <summary>Field number for the "CallCoreRequest" field.</summary>
    public const int CallCoreRequestFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.CallCoreRequest callCoreRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.CallCoreRequest CallCoreRequest {
      get { return callCoreRequest_; }
      set {
        callCoreRequest_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionCallCore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionCallCore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CallCoreRequest, other.CallCoreRequest)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (callCoreRequest_ != null) hash ^= CallCoreRequest.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (callCoreRequest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CallCoreRequest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (callCoreRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CallCoreRequest);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionCallCore other) {
      if (other == null) {
        return;
      }
      if (other.callCoreRequest_ != null) {
        if (callCoreRequest_ == null) {
          callCoreRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.CallCoreRequest();
        }
        CallCoreRequest.MergeFrom(other.CallCoreRequest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (callCoreRequest_ == null) {
              callCoreRequest_ = new global::com.tiledmedia.clearvr.cvrinterface.CallCoreRequest();
            }
            input.ReadMessage(callCoreRequest_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionSeek : pb::IMessage<InteractionSeek> {
    private static readonly pb::MessageParser<InteractionSeek> _parser = new pb::MessageParser<InteractionSeek>(() => new InteractionSeek());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionSeek> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSeek() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSeek(InteractionSeek other) : this() {
      TimingParams = other.timingParams_ != null ? other.TimingParams.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSeek Clone() {
      return new InteractionSeek(this);
    }

    /// <summary>Field number for the "TimingParams" field.</summary>
    public const int TimingParamsFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.TimingParams timingParams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.TimingParams TimingParams {
      get { return timingParams_; }
      set {
        timingParams_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionSeek);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionSeek other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TimingParams, other.TimingParams)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timingParams_ != null) hash ^= TimingParams.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timingParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TimingParams);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timingParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimingParams);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionSeek other) {
      if (other == null) {
        return;
      }
      if (other.timingParams_ != null) {
        if (timingParams_ == null) {
          timingParams_ = new global::com.tiledmedia.clearvr.cvrinterface.TimingParams();
        }
        TimingParams.MergeFrom(other.TimingParams);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (timingParams_ == null) {
              timingParams_ = new global::com.tiledmedia.clearvr.cvrinterface.TimingParams();
            }
            input.ReadMessage(timingParams_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionSwitchContent : pb::IMessage<InteractionSwitchContent> {
    private static readonly pb::MessageParser<InteractionSwitchContent> _parser = new pb::MessageParser<InteractionSwitchContent>(() => new InteractionSwitchContent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionSwitchContent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSwitchContent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSwitchContent(InteractionSwitchContent other) : this() {
      SwitchContentParams = other.switchContentParams_ != null ? other.SwitchContentParams.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSwitchContent Clone() {
      return new InteractionSwitchContent(this);
    }

    /// <summary>Field number for the "SwitchContentParams" field.</summary>
    public const int SwitchContentParamsFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.SwitchContentParams switchContentParams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.SwitchContentParams SwitchContentParams {
      get { return switchContentParams_; }
      set {
        switchContentParams_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionSwitchContent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionSwitchContent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SwitchContentParams, other.SwitchContentParams)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (switchContentParams_ != null) hash ^= SwitchContentParams.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (switchContentParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SwitchContentParams);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (switchContentParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwitchContentParams);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionSwitchContent other) {
      if (other == null) {
        return;
      }
      if (other.switchContentParams_ != null) {
        if (switchContentParams_ == null) {
          switchContentParams_ = new global::com.tiledmedia.clearvr.cvrinterface.SwitchContentParams();
        }
        SwitchContentParams.MergeFrom(other.SwitchContentParams);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (switchContentParams_ == null) {
              switchContentParams_ = new global::com.tiledmedia.clearvr.cvrinterface.SwitchContentParams();
            }
            input.ReadMessage(switchContentParams_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionCreateClearVRCoreContext : pb::IMessage<InteractionCreateClearVRCoreContext> {
    private static readonly pb::MessageParser<InteractionCreateClearVRCoreContext> _parser = new pb::MessageParser<InteractionCreateClearVRCoreContext>(() => new InteractionCreateClearVRCoreContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionCreateClearVRCoreContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionCreateClearVRCoreContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionCreateClearVRCoreContext(InteractionCreateClearVRCoreContext other) : this() {
      CreateContextParams = other.createContextParams_ != null ? other.CreateContextParams.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionCreateClearVRCoreContext Clone() {
      return new InteractionCreateClearVRCoreContext(this);
    }

    /// <summary>Field number for the "CreateContextParams" field.</summary>
    public const int CreateContextParamsFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.CreateContextParams createContextParams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.CreateContextParams CreateContextParams {
      get { return createContextParams_; }
      set {
        createContextParams_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionCreateClearVRCoreContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionCreateClearVRCoreContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreateContextParams, other.CreateContextParams)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (createContextParams_ != null) hash ^= CreateContextParams.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (createContextParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CreateContextParams);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (createContextParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateContextParams);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionCreateClearVRCoreContext other) {
      if (other == null) {
        return;
      }
      if (other.createContextParams_ != null) {
        if (createContextParams_ == null) {
          createContextParams_ = new global::com.tiledmedia.clearvr.cvrinterface.CreateContextParams();
        }
        CreateContextParams.MergeFrom(other.CreateContextParams);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (createContextParams_ == null) {
              createContextParams_ = new global::com.tiledmedia.clearvr.cvrinterface.CreateContextParams();
            }
            input.ReadMessage(createContextParams_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionInitialize : pb::IMessage<InteractionInitialize> {
    private static readonly pb::MessageParser<InteractionInitialize> _parser = new pb::MessageParser<InteractionInitialize>(() => new InteractionInitialize());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionInitialize> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionInitialize() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionInitialize(InteractionInitialize other) : this() {
      InitializeParams = other.initializeParams_ != null ? other.InitializeParams.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionInitialize Clone() {
      return new InteractionInitialize(this);
    }

    /// <summary>Field number for the "InitializeParams" field.</summary>
    public const int InitializeParamsFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.InitializeParams initializeParams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.InitializeParams InitializeParams {
      get { return initializeParams_; }
      set {
        initializeParams_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionInitialize);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionInitialize other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InitializeParams, other.InitializeParams)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (initializeParams_ != null) hash ^= InitializeParams.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (initializeParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InitializeParams);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (initializeParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitializeParams);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionInitialize other) {
      if (other == null) {
        return;
      }
      if (other.initializeParams_ != null) {
        if (initializeParams_ == null) {
          initializeParams_ = new global::com.tiledmedia.clearvr.cvrinterface.InitializeParams();
        }
        InitializeParams.MergeFrom(other.InitializeParams);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (initializeParams_ == null) {
              initializeParams_ = new global::com.tiledmedia.clearvr.cvrinterface.InitializeParams();
            }
            input.ReadMessage(initializeParams_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionPopulateMediaInfo : pb::IMessage<InteractionPopulateMediaInfo> {
    private static readonly pb::MessageParser<InteractionPopulateMediaInfo> _parser = new pb::MessageParser<InteractionPopulateMediaInfo>(() => new InteractionPopulateMediaInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionPopulateMediaInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionPopulateMediaInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionPopulateMediaInfo(InteractionPopulateMediaInfo other) : this() {
      PopulateMediaInfoParams = other.populateMediaInfoParams_ != null ? other.PopulateMediaInfoParams.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionPopulateMediaInfo Clone() {
      return new InteractionPopulateMediaInfo(this);
    }

    /// <summary>Field number for the "PopulateMediaInfoParams" field.</summary>
    public const int PopulateMediaInfoParamsFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.PopulateMediaInfoParams populateMediaInfoParams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.PopulateMediaInfoParams PopulateMediaInfoParams {
      get { return populateMediaInfoParams_; }
      set {
        populateMediaInfoParams_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionPopulateMediaInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionPopulateMediaInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PopulateMediaInfoParams, other.PopulateMediaInfoParams)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (populateMediaInfoParams_ != null) hash ^= PopulateMediaInfoParams.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (populateMediaInfoParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PopulateMediaInfoParams);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (populateMediaInfoParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PopulateMediaInfoParams);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionPopulateMediaInfo other) {
      if (other == null) {
        return;
      }
      if (other.populateMediaInfoParams_ != null) {
        if (populateMediaInfoParams_ == null) {
          populateMediaInfoParams_ = new global::com.tiledmedia.clearvr.cvrinterface.PopulateMediaInfoParams();
        }
        PopulateMediaInfoParams.MergeFrom(other.PopulateMediaInfoParams);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (populateMediaInfoParams_ == null) {
              populateMediaInfoParams_ = new global::com.tiledmedia.clearvr.cvrinterface.PopulateMediaInfoParams();
            }
            input.ReadMessage(populateMediaInfoParams_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionUnpause : pb::IMessage<InteractionUnpause> {
    private static readonly pb::MessageParser<InteractionUnpause> _parser = new pb::MessageParser<InteractionUnpause>(() => new InteractionUnpause());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionUnpause> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionUnpause() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionUnpause(InteractionUnpause other) : this() {
      TimingParams = other.timingParams_ != null ? other.TimingParams.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionUnpause Clone() {
      return new InteractionUnpause(this);
    }

    /// <summary>Field number for the "TimingParams" field.</summary>
    public const int TimingParamsFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.TimingParams timingParams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.TimingParams TimingParams {
      get { return timingParams_; }
      set {
        timingParams_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionUnpause);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionUnpause other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TimingParams, other.TimingParams)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timingParams_ != null) hash ^= TimingParams.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timingParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TimingParams);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timingParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimingParams);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionUnpause other) {
      if (other == null) {
        return;
      }
      if (other.timingParams_ != null) {
        if (timingParams_ == null) {
          timingParams_ = new global::com.tiledmedia.clearvr.cvrinterface.TimingParams();
        }
        TimingParams.MergeFrom(other.TimingParams);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (timingParams_ == null) {
              timingParams_ = new global::com.tiledmedia.clearvr.cvrinterface.TimingParams();
            }
            input.ReadMessage(timingParams_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionGetContentParameter : pb::IMessage<InteractionGetContentParameter> {
    private static readonly pb::MessageParser<InteractionGetContentParameter> _parser = new pb::MessageParser<InteractionGetContentParameter>(() => new InteractionGetContentParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionGetContentParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionGetContentParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionGetContentParameter(InteractionGetContentParameter other) : this() {
      key_ = other.key_;
      contentUUID_ = other.contentUUID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionGetContentParameter Clone() {
      return new InteractionGetContentParameter(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contentUUID" field.</summary>
    public const int ContentUUIDFieldNumber = 2;
    private int contentUUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContentUUID {
      get { return contentUUID_; }
      set {
        contentUUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionGetContentParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionGetContentParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (ContentUUID != other.ContentUUID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (ContentUUID != 0) hash ^= ContentUUID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (ContentUUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ContentUUID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (ContentUUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContentUUID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionGetContentParameter other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.ContentUUID != 0) {
        ContentUUID = other.ContentUUID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            ContentUUID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionSetContentParameter : pb::IMessage<InteractionSetContentParameter> {
    private static readonly pb::MessageParser<InteractionSetContentParameter> _parser = new pb::MessageParser<InteractionSetContentParameter>(() => new InteractionSetContentParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionSetContentParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSetContentParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSetContentParameter(InteractionSetContentParameter other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      contentUUID_ = other.contentUUID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSetContentParameter Clone() {
      return new InteractionSetContentParameter(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contentUUID" field.</summary>
    public const int ContentUUIDFieldNumber = 3;
    private int contentUUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContentUUID {
      get { return contentUUID_; }
      set {
        contentUUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionSetContentParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionSetContentParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      if (ContentUUID != other.ContentUUID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (ContentUUID != 0) hash ^= ContentUUID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (ContentUUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ContentUUID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (ContentUUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContentUUID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionSetContentParameter other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.ContentUUID != 0) {
        ContentUUID = other.ContentUUID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 24: {
            ContentUUID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionGetCAParameter : pb::IMessage<InteractionGetCAParameter> {
    private static readonly pb::MessageParser<InteractionGetCAParameter> _parser = new pb::MessageParser<InteractionGetCAParameter>(() => new InteractionGetCAParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionGetCAParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionGetCAParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionGetCAParameter(InteractionGetCAParameter other) : this() {
      key_ = other.key_;
      contentUUID_ = other.contentUUID_;
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionGetCAParameter Clone() {
      return new InteractionGetCAParameter(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contentUUID" field.</summary>
    public const int ContentUUIDFieldNumber = 2;
    private int contentUUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContentUUID {
      get { return contentUUID_; }
      set {
        contentUUID_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionGetCAParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionGetCAParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (ContentUUID != other.ContentUUID) return false;
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (ContentUUID != 0) hash ^= ContentUUID.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (ContentUUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ContentUUID);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (ContentUUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContentUUID);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionGetCAParameter other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.ContentUUID != 0) {
        ContentUUID = other.ContentUUID;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            ContentUUID = input.ReadInt32();
            break;
          }
          case 24: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionSetCAParameter : pb::IMessage<InteractionSetCAParameter> {
    private static readonly pb::MessageParser<InteractionSetCAParameter> _parser = new pb::MessageParser<InteractionSetCAParameter>(() => new InteractionSetCAParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionSetCAParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSetCAParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSetCAParameter(InteractionSetCAParameter other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      contentUUID_ = other.contentUUID_;
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSetCAParameter Clone() {
      return new InteractionSetCAParameter(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contentUUID" field.</summary>
    public const int ContentUUIDFieldNumber = 3;
    private int contentUUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContentUUID {
      get { return contentUUID_; }
      set {
        contentUUID_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 4;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionSetCAParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionSetCAParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      if (ContentUUID != other.ContentUUID) return false;
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (ContentUUID != 0) hash ^= ContentUUID.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (ContentUUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ContentUUID);
      }
      if (Index != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (ContentUUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContentUUID);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionSetCAParameter other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.ContentUUID != 0) {
        ContentUUID = other.ContentUUID;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 24: {
            ContentUUID = input.ReadInt32();
            break;
          }
          case 32: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionGetParameter : pb::IMessage<InteractionGetParameter> {
    private static readonly pb::MessageParser<InteractionGetParameter> _parser = new pb::MessageParser<InteractionGetParameter>(() => new InteractionGetParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionGetParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionGetParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionGetParameter(InteractionGetParameter other) : this() {
      key_ = other.key_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionGetParameter Clone() {
      return new InteractionGetParameter(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionGetParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionGetParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionGetParameter other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionGetArrayParameter : pb::IMessage<InteractionGetArrayParameter> {
    private static readonly pb::MessageParser<InteractionGetArrayParameter> _parser = new pb::MessageParser<InteractionGetArrayParameter>(() => new InteractionGetArrayParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionGetArrayParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionGetArrayParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionGetArrayParameter(InteractionGetArrayParameter other) : this() {
      key_ = other.key_;
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionGetArrayParameter Clone() {
      return new InteractionGetArrayParameter(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionGetArrayParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionGetArrayParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionGetArrayParameter other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionSetParameter : pb::IMessage<InteractionSetParameter> {
    private static readonly pb::MessageParser<InteractionSetParameter> _parser = new pb::MessageParser<InteractionSetParameter>(() => new InteractionSetParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionSetParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSetParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSetParameter(InteractionSetParameter other) : this() {
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSetParameter Clone() {
      return new InteractionSetParameter(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionSetParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionSetParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionSetParameter other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionPrewarmCache : pb::IMessage<InteractionPrewarmCache> {
    private static readonly pb::MessageParser<InteractionPrewarmCache> _parser = new pb::MessageParser<InteractionPrewarmCache>(() => new InteractionPrewarmCache());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionPrewarmCache> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionPrewarmCache() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionPrewarmCache(InteractionPrewarmCache other) : this() {
      url_ = other.url_;
      startPosition_ = other.startPosition_;
      flags_ = other.flags_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionPrewarmCache Clone() {
      return new InteractionPrewarmCache(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startPosition" field.</summary>
    public const int StartPositionFieldNumber = 2;
    private long startPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartPosition {
      get { return startPosition_; }
      set {
        startPosition_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 3;
    private long flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionPrewarmCache);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionPrewarmCache other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      if (StartPosition != other.StartPosition) return false;
      if (Flags != other.Flags) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (StartPosition != 0L) hash ^= StartPosition.GetHashCode();
      if (Flags != 0L) hash ^= Flags.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      if (StartPosition != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartPosition);
      }
      if (Flags != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Flags);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (StartPosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartPosition);
      }
      if (Flags != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Flags);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionPrewarmCache other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.StartPosition != 0L) {
        StartPosition = other.StartPosition;
      }
      if (other.Flags != 0L) {
        Flags = other.Flags;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
          case 16: {
            StartPosition = input.ReadInt64();
            break;
          }
          case 24: {
            Flags = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionTimingFunc : pb::IMessage<InteractionTimingFunc> {
    private static readonly pb::MessageParser<InteractionTimingFunc> _parser = new pb::MessageParser<InteractionTimingFunc>(() => new InteractionTimingFunc());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionTimingFunc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionTimingFunc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionTimingFunc(InteractionTimingFunc other) : this() {
      timingType_ = other.timingType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionTimingFunc Clone() {
      return new InteractionTimingFunc(this);
    }

    /// <summary>Field number for the "timingType" field.</summary>
    public const int TimingTypeFieldNumber = 1;
    private int timingType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimingType {
      get { return timingType_; }
      set {
        timingType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionTimingFunc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionTimingFunc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimingType != other.TimingType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimingType != 0) hash ^= TimingType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimingType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TimingType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimingType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionTimingFunc other) {
      if (other == null) {
        return;
      }
      if (other.TimingType != 0) {
        TimingType = other.TimingType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimingType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionSignalSDKEvent : pb::IMessage<InteractionSignalSDKEvent> {
    private static readonly pb::MessageParser<InteractionSignalSDKEvent> _parser = new pb::MessageParser<InteractionSignalSDKEvent>(() => new InteractionSignalSDKEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionSignalSDKEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSignalSDKEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSignalSDKEvent(InteractionSignalSDKEvent other) : this() {
      messageCodeAsString_ = other.messageCodeAsString_;
      eventType_ = other.eventType_;
      payload_ = other.payload_;
      messageCode_ = other.messageCode_;
      severity_ = other.severity_;
      component_ = other.component_;
      sDKType_ = other.sDKType_;
      DeviceInfo = other.deviceInfo_ != null ? other.DeviceInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSignalSDKEvent Clone() {
      return new InteractionSignalSDKEvent(this);
    }

    /// <summary>Field number for the "MessageCodeAsString" field.</summary>
    public const int MessageCodeAsStringFieldNumber = 6;
    private string messageCodeAsString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageCodeAsString {
      get { return messageCodeAsString_; }
      set {
        messageCodeAsString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private string eventType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventType {
      get { return eventType_; }
      set {
        eventType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private string payload_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MessageCode" field.</summary>
    public const int MessageCodeFieldNumber = 7;
    private int messageCode_;
    /// <summary>
    /// string SDKElementID = 3; // Removed in PR#6286
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MessageCode {
      get { return messageCode_; }
      set {
        messageCode_ = value;
      }
    }

    /// <summary>Field number for the "Severity" field.</summary>
    public const int SeverityFieldNumber = 5;
    private int severity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Severity {
      get { return severity_; }
      set {
        severity_ = value;
      }
    }

    /// <summary>Field number for the "Component" field.</summary>
    public const int ComponentFieldNumber = 8;
    private global::com.tiledmedia.clearvr.cvrinterface.LogComponent component_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.LogComponent Component {
      get { return component_; }
      set {
        component_ = value;
      }
    }

    /// <summary>Field number for the "SDKType" field.</summary>
    public const int SDKTypeFieldNumber = 9;
    private global::com.tiledmedia.clearvr.cvrinterface.SDKType sDKType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.SDKType SDKType {
      get { return sDKType_; }
      set {
        sDKType_ = value;
      }
    }

    /// <summary>Field number for the "DeviceInfo" field.</summary>
    public const int DeviceInfoFieldNumber = 4;
    private global::com.tiledmedia.clearvr.cvrinterface.DeviceInfo deviceInfo_;
    /// <summary>
    /// Potentially backward incompatible, may break event recoder
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.DeviceInfo DeviceInfo {
      get { return deviceInfo_; }
      set {
        deviceInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionSignalSDKEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionSignalSDKEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageCodeAsString != other.MessageCodeAsString) return false;
      if (EventType != other.EventType) return false;
      if (Payload != other.Payload) return false;
      if (MessageCode != other.MessageCode) return false;
      if (Severity != other.Severity) return false;
      if (Component != other.Component) return false;
      if (SDKType != other.SDKType) return false;
      if (!object.Equals(DeviceInfo, other.DeviceInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageCodeAsString.Length != 0) hash ^= MessageCodeAsString.GetHashCode();
      if (EventType.Length != 0) hash ^= EventType.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (MessageCode != 0) hash ^= MessageCode.GetHashCode();
      if (Severity != 0) hash ^= Severity.GetHashCode();
      if (Component != 0) hash ^= Component.GetHashCode();
      if (SDKType != 0) hash ^= SDKType.GetHashCode();
      if (deviceInfo_ != null) hash ^= DeviceInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventType);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Payload);
      }
      if (deviceInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DeviceInfo);
      }
      if (Severity != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Severity);
      }
      if (MessageCodeAsString.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MessageCodeAsString);
      }
      if (MessageCode != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MessageCode);
      }
      if (Component != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Component);
      }
      if (SDKType != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) SDKType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageCodeAsString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageCodeAsString);
      }
      if (EventType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventType);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Payload);
      }
      if (MessageCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageCode);
      }
      if (Severity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Severity);
      }
      if (Component != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Component);
      }
      if (SDKType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SDKType);
      }
      if (deviceInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionSignalSDKEvent other) {
      if (other == null) {
        return;
      }
      if (other.MessageCodeAsString.Length != 0) {
        MessageCodeAsString = other.MessageCodeAsString;
      }
      if (other.EventType.Length != 0) {
        EventType = other.EventType;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.MessageCode != 0) {
        MessageCode = other.MessageCode;
      }
      if (other.Severity != 0) {
        Severity = other.Severity;
      }
      if (other.Component != 0) {
        Component = other.Component;
      }
      if (other.SDKType != 0) {
        SDKType = other.SDKType;
      }
      if (other.deviceInfo_ != null) {
        if (deviceInfo_ == null) {
          deviceInfo_ = new global::com.tiledmedia.clearvr.cvrinterface.DeviceInfo();
        }
        DeviceInfo.MergeFrom(other.DeviceInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EventType = input.ReadString();
            break;
          }
          case 18: {
            Payload = input.ReadString();
            break;
          }
          case 34: {
            if (deviceInfo_ == null) {
              deviceInfo_ = new global::com.tiledmedia.clearvr.cvrinterface.DeviceInfo();
            }
            input.ReadMessage(deviceInfo_);
            break;
          }
          case 40: {
            Severity = input.ReadInt32();
            break;
          }
          case 50: {
            MessageCodeAsString = input.ReadString();
            break;
          }
          case 56: {
            MessageCode = input.ReadInt32();
            break;
          }
          case 64: {
            component_ = (global::com.tiledmedia.clearvr.cvrinterface.LogComponent) input.ReadEnum();
            break;
          }
          case 72: {
            sDKType_ = (global::com.tiledmedia.clearvr.cvrinterface.SDKType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// exact copy og StatsReport struct, not sure how to import to protobuf therefore...
  /// </summary>
  public sealed partial class DeviceInfo : pb::IMessage<DeviceInfo> {
    private static readonly pb::MessageParser<DeviceInfo> _parser = new pb::MessageParser<DeviceInfo>(() => new DeviceInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceInfo(DeviceInfo other) : this() {
      platform_ = other.platform_;
      device_ = other.device_;
      deviceChipset_ = other.deviceChipset_;
      mediaFlowOEM_ = other.mediaFlowOEM_;
      mediaFlowVersion_ = other.mediaFlowVersion_;
      platformArchitecture_ = other.platformArchitecture_;
      platformVersion_ = other.platformVersion_;
      connectionType_ = other.connectionType_;
      cPUCoreClustering_ = other.cPUCoreClustering_;
      renderTimeStdDeviationInMs_ = other.renderTimeStdDeviationInMs_;
      decoderOverflowNOS_ = other.decoderOverflowNOS_;
      decoderInQueueOverflowCnt_ = other.decoderInQueueOverflowCnt_;
      decoderOutQueueOverflowCnt_ = other.decoderOutQueueOverflowCnt_;
      maxTemperatureInDegrees_ = other.maxTemperatureInDegrees_;
      initialBatteryLevel_ = other.initialBatteryLevel_;
      currentBatteryLevel_ = other.currentBatteryLevel_;
      applicationFrameRateNOS_ = other.applicationFrameRateNOS_;
      applicationFrameRateCnt_ = other.applicationFrameRateCnt_;
      applicationFrameRateMax_ = other.applicationFrameRateMax_;
      applicationFrameRateMin_ = other.applicationFrameRateMin_;
      applicationFrameRateStddev_ = other.applicationFrameRateStddev_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceInfo Clone() {
      return new DeviceInfo(this);
    }

    /// <summary>Field number for the "Platform" field.</summary>
    public const int PlatformFieldNumber = 1;
    private string platform_ = "";
    /// <summary>
    /// E.g. 'android', 'ios'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Device" field.</summary>
    public const int DeviceFieldNumber = 2;
    private string device_ = "";
    /// <summary>
    /// E.g. 'SM-930F'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Device {
      get { return device_; }
      set {
        device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DeviceChipset" field.</summary>
    public const int DeviceChipsetFieldNumber = 3;
    private string deviceChipset_ = "";
    /// <summary>
    /// E.g. 'samsungexynos8850'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceChipset {
      get { return deviceChipset_; }
      set {
        deviceChipset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MediaFlowOEM" field.</summary>
    public const int MediaFlowOEMFieldNumber = 4;
    private string mediaFlowOEM_ = "";
    /// <summary>
    /// E.g. 'tiledmedia'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MediaFlowOEM {
      get { return mediaFlowOEM_; }
      set {
        mediaFlowOEM_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MediaFlowVersion" field.</summary>
    public const int MediaFlowVersionFieldNumber = 5;
    private string mediaFlowVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MediaFlowVersion {
      get { return mediaFlowVersion_; }
      set {
        mediaFlowVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlatformArchitecture" field.</summary>
    public const int PlatformArchitectureFieldNumber = 6;
    private string platformArchitecture_ = "";
    /// <summary>
    /// E.g. 'armv7a'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformArchitecture {
      get { return platformArchitecture_; }
      set {
        platformArchitecture_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlatformVersion" field.</summary>
    public const int PlatformVersionFieldNumber = 7;
    private string platformVersion_ = "";
    /// <summary>
    /// E.g. '7.0' for Android 7.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformVersion {
      get { return platformVersion_; }
      set {
        platformVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ConnectionType" field.</summary>
    public const int ConnectionTypeFieldNumber = 8;
    private string connectionType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectionType {
      get { return connectionType_; }
      set {
        connectionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CPUCoreClustering" field.</summary>
    public const int CPUCoreClusteringFieldNumber = 9;
    private string cPUCoreClustering_ = "";
    /// <summary>
    /// CPU core clustering in `&lt;num_total_cores>.&lt;num_cores>[cluster_count]` format, with smaller cores before bigger ones. As an example, on a big.LITTLE architecture with 2 little cores and 4 big cores, this field should be set to '6.2.4'. On a machine with a single-cluster architecture with 6 cores, this field should be set to '6.6'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CPUCoreClustering {
      get { return cPUCoreClustering_; }
      set {
        cPUCoreClustering_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RenderTimeStdDeviationInMs" field.</summary>
    public const int RenderTimeStdDeviationInMsFieldNumber = 10;
    private float renderTimeStdDeviationInMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RenderTimeStdDeviationInMs {
      get { return renderTimeStdDeviationInMs_; }
      set {
        renderTimeStdDeviationInMs_ = value;
      }
    }

    /// <summary>Field number for the "DecoderOverflowNOS" field.</summary>
    public const int DecoderOverflowNOSFieldNumber = 11;
    private int decoderOverflowNOS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DecoderOverflowNOS {
      get { return decoderOverflowNOS_; }
      set {
        decoderOverflowNOS_ = value;
      }
    }

    /// <summary>Field number for the "DecoderInQueueOverflowCnt" field.</summary>
    public const int DecoderInQueueOverflowCntFieldNumber = 12;
    private int decoderInQueueOverflowCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DecoderInQueueOverflowCnt {
      get { return decoderInQueueOverflowCnt_; }
      set {
        decoderInQueueOverflowCnt_ = value;
      }
    }

    /// <summary>Field number for the "DecoderOutQueueOverflowCnt" field.</summary>
    public const int DecoderOutQueueOverflowCntFieldNumber = 13;
    private int decoderOutQueueOverflowCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DecoderOutQueueOverflowCnt {
      get { return decoderOutQueueOverflowCnt_; }
      set {
        decoderOutQueueOverflowCnt_ = value;
      }
    }

    /// <summary>Field number for the "MaxTemperatureInDegrees" field.</summary>
    public const int MaxTemperatureInDegreesFieldNumber = 14;
    private float maxTemperatureInDegrees_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxTemperatureInDegrees {
      get { return maxTemperatureInDegrees_; }
      set {
        maxTemperatureInDegrees_ = value;
      }
    }

    /// <summary>Field number for the "InitialBatteryLevel" field.</summary>
    public const int InitialBatteryLevelFieldNumber = 15;
    private float initialBatteryLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitialBatteryLevel {
      get { return initialBatteryLevel_; }
      set {
        initialBatteryLevel_ = value;
      }
    }

    /// <summary>Field number for the "CurrentBatteryLevel" field.</summary>
    public const int CurrentBatteryLevelFieldNumber = 16;
    private float currentBatteryLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurrentBatteryLevel {
      get { return currentBatteryLevel_; }
      set {
        currentBatteryLevel_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationFrameRateNOS" field.</summary>
    public const int ApplicationFrameRateNOSFieldNumber = 17;
    private int applicationFrameRateNOS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationFrameRateNOS {
      get { return applicationFrameRateNOS_; }
      set {
        applicationFrameRateNOS_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationFrameRateCnt" field.</summary>
    public const int ApplicationFrameRateCntFieldNumber = 18;
    private float applicationFrameRateCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ApplicationFrameRateCnt {
      get { return applicationFrameRateCnt_; }
      set {
        applicationFrameRateCnt_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationFrameRateMax" field.</summary>
    public const int ApplicationFrameRateMaxFieldNumber = 19;
    private float applicationFrameRateMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ApplicationFrameRateMax {
      get { return applicationFrameRateMax_; }
      set {
        applicationFrameRateMax_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationFrameRateMin" field.</summary>
    public const int ApplicationFrameRateMinFieldNumber = 20;
    private float applicationFrameRateMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ApplicationFrameRateMin {
      get { return applicationFrameRateMin_; }
      set {
        applicationFrameRateMin_ = value;
      }
    }

    /// <summary>Field number for the "ApplicationFrameRateStddev" field.</summary>
    public const int ApplicationFrameRateStddevFieldNumber = 21;
    private float applicationFrameRateStddev_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ApplicationFrameRateStddev {
      get { return applicationFrameRateStddev_; }
      set {
        applicationFrameRateStddev_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Platform != other.Platform) return false;
      if (Device != other.Device) return false;
      if (DeviceChipset != other.DeviceChipset) return false;
      if (MediaFlowOEM != other.MediaFlowOEM) return false;
      if (MediaFlowVersion != other.MediaFlowVersion) return false;
      if (PlatformArchitecture != other.PlatformArchitecture) return false;
      if (PlatformVersion != other.PlatformVersion) return false;
      if (ConnectionType != other.ConnectionType) return false;
      if (CPUCoreClustering != other.CPUCoreClustering) return false;
      if (RenderTimeStdDeviationInMs != other.RenderTimeStdDeviationInMs) return false;
      if (DecoderOverflowNOS != other.DecoderOverflowNOS) return false;
      if (DecoderInQueueOverflowCnt != other.DecoderInQueueOverflowCnt) return false;
      if (DecoderOutQueueOverflowCnt != other.DecoderOutQueueOverflowCnt) return false;
      if (MaxTemperatureInDegrees != other.MaxTemperatureInDegrees) return false;
      if (InitialBatteryLevel != other.InitialBatteryLevel) return false;
      if (CurrentBatteryLevel != other.CurrentBatteryLevel) return false;
      if (ApplicationFrameRateNOS != other.ApplicationFrameRateNOS) return false;
      if (ApplicationFrameRateCnt != other.ApplicationFrameRateCnt) return false;
      if (ApplicationFrameRateMax != other.ApplicationFrameRateMax) return false;
      if (ApplicationFrameRateMin != other.ApplicationFrameRateMin) return false;
      if (ApplicationFrameRateStddev != other.ApplicationFrameRateStddev) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (Device.Length != 0) hash ^= Device.GetHashCode();
      if (DeviceChipset.Length != 0) hash ^= DeviceChipset.GetHashCode();
      if (MediaFlowOEM.Length != 0) hash ^= MediaFlowOEM.GetHashCode();
      if (MediaFlowVersion.Length != 0) hash ^= MediaFlowVersion.GetHashCode();
      if (PlatformArchitecture.Length != 0) hash ^= PlatformArchitecture.GetHashCode();
      if (PlatformVersion.Length != 0) hash ^= PlatformVersion.GetHashCode();
      if (ConnectionType.Length != 0) hash ^= ConnectionType.GetHashCode();
      if (CPUCoreClustering.Length != 0) hash ^= CPUCoreClustering.GetHashCode();
      if (RenderTimeStdDeviationInMs != 0F) hash ^= RenderTimeStdDeviationInMs.GetHashCode();
      if (DecoderOverflowNOS != 0) hash ^= DecoderOverflowNOS.GetHashCode();
      if (DecoderInQueueOverflowCnt != 0) hash ^= DecoderInQueueOverflowCnt.GetHashCode();
      if (DecoderOutQueueOverflowCnt != 0) hash ^= DecoderOutQueueOverflowCnt.GetHashCode();
      if (MaxTemperatureInDegrees != 0F) hash ^= MaxTemperatureInDegrees.GetHashCode();
      if (InitialBatteryLevel != 0F) hash ^= InitialBatteryLevel.GetHashCode();
      if (CurrentBatteryLevel != 0F) hash ^= CurrentBatteryLevel.GetHashCode();
      if (ApplicationFrameRateNOS != 0) hash ^= ApplicationFrameRateNOS.GetHashCode();
      if (ApplicationFrameRateCnt != 0F) hash ^= ApplicationFrameRateCnt.GetHashCode();
      if (ApplicationFrameRateMax != 0F) hash ^= ApplicationFrameRateMax.GetHashCode();
      if (ApplicationFrameRateMin != 0F) hash ^= ApplicationFrameRateMin.GetHashCode();
      if (ApplicationFrameRateStddev != 0F) hash ^= ApplicationFrameRateStddev.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Platform.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Platform);
      }
      if (Device.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Device);
      }
      if (DeviceChipset.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeviceChipset);
      }
      if (MediaFlowOEM.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MediaFlowOEM);
      }
      if (MediaFlowVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MediaFlowVersion);
      }
      if (PlatformArchitecture.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PlatformArchitecture);
      }
      if (PlatformVersion.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PlatformVersion);
      }
      if (ConnectionType.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ConnectionType);
      }
      if (CPUCoreClustering.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CPUCoreClustering);
      }
      if (RenderTimeStdDeviationInMs != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(RenderTimeStdDeviationInMs);
      }
      if (DecoderOverflowNOS != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(DecoderOverflowNOS);
      }
      if (DecoderInQueueOverflowCnt != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(DecoderInQueueOverflowCnt);
      }
      if (DecoderOutQueueOverflowCnt != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(DecoderOutQueueOverflowCnt);
      }
      if (MaxTemperatureInDegrees != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(MaxTemperatureInDegrees);
      }
      if (InitialBatteryLevel != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(InitialBatteryLevel);
      }
      if (CurrentBatteryLevel != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(CurrentBatteryLevel);
      }
      if (ApplicationFrameRateNOS != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(ApplicationFrameRateNOS);
      }
      if (ApplicationFrameRateCnt != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(ApplicationFrameRateCnt);
      }
      if (ApplicationFrameRateMax != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(ApplicationFrameRateMax);
      }
      if (ApplicationFrameRateMin != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(ApplicationFrameRateMin);
      }
      if (ApplicationFrameRateStddev != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(ApplicationFrameRateStddev);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (Device.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      if (DeviceChipset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceChipset);
      }
      if (MediaFlowOEM.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MediaFlowOEM);
      }
      if (MediaFlowVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MediaFlowVersion);
      }
      if (PlatformArchitecture.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformArchitecture);
      }
      if (PlatformVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformVersion);
      }
      if (ConnectionType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionType);
      }
      if (CPUCoreClustering.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CPUCoreClustering);
      }
      if (RenderTimeStdDeviationInMs != 0F) {
        size += 1 + 4;
      }
      if (DecoderOverflowNOS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DecoderOverflowNOS);
      }
      if (DecoderInQueueOverflowCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DecoderInQueueOverflowCnt);
      }
      if (DecoderOutQueueOverflowCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DecoderOutQueueOverflowCnt);
      }
      if (MaxTemperatureInDegrees != 0F) {
        size += 1 + 4;
      }
      if (InitialBatteryLevel != 0F) {
        size += 1 + 4;
      }
      if (CurrentBatteryLevel != 0F) {
        size += 2 + 4;
      }
      if (ApplicationFrameRateNOS != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ApplicationFrameRateNOS);
      }
      if (ApplicationFrameRateCnt != 0F) {
        size += 2 + 4;
      }
      if (ApplicationFrameRateMax != 0F) {
        size += 2 + 4;
      }
      if (ApplicationFrameRateMin != 0F) {
        size += 2 + 4;
      }
      if (ApplicationFrameRateStddev != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceInfo other) {
      if (other == null) {
        return;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.Device.Length != 0) {
        Device = other.Device;
      }
      if (other.DeviceChipset.Length != 0) {
        DeviceChipset = other.DeviceChipset;
      }
      if (other.MediaFlowOEM.Length != 0) {
        MediaFlowOEM = other.MediaFlowOEM;
      }
      if (other.MediaFlowVersion.Length != 0) {
        MediaFlowVersion = other.MediaFlowVersion;
      }
      if (other.PlatformArchitecture.Length != 0) {
        PlatformArchitecture = other.PlatformArchitecture;
      }
      if (other.PlatformVersion.Length != 0) {
        PlatformVersion = other.PlatformVersion;
      }
      if (other.ConnectionType.Length != 0) {
        ConnectionType = other.ConnectionType;
      }
      if (other.CPUCoreClustering.Length != 0) {
        CPUCoreClustering = other.CPUCoreClustering;
      }
      if (other.RenderTimeStdDeviationInMs != 0F) {
        RenderTimeStdDeviationInMs = other.RenderTimeStdDeviationInMs;
      }
      if (other.DecoderOverflowNOS != 0) {
        DecoderOverflowNOS = other.DecoderOverflowNOS;
      }
      if (other.DecoderInQueueOverflowCnt != 0) {
        DecoderInQueueOverflowCnt = other.DecoderInQueueOverflowCnt;
      }
      if (other.DecoderOutQueueOverflowCnt != 0) {
        DecoderOutQueueOverflowCnt = other.DecoderOutQueueOverflowCnt;
      }
      if (other.MaxTemperatureInDegrees != 0F) {
        MaxTemperatureInDegrees = other.MaxTemperatureInDegrees;
      }
      if (other.InitialBatteryLevel != 0F) {
        InitialBatteryLevel = other.InitialBatteryLevel;
      }
      if (other.CurrentBatteryLevel != 0F) {
        CurrentBatteryLevel = other.CurrentBatteryLevel;
      }
      if (other.ApplicationFrameRateNOS != 0) {
        ApplicationFrameRateNOS = other.ApplicationFrameRateNOS;
      }
      if (other.ApplicationFrameRateCnt != 0F) {
        ApplicationFrameRateCnt = other.ApplicationFrameRateCnt;
      }
      if (other.ApplicationFrameRateMax != 0F) {
        ApplicationFrameRateMax = other.ApplicationFrameRateMax;
      }
      if (other.ApplicationFrameRateMin != 0F) {
        ApplicationFrameRateMin = other.ApplicationFrameRateMin;
      }
      if (other.ApplicationFrameRateStddev != 0F) {
        ApplicationFrameRateStddev = other.ApplicationFrameRateStddev;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Platform = input.ReadString();
            break;
          }
          case 18: {
            Device = input.ReadString();
            break;
          }
          case 26: {
            DeviceChipset = input.ReadString();
            break;
          }
          case 34: {
            MediaFlowOEM = input.ReadString();
            break;
          }
          case 42: {
            MediaFlowVersion = input.ReadString();
            break;
          }
          case 50: {
            PlatformArchitecture = input.ReadString();
            break;
          }
          case 58: {
            PlatformVersion = input.ReadString();
            break;
          }
          case 66: {
            ConnectionType = input.ReadString();
            break;
          }
          case 74: {
            CPUCoreClustering = input.ReadString();
            break;
          }
          case 85: {
            RenderTimeStdDeviationInMs = input.ReadFloat();
            break;
          }
          case 88: {
            DecoderOverflowNOS = input.ReadInt32();
            break;
          }
          case 96: {
            DecoderInQueueOverflowCnt = input.ReadInt32();
            break;
          }
          case 104: {
            DecoderOutQueueOverflowCnt = input.ReadInt32();
            break;
          }
          case 117: {
            MaxTemperatureInDegrees = input.ReadFloat();
            break;
          }
          case 125: {
            InitialBatteryLevel = input.ReadFloat();
            break;
          }
          case 133: {
            CurrentBatteryLevel = input.ReadFloat();
            break;
          }
          case 136: {
            ApplicationFrameRateNOS = input.ReadInt32();
            break;
          }
          case 149: {
            ApplicationFrameRateCnt = input.ReadFloat();
            break;
          }
          case 157: {
            ApplicationFrameRateMax = input.ReadFloat();
            break;
          }
          case 165: {
            ApplicationFrameRateMin = input.ReadFloat();
            break;
          }
          case 173: {
            ApplicationFrameRateStddev = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionGenDecTestFrame : pb::IMessage<InteractionGenDecTestFrame> {
    private static readonly pb::MessageParser<InteractionGenDecTestFrame> _parser = new pb::MessageParser<InteractionGenDecTestFrame>(() => new InteractionGenDecTestFrame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionGenDecTestFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionGenDecTestFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionGenDecTestFrame(InteractionGenDecTestFrame other) : this() {
      dstWidth_ = other.dstWidth_;
      dstHeight_ = other.dstHeight_;
      codec_ = other.codec_;
      profile_ = other.profile_;
      encrypted_ = other.encrypted_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionGenDecTestFrame Clone() {
      return new InteractionGenDecTestFrame(this);
    }

    /// <summary>Field number for the "dstWidth" field.</summary>
    public const int DstWidthFieldNumber = 1;
    private int dstWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DstWidth {
      get { return dstWidth_; }
      set {
        dstWidth_ = value;
      }
    }

    /// <summary>Field number for the "dstHeight" field.</summary>
    public const int DstHeightFieldNumber = 2;
    private int dstHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DstHeight {
      get { return dstHeight_; }
      set {
        dstHeight_ = value;
      }
    }

    /// <summary>Field number for the "codec" field.</summary>
    public const int CodecFieldNumber = 3;
    private string codec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Codec {
      get { return codec_; }
      set {
        codec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 4;
    private string profile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Profile {
      get { return profile_; }
      set {
        profile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encrypted" field.</summary>
    public const int EncryptedFieldNumber = 5;
    private bool encrypted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Encrypted {
      get { return encrypted_; }
      set {
        encrypted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionGenDecTestFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionGenDecTestFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DstWidth != other.DstWidth) return false;
      if (DstHeight != other.DstHeight) return false;
      if (Codec != other.Codec) return false;
      if (Profile != other.Profile) return false;
      if (Encrypted != other.Encrypted) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DstWidth != 0) hash ^= DstWidth.GetHashCode();
      if (DstHeight != 0) hash ^= DstHeight.GetHashCode();
      if (Codec.Length != 0) hash ^= Codec.GetHashCode();
      if (Profile.Length != 0) hash ^= Profile.GetHashCode();
      if (Encrypted != false) hash ^= Encrypted.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DstWidth != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DstWidth);
      }
      if (DstHeight != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DstHeight);
      }
      if (Codec.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Codec);
      }
      if (Profile.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Profile);
      }
      if (Encrypted != false) {
        output.WriteRawTag(40);
        output.WriteBool(Encrypted);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DstWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DstWidth);
      }
      if (DstHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DstHeight);
      }
      if (Codec.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Codec);
      }
      if (Profile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Profile);
      }
      if (Encrypted != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionGenDecTestFrame other) {
      if (other == null) {
        return;
      }
      if (other.DstWidth != 0) {
        DstWidth = other.DstWidth;
      }
      if (other.DstHeight != 0) {
        DstHeight = other.DstHeight;
      }
      if (other.Codec.Length != 0) {
        Codec = other.Codec;
      }
      if (other.Profile.Length != 0) {
        Profile = other.Profile;
      }
      if (other.Encrypted != false) {
        Encrypted = other.Encrypted;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DstWidth = input.ReadInt32();
            break;
          }
          case 16: {
            DstHeight = input.ReadInt32();
            break;
          }
          case 26: {
            Codec = input.ReadString();
            break;
          }
          case 34: {
            Profile = input.ReadString();
            break;
          }
          case 40: {
            Encrypted = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionLoadMFPersistence : pb::IMessage<InteractionLoadMFPersistence> {
    private static readonly pb::MessageParser<InteractionLoadMFPersistence> _parser = new pb::MessageParser<InteractionLoadMFPersistence>(() => new InteractionLoadMFPersistence());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionLoadMFPersistence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionLoadMFPersistence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionLoadMFPersistence(InteractionLoadMFPersistence other) : this() {
      folder_ = other.folder_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionLoadMFPersistence Clone() {
      return new InteractionLoadMFPersistence(this);
    }

    /// <summary>Field number for the "folder" field.</summary>
    public const int FolderFieldNumber = 1;
    private string folder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Folder {
      get { return folder_; }
      set {
        folder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionLoadMFPersistence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionLoadMFPersistence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Folder != other.Folder) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Folder.Length != 0) hash ^= Folder.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Folder.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Folder);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Folder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Folder);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionLoadMFPersistence other) {
      if (other == null) {
        return;
      }
      if (other.Folder.Length != 0) {
        Folder = other.Folder;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Folder = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionSaveMFPersistence : pb::IMessage<InteractionSaveMFPersistence> {
    private static readonly pb::MessageParser<InteractionSaveMFPersistence> _parser = new pb::MessageParser<InteractionSaveMFPersistence>(() => new InteractionSaveMFPersistence());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionSaveMFPersistence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSaveMFPersistence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSaveMFPersistence(InteractionSaveMFPersistence other) : this() {
      folder_ = other.folder_;
      base64Data_ = other.base64Data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSaveMFPersistence Clone() {
      return new InteractionSaveMFPersistence(this);
    }

    /// <summary>Field number for the "folder" field.</summary>
    public const int FolderFieldNumber = 1;
    private string folder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Folder {
      get { return folder_; }
      set {
        folder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "base64Data" field.</summary>
    public const int Base64DataFieldNumber = 2;
    private string base64Data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Base64Data {
      get { return base64Data_; }
      set {
        base64Data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionSaveMFPersistence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionSaveMFPersistence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Folder != other.Folder) return false;
      if (Base64Data != other.Base64Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Folder.Length != 0) hash ^= Folder.GetHashCode();
      if (Base64Data.Length != 0) hash ^= Base64Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Folder.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Folder);
      }
      if (Base64Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Base64Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Folder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Folder);
      }
      if (Base64Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Base64Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionSaveMFPersistence other) {
      if (other == null) {
        return;
      }
      if (other.Folder.Length != 0) {
        Folder = other.Folder;
      }
      if (other.Base64Data.Length != 0) {
        Base64Data = other.Base64Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Folder = input.ReadString();
            break;
          }
          case 18: {
            Base64Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionCheckIsSupported : pb::IMessage<InteractionCheckIsSupported> {
    private static readonly pb::MessageParser<InteractionCheckIsSupported> _parser = new pb::MessageParser<InteractionCheckIsSupported>(() => new InteractionCheckIsSupported());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionCheckIsSupported> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionCheckIsSupported() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionCheckIsSupported(InteractionCheckIsSupported other) : this() {
      CheckIsSupportedParams = other.checkIsSupportedParams_ != null ? other.CheckIsSupportedParams.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionCheckIsSupported Clone() {
      return new InteractionCheckIsSupported(this);
    }

    /// <summary>Field number for the "CheckIsSupportedParams" field.</summary>
    public const int CheckIsSupportedParamsFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.CheckIsSupportedParams checkIsSupportedParams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.CheckIsSupportedParams CheckIsSupportedParams {
      get { return checkIsSupportedParams_; }
      set {
        checkIsSupportedParams_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionCheckIsSupported);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionCheckIsSupported other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CheckIsSupportedParams, other.CheckIsSupportedParams)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (checkIsSupportedParams_ != null) hash ^= CheckIsSupportedParams.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (checkIsSupportedParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CheckIsSupportedParams);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (checkIsSupportedParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CheckIsSupportedParams);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionCheckIsSupported other) {
      if (other == null) {
        return;
      }
      if (other.checkIsSupportedParams_ != null) {
        if (checkIsSupportedParams_ == null) {
          checkIsSupportedParams_ = new global::com.tiledmedia.clearvr.cvrinterface.CheckIsSupportedParams();
        }
        CheckIsSupportedParams.MergeFrom(other.CheckIsSupportedParams);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (checkIsSupportedParams_ == null) {
              checkIsSupportedParams_ = new global::com.tiledmedia.clearvr.cvrinterface.CheckIsSupportedParams();
            }
            input.ReadMessage(checkIsSupportedParams_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionSendSensorPose : pb::IMessage<InteractionSendSensorPose> {
    private static readonly pb::MessageParser<InteractionSendSensorPose> _parser = new pb::MessageParser<InteractionSendSensorPose>(() => new InteractionSendSensorPose());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionSendSensorPose> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSendSensorPose() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSendSensorPose(InteractionSendSensorPose other) : this() {
      ViewportAndDisplayObjectPose = other.viewportAndDisplayObjectPose_ != null ? other.ViewportAndDisplayObjectPose.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSendSensorPose Clone() {
      return new InteractionSendSensorPose(this);
    }

    /// <summary>Field number for the "ViewportAndDisplayObjectPose" field.</summary>
    public const int ViewportAndDisplayObjectPoseFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose viewportAndDisplayObjectPose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose ViewportAndDisplayObjectPose {
      get { return viewportAndDisplayObjectPose_; }
      set {
        viewportAndDisplayObjectPose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionSendSensorPose);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionSendSensorPose other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ViewportAndDisplayObjectPose, other.ViewportAndDisplayObjectPose)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (viewportAndDisplayObjectPose_ != null) hash ^= ViewportAndDisplayObjectPose.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (viewportAndDisplayObjectPose_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ViewportAndDisplayObjectPose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (viewportAndDisplayObjectPose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ViewportAndDisplayObjectPose);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionSendSensorPose other) {
      if (other == null) {
        return;
      }
      if (other.viewportAndDisplayObjectPose_ != null) {
        if (viewportAndDisplayObjectPose_ == null) {
          viewportAndDisplayObjectPose_ = new global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose();
        }
        ViewportAndDisplayObjectPose.MergeFrom(other.ViewportAndDisplayObjectPose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (viewportAndDisplayObjectPose_ == null) {
              viewportAndDisplayObjectPose_ = new global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose();
            }
            input.ReadMessage(viewportAndDisplayObjectPose_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionSendSensorData : pb::IMessage<InteractionSendSensorData> {
    private static readonly pb::MessageParser<InteractionSendSensorData> _parser = new pb::MessageParser<InteractionSendSensorData>(() => new InteractionSendSensorData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionSendSensorData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSendSensorData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSendSensorData(InteractionSendSensorData other) : this() {
      ViewportAndDisplayObjectPose = other.viewportAndDisplayObjectPose_ != null ? other.ViewportAndDisplayObjectPose.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSendSensorData Clone() {
      return new InteractionSendSensorData(this);
    }

    /// <summary>Field number for the "ViewportAndDisplayObjectPose" field.</summary>
    public const int ViewportAndDisplayObjectPoseFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose viewportAndDisplayObjectPose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose ViewportAndDisplayObjectPose {
      get { return viewportAndDisplayObjectPose_; }
      set {
        viewportAndDisplayObjectPose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionSendSensorData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionSendSensorData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ViewportAndDisplayObjectPose, other.ViewportAndDisplayObjectPose)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (viewportAndDisplayObjectPose_ != null) hash ^= ViewportAndDisplayObjectPose.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (viewportAndDisplayObjectPose_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ViewportAndDisplayObjectPose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (viewportAndDisplayObjectPose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ViewportAndDisplayObjectPose);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionSendSensorData other) {
      if (other == null) {
        return;
      }
      if (other.viewportAndDisplayObjectPose_ != null) {
        if (viewportAndDisplayObjectPose_ == null) {
          viewportAndDisplayObjectPose_ = new global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose();
        }
        ViewportAndDisplayObjectPose.MergeFrom(other.ViewportAndDisplayObjectPose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (viewportAndDisplayObjectPose_ == null) {
              viewportAndDisplayObjectPose_ = new global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose();
            }
            input.ReadMessage(viewportAndDisplayObjectPose_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionSendSensorDataPose : pb::IMessage<InteractionSendSensorDataPose> {
    private static readonly pb::MessageParser<InteractionSendSensorDataPose> _parser = new pb::MessageParser<InteractionSendSensorDataPose>(() => new InteractionSendSensorDataPose());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionSendSensorDataPose> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.tiledmedia.clearvr.cvrinterface.CoreReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSendSensorDataPose() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSendSensorDataPose(InteractionSendSensorDataPose other) : this() {
      ViewportAndDisplayObjectPose = other.viewportAndDisplayObjectPose_ != null ? other.ViewportAndDisplayObjectPose.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionSendSensorDataPose Clone() {
      return new InteractionSendSensorDataPose(this);
    }

    /// <summary>Field number for the "ViewportAndDisplayObjectPose" field.</summary>
    public const int ViewportAndDisplayObjectPoseFieldNumber = 1;
    private global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose viewportAndDisplayObjectPose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose ViewportAndDisplayObjectPose {
      get { return viewportAndDisplayObjectPose_; }
      set {
        viewportAndDisplayObjectPose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionSendSensorDataPose);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionSendSensorDataPose other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ViewportAndDisplayObjectPose, other.ViewportAndDisplayObjectPose)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (viewportAndDisplayObjectPose_ != null) hash ^= ViewportAndDisplayObjectPose.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (viewportAndDisplayObjectPose_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ViewportAndDisplayObjectPose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (viewportAndDisplayObjectPose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ViewportAndDisplayObjectPose);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionSendSensorDataPose other) {
      if (other == null) {
        return;
      }
      if (other.viewportAndDisplayObjectPose_ != null) {
        if (viewportAndDisplayObjectPose_ == null) {
          viewportAndDisplayObjectPose_ = new global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose();
        }
        ViewportAndDisplayObjectPose.MergeFrom(other.ViewportAndDisplayObjectPose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (viewportAndDisplayObjectPose_ == null) {
              viewportAndDisplayObjectPose_ = new global::com.tiledmedia.clearvr.cvrinterface.ViewportAndDisplayObjectPose();
            }
            input.ReadMessage(viewportAndDisplayObjectPose_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
